{"version":3,"sources":["../../src/index.tsx","pages/list1.js"],"names":["_ref","cdnSuffix","_ref$cdnSuffix","_ref$cdnUrl","cdnUrl","countryCode","style","_ref$svg","svg","props","_objectWithoutPropertiesLoose","_excluded","flagUrl","toLowerCase","createElement","Object","assign","src","_extends","display","width","height","verticalAlign","emoji","toUpperCase","replace","_char","String","fromCodePoint","charCodeAt","role","fontSize","lineHeight","initialValues","tradeType","searchBy","searchValue","fromDate","toDate","matchType","dateRange","searchFlag","queryBuilder","SearchQueryCount","isMainSearch","scrollToRef","ref","window","scrollTo","current","offsetTop","CountrySelector","multiTradeCountryList","selectedTradeCountry","setFieldValue","values","setSelectedTradeCountry","setMaxMinDate","showModal","setShowModal","useState","tempSelectedCountries","setTempSelectedCountries","selectAll","setSelectAll","useEffect","selectedValues","map","country","value","length","_jsxs","_Fragment","children","_jsx","className","onClick","label","join","Modal","show","onHide","size","Header","closeButton","Title","Body","type","checked","onChange","handleSelectAllChange","allCountryValues","updatedSelectedCountries","includes","shortcode","updatedTempSelectedCountries","filter","code","handleCheckboxChange","ReactCountryFlag","iso2code","paddingRight","validateForm","Yup","shape","required","test","checkGreaterStartEndTimes","this","parent","checkGreaterTimes","withRouter","connect","state","loading","loader","download_count","data","subscriptionId","dataAccess_count","totalWorkspace","subUserCount","queryPerDay","downloadArray","countryList","dataAccessInMonth","download_count_subUser","dataAccessUpto","maxDownload","dispatch","loadingStart","loaderStart","loadingStop","loaderStop","updateSubscriptionCount","updateDownloadArrayCount","setDloadCountSubuser","setSearchQuery","userId","localStorage","getItem","user","loggedUser","JSON","parse","userId_new","firstname","lastname","email","uplineId","userid","history","useHistory","search_id","location","searchTypeValue","search_type","workspace_id","workspace_name","workspace_desc","workspaceId","newSearch","gridRef","useRef","toggle","setToggle","searchResult","setSearchResult","limit","setLimit","page","setPage","totalRecord","setTotalRecord","searchLoading","setSearchLoading","searchParams","setSearchParams","importerList","setImporterList","importerDataList","setImporterDataList","exporterList","setExporterList","exporterDataList","setExporterDataList","portOriginList","setPortOriginList","portOriginDataList","setPortOriginDataList","portDestinationDataList","setPortDestinationDataList","portDestinationList","setPortDestinationList","countryOriginList","setCountryOriginList","countryDestinationList","setCountryDestinationList","hsCodeList","setHsCodeList","hsCodeDataList","setHsCodeDataList","cityOriginList","setCityOriginList","cityDestinationList","setCityDestinationList","searchId","setSearchId","orderByColumn","setOrderByColumn","orderByMode","setOrderByMode","hscodeLoading","isHscodeLoading","portDestLoading","isPortDestLoading","coLoading","isCoLoading","importerLoading","isImporterLoading","exporterLoading","isExporterLoading","totalRecordLoading","isTotalRecordLoading","shipmentModeDataList","setShipmentModeDataList","shipmentModeList","setShipmentModeList","hsCode4DigitList","setHsCode4digitList","hsCode4digitDataList","setHsCode4digitDataList","filteredColumn","setFilteredColumn","suggestions","setSuggestions","queryBuilderSuggestions","setQueryBuilderSuggestions","isDownloaded","setIsDownloaded","noDataErrorMsg","setNoDataErrorMsg","isSearchClicked","setIsSearchClicked","previousTotalRecordCount","setPreviousTotalRecordCount","stdUnitDataList","setStdUnitDataList","stdUnitList","setStdUnitList","setCountryCode","importerForExport","setImporterForExport","exporterForImport","setExporterForImport","returnSearchId","setReturnSearchId","consumptionType","setConsumptionType","consumptionTypeDataList","setConsumptionTypeDataList","incotermList","setIncotermList","incotermListData","setIncotermListData","notifyPartyList","setNotifyPartyList","notifyPartyListData","setNotifyPartyListData","sTitleRef","sDescRef","workspaceRef","sWorkspaceRef","setTradeType","sTitleError","isSTitleError","sDescError","isSDescError","sNewWsError","isNewWsError","wsError","isWsError","workspaceList","setWorkspaceList","tradeCountryList","setTradeCountryList","setMultiTradeCountryList","setSearchValue","queryBuilderSearchValue","setQueryBuilderSearchValue","showNewWorkspaceInput","setshowNewWorkspaceInput","minDate","setMinDate","Date","maxDate","setMaxDate","filteredArray","setFilteredArray","countryWeightage","setCountryWeightage","filterCountryList","setFilterCountryList","selectedFilterCountryList","setSelectedFilterCountryList","toggleModal","UpdateSubscription","params","AxiosUser","method","url","stringify","headers","then","res","console","log","catch","err","LoginCheck","setWorkspace","val","Swal","fire","title","text","icon","dangerMode","showCancelButton","confirmButtonColor","cancelButtonColor","isConfirm","saveQuery","postData","AxiosACT","errorMsg","getPaginationSearchData","searchType","getTradingCountryList","handleChangeLimit","dataKey","handleSearch","arguments","undefined","moment","format","minQuantity","maxQuantity","minValue","maxValue","minUnitPrice","maxUnitPrice","consumptionTypeList","descriptionList","conditionProductDescription","lp","setItem","getSearchData","exportToCSV","Math","round","Axios","exportDataSet","countryCodes","tempTradeType","expForeignList","impForeignList","i","filtered","obj","key","push","downloadXLS","confirmButtonText","exportSelectedToCSV","checkedRowID","item","index","subItem","subIndex","id","dloadType","prevDownloadArray","newIDArray","newValueArray","totalNewWeightage","reduce","total","match1","find","ctry_code","weightagePoints","totalFilteredWeightage","match","remainingDload","remainingDload_subUser","countryWeightageSummary","forEach","countryName","totalCount","totalWeightage","html","fileType","fileExtension","fileName","wb","Sheets","XLSX","table_to_sheet","document","getElementById","header","SheetNames","excelBuffer","bookType","Blob","FileSaver","saveLogPayload","saveDownloadLog","UpdateDownloadTracher","downloadSearch","tempSearchResult","rangeQuantityStart","rangeQuantityEnd","rangeValueUsdStart","rangeValueUsdEnd","rangeUnitPriceUsdStart","rangeUnitPriceUsdEnd","incoterm","notifyParty","productDesc","conditionProductDesc","async","getTotalCount","objColumns","keys","x","countryRes","tempOptions","countryWiseCount","_ref2","ctry_name","shipment_count","getImporterList","getExporterList","getPortOriginList","getPortDestinationList","getHSCodeList","getIndianCityList","getForeignCountryList","getHSCode4digitList","getShipmentModeList","getStdUnitList","searchQuery","columnKey","formattedOptions","distinctColumnValuesList","_ref3","column_name","records_count","e","getConsumptionTypeDataList","apiResponse","_ref4","getIncotermListDataList","_ref5","getNotifyPartyListDataList","searchID","updateSearchCount","setTimeout","totalRecords","totalDownloadRecords","importList","importersList","specificItem","importer_name","exportList","exportersList","exporter_name","portsList","port_name","hsList","hscodesList","hscode","fcList","countriesList","country_name","icList","citiesList","city_name","ship_mode","std_unit","updateFilter","handleSaveSearch","parseInt","fetchSearchQuery","getSuggestionList","innitialParams","newSuggestionList","QueryBuilderNewSuggestionList","suggestionList","listSuggestion","SelectMenuButton","components","MenuList","AxiosMaster","multiCountryList","name","image","exportPointWeightage","importPointWeightage","hasChild","queryBuilderSuggestionList","queryList","sParams","userSearchQuery","shipModeList","newitem","newindex","tempArray","fetchTradingCountryListOnInnitialize","selectedCountryList","tempRow","some","importFrom","importUpto","exportFrom","exportUpto","setDate","selectedCountries","fromDates","toDates","min","max","removeItem","errors","touched","setFieldTouched","Fragment","FieldArray","render","arrayHelpers","Field","component","autoComplete","event","target","swalResponse","hasOwnProperty","FormGroup","Creatable","placeholder","options","isMulti","isOptionDisabled","noOptionsMessage","onInputChange","newValue","selectedOption","itemList","defaultValue","remove","relation","Formik","enableReinitialize","validationSchema","onSubmit","checkValidErr","errMsg","subitem","resetForm","_ref6","setFieldError","isValid","handleSubmit","submitForm","Form","tempmaxMin","tempMaxDate","diff","newMaxDate","newDate","d","subtract","fromdate","dateDiff","tempFromdate","add","DatePicker","dateFormat","placeholderText","peekPreviousMonth","peekPreviousYear","showMonthDropdown","showYearDropdown","dropdownMode","selected","newQuery","isQueryBuilder","resetSearch","disabled","preventDefault","require","default","Draggable","class","DataTableExport","newColumnsKeys","columnKeys","DataTableImport","AdvanceSearch","toggleFromChild","resetFilter","incotermDataList","notifyPartyDataList","hidden","DloadTemplateXLS","backdrop","keyboard","handleWorkspaceChange","ws","Footer","Button","variant","getNewWorkspaceId"],"mappings":"otBA2BgC,SAAHA,G,QAC3BC,iBAAS,IAAAC,EAxBgB,MAwBKA,EAAAC,EAAAH,EAC9BI,cAAM,IAAAD,EA1BN,0DA0BwBA,EACxBE,EAAWL,EAAXK,YACAC,EAAKN,EAALM,MAAKC,EAAAP,EACLQ,WAAG,IAAAD,GAAQA,EACRE,E,oIAAKC,CAAAV,EAAAW,GAER,GAA2B,kBAAhBN,EACT,OAAO,KAGT,GAAIG,EAAK,CACP,IAAMI,EAAU,GAAGR,EAASC,EAAYQ,cAAa,IAAIZ,EAEzD,OACEa,wBAAA,MAAAC,OAAAC,OAAA,GACMP,EAAK,CACTQ,IAAKL,EACLN,MAAKY,EAAA,CACHC,QAAS,eACTC,MAAO,MACPC,OAAQ,MACRC,cAAe,UACZhB,K,CAMX,IAAMiB,EAAQlB,EACXmB,cACAC,QAAQ,MAAM,SAAAC,GAAI,OAAIC,OAAOC,cAAcF,EAAKG,WAAW,GApDjD,O,IAsDb,OACEf,wBAAA,OAAAC,OAAAC,OAAA,CACEc,KAAK,OACDrB,EAAK,CACTH,MAAKY,EAAA,CACHC,QAAS,eACTY,SAAU,MACVC,WAAY,MACZV,cAAe,UACZhB,KAGJiB,EAGP,E,OChCA,IAAIU,EAAgB,CAClBC,UAAW,GACXC,SAAU,GACVC,YAAa,GACb/B,YAAa,GACbgC,SAAU,GACVC,OAAQ,GACRC,UAAW,GACXC,UAAW,GACXC,YAAY,EACZC,aAAc,GACdC,iBAAkB,EAClBC,cAAc,GAKhB,MACMC,EAAeC,GAAQC,OAAOC,SAAS,EAAGF,EAAIG,QAAQC,WA4H5D,MAAMC,EAAkBnD,IAAqH,IAApH,sBAAEoD,EAAqB,qBAAEC,EAAoB,cAAEC,EAAa,OAAEC,EAAM,wBAAEC,EAAuB,cAAEC,GAAezD,EACrI,MAAO0D,EAAWC,GAAgBC,oBAAS,IACpCC,EAAuBC,GAA4BF,mBAAS,KAC5DG,EAAWC,GAAgBJ,oBAAS,GAG3CK,qBAAU,KACR,MAAMC,EAAiBb,EAAqBc,KAAKC,GAAYA,EAAQC,QACrEP,EAAyBI,GACzBF,EAAaE,EAAeI,SAAWlB,EAAsBkB,OAAO,GACnE,CAACjB,EAAsBD,IAiE1B,OACEmB,eAAAC,WAAA,CAAAC,SAAA,CAEEC,cAAA,OACEC,UAAU,2BACVC,QAASA,IAAMjB,GAAa,GAAMc,SAEjCpB,EAAqBiB,OAAS,EAb/BjB,EAAqBiB,QAAU,EAC1BjB,EAAqBc,KAAKC,GAAYA,EAAQS,QAAOC,KAAK,MAE5D,GAAGzB,EAAqB,GAAGwB,UAAUxB,EAAqB,GAAGwB,aAUV,qBAIxDN,eAACQ,IAAK,CAACC,KAAMtB,EAAWuB,OAAQA,IAAMtB,GAAa,GAAQuB,KAAK,KAAIT,SAAA,CAClEC,cAACK,IAAMI,OAAM,CAACC,aAAW,EAAAX,SACvBC,cAACK,IAAMM,MAAK,CAAAZ,SAAC,uBAEfF,eAACQ,IAAMO,KAAI,CAAAb,SAAA,CACTC,cAAA,OAAKC,UAAU,WAAUF,SACvBC,cAAA,OAAKC,UAAU,YAAWF,SACxBF,eAAA,OAAKI,UAAU,kDAAiDF,SAAA,CAC9DC,cAAA,SACEa,KAAK,WACLC,QAASzB,EACT0B,SAxDcC,KAC5B,GAAI3B,EAEFD,EAAyB,IACzBN,EAAwB,IACxBF,EAAc,cAAe,IAC7BA,EAAc,WAAY,IAC1BA,EAAc,SAAU,IACxBA,EAAc,YAAa,IAC3BG,EAAc,GAAIF,EAAOrB,eACpB,CAEL,MAAMyD,EAAmBvC,EAAsBe,KAAKC,GAAYA,EAAQC,QACxEP,EAAyB6B,GAEzB,MAAMC,EAA2BxC,EACjCI,EAAwBoC,GACxBtC,EAAc,cAAeqC,GAC7BrC,EAAc,WAAY,IAC1BA,EAAc,SAAU,IACxBA,EAAc,YAAa,IAC3BG,EAAcmC,EAA0BrC,EAAOrB,UACjD,CAEA8B,GAAcD,EAAU,IAmCZW,cAAA,SAAAD,SAAO,sBAIbC,cAAA,OACEC,UAAU,uBAAsBF,SAE/BrB,EAAsBe,KAAKC,GAC1BM,cAAA,OAAyBC,UAAU,gBAAeF,SAChDF,eAAA,OACEI,UAAU,kDAAiDF,SAAA,CAE3DC,cAAA,SACEa,KAAK,WACLC,QAAS3B,EAAsBgC,SAASzB,EAAQC,OAChDoB,SAAUA,IAvGEK,KAC5B,IAAIC,EAIFA,EAFElC,EAAsBgC,SAASC,GAEFjC,EAAsBmC,QAAQC,GAASA,IAASH,IAGhD,IAAIjC,EAAuBiC,GAI5DhC,EAAyBiC,GAEzB,MAAMH,EAA2BxC,EAAsB4C,QAAQ5B,GAC7D2B,EAA6BF,SAASzB,EAAQC,SAGhDb,EAAwBoC,GACxBtC,EAAc,cAAeyC,GAC7BzC,EAAc,WAAY,IAC1BA,EAAc,SAAU,IACxBA,EAAc,YAAa,IAC3BG,EAAcmC,EAA0BrC,EAAOrB,WAG/C8B,EAAa+B,EAA6BzB,SAAWlB,EAAsBkB,OAAO,EA6ElD4B,CAAqB9B,EAAQC,SAE/CE,eAAA,SAAAE,SAAA,CACEC,cAACyB,EAAgB,CACfxB,UAAU,YACVtE,YAAa+D,EAAQgC,SACrB9F,MAAO,CACLyB,SAAU,QACVC,WAAY,MACZqE,aAAc,OAEhB,aAAW,kBAEZjC,EAAQS,aApBLT,EAAQC,mBA4BzB,EAODiC,EAAeC,MAAaC,MAAM,CACtCtE,UAAWqE,MAAaE,SAAS,4BACjCtE,SAAUoE,MAAaE,SAAS,0BAChClE,UAAWgE,MAAaE,SAAS,0BACjCjE,UAAW+D,MAAaE,SAAS,0BAcjCpE,SAAUkE,MAAWE,SAAS,0BAC3BC,KACC,4BACA,yCACA,SAAUrC,GACR,OAAIA,GACKsC,YAA0BtC,EAAOuC,KAAKC,OAAOvE,OAGxD,IAEJA,OAAQiE,MAAWE,SAAS,0BACzBC,KACC,4BACA,4CACA,SAAUrC,GACR,OAAIA,GACKsC,YAA0BC,KAAKC,OAAOxE,SAAUgC,EAG3D,IAEDqC,KACC,oBACA,uCACA,SAAUrC,GACR,OAAIA,GACKyC,YAAkBF,KAAKC,OAAOxE,SAAUgC,EAGnD,MA6vHS0C,sBAAWC,aA7BFC,IACf,CACLC,QAASD,EAAME,OAAOD,QACtBE,eAAgBH,EAAMI,KAAKD,eAC3BE,eAAgBL,EAAMI,KAAKC,eAC3BC,iBAAkBN,EAAMI,KAAKE,iBAC7BC,eAAgBP,EAAMI,KAAKG,eAC3BC,aAAcR,EAAMI,KAAKI,aACzBC,YAAaT,EAAMI,KAAKK,YACxBC,cAAeV,EAAMI,KAAKM,cAC1BC,YAAaX,EAAMI,KAAKO,YACxBC,kBAAmBZ,EAAMI,KAAKQ,kBAC9BC,uBAAwBb,EAAMI,KAAKS,uBACnCC,eAAgBd,EAAMI,KAAKU,eAC3BC,YAAaf,EAAMI,KAAKW,gBAIDC,IAClB,CACLC,aAAcA,IAAMD,EAASE,eAC7BC,YAAaA,IAAMH,EAASI,eAC5BC,wBAA0BjB,GAASY,EAASK,YAAwBjB,IACpEkB,yBAA2BlB,GAASY,EAASM,YAAyBlB,IACtEmB,qBAAuBnB,GAASY,EAASO,YAAqBnB,IAC9DoB,eAAiBpB,GAASY,EAASQ,YAAepB,OAI5BL,EAlvHZvG,IAEZ,MAAMiI,EAASC,aAAaC,QAAQ,aAC9BC,EAAOF,aAAaC,QAAQ,QAC5BE,EAAaD,EAAOE,KAAKC,MAAMH,GAAQ,CAAC,EAGxCI,GAFcH,EAAWI,UAAaJ,EAAWK,SACrCL,EAAWM,MACVN,EAAWO,SAAW,EAAIP,EAAWO,SAAWP,EAAWQ,QAExEC,EAAUC,cACVC,EAAYhJ,EAAMiJ,SAASzC,MAAQxG,EAAMiJ,SAASzC,MAAMwC,UAAY,KAGpEE,EAAkBlJ,EAAMiJ,SAASzC,OAASxG,EAAMiJ,SAASzC,MAAM2C,YAAcnJ,EAAMiJ,SAASzC,MAAM2C,YAAc,GAChHC,EAAepJ,EAAMiJ,SAASzC,OAASxG,EAAMiJ,SAASzC,MAAM4C,aAAepJ,EAAMiJ,SAASzC,MAAM4C,aAAe,GAC/GC,EAAiBrJ,EAAMiJ,SAASzC,MAAQxG,EAAMiJ,SAASzC,MAAM6C,eAAiB,GAC9EC,EAAiBtJ,EAAMiJ,SAASzC,MAAQxG,EAAMiJ,SAASzC,MAAM8C,eAAiB,GAC9EC,EAAcvJ,EAAMiJ,SAASzC,MAAQxG,EAAMiJ,SAASzC,MAAM+C,YAAc,GACxEC,EAAY,CAAC,CAAE,MAASxJ,GAASA,EAAMiJ,SAASzC,OAASxG,EAAMiJ,SAASzC,MAAM7E,YAAa,MAAS3B,GAASA,EAAMiJ,SAASzC,OAASxG,EAAMiJ,SAASzC,MAAM7E,cAG1J8H,EAAUC,oBAETC,EAAQC,GAAazG,oBAAS,IAC9B0G,EAAcC,GAAmB3G,mBAAS,KAC1C4G,EAAOC,GAAY7G,mBAAS,KAC5B8G,EAAMC,GAAW/G,mBAAS,IAC1BgH,EAAaC,GAAkBjH,mBAAS,IACxCkH,EAAeC,IAAoBnH,oBAAS,IAC5CoH,GAAcC,IAAmBrH,mBAAS3B,EAAcG,cACxD8I,GAAcC,IAAmBvH,mBAAS,KAC1CwH,GAAkBC,IAAuBzH,mBAAS,KAClD0H,GAAcC,IAAmB3H,mBAAS,KAC1C4H,GAAkBC,IAAuB7H,mBAAS,KAClD8H,GAAgBC,IAAqB/H,mBAAS,KAC9CgI,GAAoBC,IAAyBjI,mBAAS,KACtDkI,GAAyBC,IAA8BnI,mBAAS,KAChEoI,GAAqBC,IAA0BrI,mBAAS,KACxDsI,GAAmBC,IAAwBvI,mBAAS,KACpDwI,GAAwBC,IAA6BzI,mBAAS,KAC9D0I,GAAYC,IAAiB3I,mBAAS,KACtC4I,GAAgBC,IAAqB7I,mBAAS,KAC9C8I,GAAgBC,IAAqB/I,mBAAS,KAC9CgJ,GAAqBC,IAA0BjJ,mBAAS,KACxDkJ,GAAUC,IAAenJ,sBACzBoJ,GAAeC,IAAoBrJ,mBAAS,KAC5CsJ,GAAaC,IAAkBvJ,mBAAS,SACxCwJ,GAAeC,IAAmBzJ,oBAAS,IAC3C0J,GAAiBC,IAAqB3J,oBAAS,IAC/C4J,GAAWC,IAAe7J,oBAAS,IACnC8J,GAAiBC,IAAqB/J,oBAAS,IAC/CgK,GAAiBC,IAAqBjK,oBAAS,IAC/CkK,GAAoBC,IAAwBnK,oBAAS,IAErDoK,GAAsBC,IAA2BrK,mBAAS,KAC1DsK,GAAkBC,IAAuBvK,mBAAS,KAClDwK,GAAkBC,IAAuBzK,mBAAS,KAClD0K,GAAsBC,IAA2B3K,mBAAS,KAC1D4K,GAAgBC,IAAqB7K,mBAAS,KAC9C8K,GAAaC,IAAkB/K,mBAAS,KACxCgL,GAAyBC,IAA8BjL,mBAAS,KAChEkL,GAAcC,IAAmBnL,mBAAS,KAC1CoL,GAAgBC,IAAqBrL,oBAAS,IAC9CsL,GAAiBC,IAAsBvL,oBAAS,IAChDwL,GAA0BC,IAA+BzL,mBAAS,IAClE0L,GAAiBC,IAAsB3L,mBAAS,KAChD4L,GAAaC,IAAkB7L,mBAAS,KACxCvD,GAAaqP,IAAkB9L,mBAAS,KACxC+L,GAAmBC,IAAwBhM,mBAAS,KACpDiM,GAAmBC,IAAwBlM,mBAAS,KACpDmM,GAAgBC,IAAqBpM,mBAAS,KAE9CqM,GAAiBC,IAAsBtM,mBAAS,KAChDuM,GAAyBC,IAA8BxM,mBAAS,KAChEyM,GAAcC,IAAmB1M,mBAAS,KAC1C2M,GAAkBC,IAAuB5M,mBAAS,KAClD6M,GAAiBC,IAAsB9M,mBAAS,KAChD+M,GAAqBC,IAA0BhN,mBAAS,IAKzDiN,GAAY1G,mBACZ2G,GAAW3G,mBACX4G,GAAe5G,mBACf6G,GAAgB7G,oBACfzG,GAAWC,IAAgBC,oBAAS,IACpC1B,GAAW+O,IAAgBrN,mBAAS,KACpCsN,GAAaC,IAAiBvN,mBAAS,KACvCwN,GAAYC,IAAgBzN,mBAAS,KACrC0N,GAAaC,IAAgB3N,mBAAS,KACtC4N,GAASC,IAAa7N,mBAAS,KAC/B8N,GAAeC,IAAoB/N,mBAAS,KAC5CgO,GAAkBC,IAAuBjO,mBAAS,KAClDR,GAAuB0O,IAA4BlO,mBAAS,KAC5DP,GAAsBG,IAA2BI,mBAAS,KAC1DxB,GAAa2P,IAAkBnO,mBAAS,KACxCoO,GAAyBC,IAA8BrO,mBAAS,KAChEsO,GAAuBC,IAA4BvO,oBAAS,IAC5DwO,GAASC,IAAczO,mBAAS,IAAI0O,OACpCC,GAASC,IAAc5O,mBAAS,IAAI0O,OACpCG,GAAeC,IAAoB9O,mBAAS,KAC5C+O,GAAkBC,IAAuBhP,mBAAS,IAGlDiP,GAAmBC,IAAwBlP,mBAAS,KACpDmP,GAA2BC,IAAgCpP,mBAAS,IAGrEqP,GAAcA,KAClBtP,IAAcD,IACdyN,GAAc,IACdE,GAAa,IACbE,GAAa,IACbE,GAAU,GAAG,EAKTyB,GAAsBC,IAE1BC,YAAU,CACRC,OAAQ,MACRC,IAAK,4CAA4C7S,EAAM6G,iBACvDD,KAAM0B,KAAKwK,UAAUJ,GACrBK,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJC,QAAQC,IAAI,OAAQF,EAAIrM,KAAK,IAE9BwM,OAAMC,IACLH,QAAQC,IAAI,MAAOE,EACsC,GACzD,EAIN7P,qBAAU,KACR8P,YAAWxK,EAAQ,GAClB,CAAC9I,EAAMyG,QAAS9E,GAAasP,GAAe5G,IAE/C,MA+CMkJ,GAAgBC,IAChBxT,EAAM+G,eAAiB,EACzB0M,IAAKC,KAAK,CACRC,MAAO,qBACPC,KAAM,mBAAmB5T,EAAM+G,qEAC/B8M,KAAM,UACNC,YAAY,EACZC,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,SAClBjB,MAAMkB,IACHA,EAAUtQ,OACZV,GAAasQ,EACf,IAIFC,IAAKC,KAAK,CACRC,MAAO,qBACPC,KAAM,iCACNC,KAAM,QACNC,YAAY,EACZE,mBAAoB,YACnBhB,MAAMkB,OACX,EAIIC,GAAYA,KAChB,MAAMC,EAAW,CACf,aAAgBhL,EAChB,UAAaiD,GACb,KAAQhD,EACR,YAAeC,EACf,UAAa,IACb,GAAMC,GAER8K,YAAS,CACPzB,OAAQ,OACRC,IAAK,4CACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJQ,IAAKC,KAAK,CACRC,MAAO,UACPC,KAAM,kCACNC,KAAM,WACN,IAEHT,OAAMC,IACL,IAAIiB,EAAW,2CACXjB,EAAIzM,KAAK0N,WACXA,EAAWjB,EAAIzM,KAAK0N,UAEtBb,IAAKC,KAAK,CACRC,MAAO,QACPC,KAAMU,EACNT,KAAM,SACN,GACF,EAUNrQ,qBAAU,IACD,KACLhC,EAAgB,CAAC,CAAC,GAEnB,IAEHgC,qBAAU,KAEJ+G,IAAgBA,GAAa9I,WAC/B8S,GAAwBhK,IAEtBvK,GAASA,EAAMiJ,SAASzC,OAASxG,EAAMiJ,SAASzC,MAAM7E,aACxD2P,GAAe9H,GAGjBhI,EAAgB,IACXA,EACHC,UAAWzB,GAASA,EAAMiJ,SAASzC,OAASxG,EAAMiJ,SAASzC,MAAM/E,UAAYzB,EAAMiJ,SAASzC,MAAM/E,UAAY,GAC9GK,UAAW,GACXJ,SAAU1B,GAASA,EAAMiJ,SAASzC,OAASxG,EAAMiJ,SAASzC,MAAMgO,WAAaxU,EAAMiJ,SAASzC,MAAMgO,WAAa,GAC/G7S,YAAa3B,GAASA,EAAMiJ,SAASzC,OAASxG,EAAMiJ,SAASzC,MAAMgO,WACnE5U,YAAaI,GAASA,EAAMiJ,SAASzC,OAASxG,EAAMiJ,SAASzC,MAAM5G,YACnEgC,SAAU,GACVC,OAAQ,GACRE,UAAW,GACXE,aAAc,IAEZjC,GAASA,EAAMiJ,SAASzC,OAASxG,EAAMiJ,SAASzC,MAAM/E,WACxDgT,GAAsBzU,GAASA,EAAMiJ,SAASzC,OAA2C,UAAlCxG,EAAMiJ,SAASzC,MAAM/E,UAAwB,IAAM,IAC5G,GAEC,CAACwI,EAAMF,EAAOwC,GAAeE,KAGhC,MAAMiI,GAAoBC,IACxBzK,EAAQ,GACRF,EAAS2K,EAAQ,EA2FbC,GAAe,SAAC9R,GAAoD,IAA5CqE,EAAW0N,UAAAhR,OAAA,QAAAiR,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAAIL,EAAUK,UAAAhR,OAAA,QAAAiR,IAAAD,UAAA,GAAAA,UAAA,GAAG,QAC3DvG,GAAgB,KAEhBtO,EAAMyH,eACN,IAAIiL,EAAS,GACbA,EAAmB,WAAI8B,EACvB9B,EAAkB,UAAI5P,EAAOrB,UAC7BiR,EAAiB,SAAI5P,EAAOpB,SAC5BgR,EAAoB,YAAI5P,EAAOnB,YAC/B+Q,EAAoB,YAAI5P,EAAOlD,YAC/B8S,EAAiB,SAAIqC,IAAOjS,EAAOlB,UAAUoT,OAAO,cACpDtC,EAAe,OAAIqC,IAAOjS,EAAOjB,QAAQmT,OAAO,cAChDtC,EAAkB,UAAI5P,EAAOhB,UAC7B4Q,EAAmB,WAAI5P,EAAOd,WAC9B0Q,EAAqB,aAAI5P,EAAOb,aAE5Ba,EAAOmI,iBACTC,GAAkBpI,EAAOmI,gBACzByH,EAAuB,eAAI5P,EAAOmI,gBAEhCnI,EAAOyI,sBACTC,GAAuB1I,EAAOyI,qBAC9BmH,EAA4B,oBAAI5P,EAAOyI,qBAErCzI,EAAO+I,aACTC,GAAchJ,EAAO+I,YACrB6G,EAAmB,WAAI5P,EAAO+I,YAE5B/I,EAAO6K,mBACTC,GAAoB9K,EAAO6K,kBAC3B+E,EAAyB,iBAAI5P,EAAO6K,kBAElC7K,EAAO2H,eACTC,GAAgB5H,EAAO2H,cACvBiI,EAAqB,aAAI5P,EAAO2H,cAE9B3H,EAAO+H,eACTC,GAAgBhI,EAAO+H,cACvB6H,EAAqB,aAAI5P,EAAO+H,cAE9B/H,EAAOmJ,iBACTC,GAAkBpJ,EAAOmJ,gBACzByG,EAAuB,eAAI5P,EAAOmJ,gBAEhCnJ,EAAOqJ,sBACTC,GAAuBtJ,EAAOqJ,qBAC9BuG,EAA4B,oBAAI5P,EAAOqJ,qBAErCrJ,EAAO2K,mBACTC,GAAoB5K,EAAO2K,kBAC3BiF,EAAyB,iBAAI5P,EAAO2K,kBAElC3K,EAAOiM,cACTC,GAAelM,EAAOiM,aACtB2D,EAAoB,YAAI5P,EAAOiM,aAK7BjM,EAAOmS,cACTvC,EAA2B,mBAAI5P,EAAOmS,aAEpCnS,EAAOoS,cACTxC,EAAyB,iBAAI5P,EAAOoS,aAElCpS,EAAOqS,WACTzC,EAA2B,mBAAI5P,EAAOqS,UAEpCrS,EAAOsS,WACT1C,EAAyB,iBAAI5P,EAAOsS,UAElCtS,EAAOuS,eACT3C,EAA+B,uBAAI5P,EAAOuS,cAExCvS,EAAOwS,eACT5C,EAA6B,qBAAI5P,EAAOwS,cAEtCxS,EAAOyS,sBACT9F,GAAmB3M,EAAOyS,qBAC1B7C,EAAwB,gBAAI5P,EAAOyS,qBAEjCzS,EAAO8M,eACTC,GAAgB/M,EAAO8M,cACvB8C,EAAiB,SAAI5P,EAAO8M,cAE1B9M,EAAOkN,kBACTC,GAAmBnN,EAAOkN,iBAC1B0C,EAAoB,YAAI5P,EAAOkN,iBAE7BlN,EAAO0S,kBACT9C,EAA6B,qBAAI5P,EAAO2S,4BACxC/C,EAAoB,YAAI5P,EAAO0S,iBAKjC9C,EAAqB,aAAI5P,EAAOX,aAEhCqI,GAAgBkI,GAChB,IAAIgD,EAAK,CACP,UAAa5S,EAAOrB,UAAW,SAAYqB,EAAOpB,SAAU,YAAeoB,EAAOnB,YAAa,YAAemB,EAAOlD,YACrH,SAAYmV,IAAOjS,EAAOlB,UAAUoT,OAAO,cAAe,OAAUD,IAAOjS,EAAOjB,QAAQmT,OAAO,cAAe,UAAalS,EAAOhB,WAEtIoG,aAAayN,QAAQ,cAAerN,KAAKwK,UAAU4C,IAEnC,IAAZrJ,IACF2B,GAAkB,IAClB4H,GAAclD,EAAQvL,IAgBlBnH,EAAMiH,YAAc,EACtB2O,GAAclD,GAeP1S,EAAMiH,aAAe,GAA0B,MAArBjH,EAAMiH,cACvCjH,EAAM2H,cACN8L,IAAKC,KAAK,CACRC,MAAO,WACPC,KAAM,8BACNC,KAAM,QACNC,YAAY,EACZE,mBAAoB,YACnBhB,MAAMkB,QAcf,EA8CM2B,GAAcA,KAClB,GAAI1L,EAAc+H,IAAoBlS,EAAMuH,YAC1C,GAAIgD,IAAgBA,GAAa9I,UAAW,CAC1C,MAAM2S,EAAW,CACf,WAAc,QACd,UAAa7J,GAAa9I,UAC1B,SAAY8I,GAAa3I,SACzB,OAAU2I,GAAa1I,OACvB,SAAY0I,GAAa7I,SACzB,YAAe6I,GAAa5I,YAC5B,YAAe4I,GAAa3K,YAC5B,WAAc,EACd,gBAAmBkW,KAAKC,MAAM/V,EAAMuH,YAAc2K,IAClD,SAAY,GACZ,WAAcrG,GACd,aAAgBhB,GAChB,aAAgBJ,GAChB,eAAkBwB,GAClB,oBAAuBE,GACvB,eAAkBlB,GAClB,oBAAuBM,GACvB,cAAiBgB,GACjB,YAAeE,GACf,UAAalC,GAAazI,UAC1B,iBAAoB6L,GACpB,aAAgBpD,GAAatI,aAC7B,aAAgBwL,GAChB,YAAesB,IAGjBiH,YAAM,CACJpD,OAAQ,OACRC,IAAK,2BACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJ,IAAIgD,EAAgB,GAmBpB,MAAMC,EAAe3L,GAAa3K,YAAY8D,KAAI8B,GAAQA,EAAKzE,gBAKzDoV,GAJQD,EAAa9Q,SAAS,OACtB8Q,EAAa9Q,SAAS,OAGdmF,GAAa9I,UAAUrB,eAqB3C6V,EADoB,WAAlBE,EACclD,EAAIrM,KAAKwP,eACE,WAAlBD,EACOlD,EAAIrM,KAAKyP,eAET,GAIlB,IAAIrE,EAAgB,GACV,IAAIH,KACd,IAAK,IAAIyE,EAAI,EAAGA,EAAIL,EAAcpS,OAAQyS,IAAK,CAC7C,IAAIC,EAAW,CAAC,EACZC,EAAMP,EAAcK,GAExB,IAAK,IAAIG,KAAOD,EAAK,CACPA,EAAIC,GAEF,MADDD,EAAIC,KAEbF,EAASE,GAAOD,EAAIC,GAG1B,CAIAzE,EAAc0E,KAAKH,EACrB,CACAtE,GAAiBD,GAEjB2E,GAAYpM,GAAc,EAAGyH,EAAc,IAI5CoB,OAAMC,IACLH,QAAQC,IAAI,UAAWE,GACvB/I,IAAiB,EAAM,GAE7B,MACEmJ,IAAKC,KAAK,CACRC,MAAO,SACPC,KAAM,wCACNC,KAAM,QACN+C,kBAAmB,YAKvBnD,IAAKC,KAAK,CACRC,MAAO,SACPC,KAAM,iCAAiCkC,KAAKC,MAAM/V,EAAMuH,YAAc2K,sEACtE2B,KAAM,QACN+C,kBAAmB,MAEvB,EAGIC,GAAuBC,IACN9W,EAAM2G,eAAiBmQ,EAAajT,OAAzD,IACIoS,EAAgB,GAChBjE,EAAgB,GAEpBnI,EAAanG,KAAI,CAACqT,EAAMC,KACtBF,EAAapT,KAAI,CAACuT,EAASC,KACrBH,EAAKI,IAAMF,GACbhB,EAAcS,KAAKK,EACrB,GACA,IAGJ,IAAK,IAAIT,EAAI,EAAGA,EAAIL,EAAcpS,OAAQyS,IAAK,CAC7C,IAAIC,EAAW,CAAC,EACZC,EAAMP,EAAcK,GACxB,IAAK,IAAIG,KAAOD,EAAK,CACPA,EAAIC,GAEF,MADDD,EAAIC,KAEbF,EAASE,GAAOD,EAAIC,GAG1B,CACAzE,EAAc0E,KAAKH,EACrB,CACAtE,GAAiBD,GACjB2E,GAAYpM,GAAc,EAAGyH,EAAc,EAIvC2E,GAAcA,CAACpM,EAAc6M,EAAWpF,KAI5C,IAAIqF,EAAoB,GACpBC,EAAa,GACbC,EAAgB,GACpBF,EAAoB/O,KAAKC,MAAMD,KAAKwK,UAAU9S,EAAMkH,gBACpDgM,QAAQC,IAAI,+BAAgCkE,GAG5C,IAAK,IAAIf,EAAI,EAAGA,EAAItE,EAAcnO,OAAQyS,IAAK,CAE7C,IAAIE,EAAMxE,EAAcsE,GACnBe,EAAkBjS,SAASoR,EAAQ,IAKjCtD,QAAQC,IAAI,mCAAoCqD,EAAQ,KAJ7Dc,EAAWZ,KAAKF,EAAQ,IACxBa,EAAkBX,KAAKF,EAAQ,IAC/Be,EAAcb,KAAKF,GAGvB,CAEA,MAAMgB,EAAoBD,EAAcE,QAAO,CAACC,EAAOX,KACrD,MAAMY,EAAShV,GAAsBiV,MAAKjU,GAAWA,EAAQC,QAAUmT,EAAKc,YAC5E,OAAOF,EAASD,EAAQC,EAAOG,gBAAkBJ,CAAK,GACrD,GAEGK,EAAyB/F,EAAcyF,QAAO,CAACC,EAAOX,KAC1D,MAAMiB,EAAQrV,GAAsBiV,MAAKjU,GAAWA,EAAQC,QAAUmT,EAAKc,YAC3E,OAAOG,EAAQN,EAAQM,EAAMF,gBAAkBJ,CAAK,GACnD,GAOH,IAAIO,EAAiBjY,EAAM2G,eAAiB6Q,EACxCU,EAAyBlY,EAAMqH,uBAAyB0Q,EAI5D,MAAMI,EAA0B,GAEhCxV,GAAsByV,SAASzU,IAC7B,MAAM/D,EAAc+D,EAAQC,MACtByU,EAAc1U,EAAQS,MACtB0T,EAAkBnU,EAAQmU,gBAG1BQ,EADctG,EAAczM,QAAOwR,GAAQA,EAAKc,YAAcjY,IACrCiE,OACzB0U,EAAiBD,EAAaR,EAEhCQ,EAAa,GACfH,EAAwBzB,KAAK,CAC3B2B,cACAP,kBACAQ,aACAC,kBAEJ,IAMEN,EAAiB,IACd5P,EAAWO,SAAW,GAAKsP,EAAyB,GAA8B,GAAvB7P,EAAWO,UACzE6K,IAAKC,KAAK,CACRC,MAAO,YACP6E,KAAM,yBAAyBnQ,EAAWO,SAAW,EAAI5I,EAAMqH,uBAAyBrH,EAAM2G,wDAAwD0B,EAAWO,SAAW,EAAIoJ,EAAcnO,OAASyT,EAAWzT,wDACnLwE,EAAWO,SAAW,EAAImP,EAAyBP,oCAAoDnP,EAAWO,SAAW,EAAIsP,EAAyBD,kDACzLpE,KAAM,UACNC,YAAY,EACZC,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,SAClBjB,MAAMkB,IACP,GAAIA,EAAUtQ,MAAO,CAEnB,MAAM6U,EAAW,kFACXC,EAAgB,QAChBC,EAAWpO,EAAa9I,UAAY,IAAM8I,EAAa3K,YAAc,IAAM2K,EAAa3I,SAAW,IAAM2I,EAAa1I,OAKtH+W,EAAK,CAAEC,OAAQ,CAAEjS,KAFZkS,IAAWC,eAAeC,SAASC,eAAe,aAAc,CAAEC,OAAQ,KAElDC,WAAY,CAAC,SAC1CC,EAAcN,IAAWF,EAAI,CAAES,SAAU,OAAQvU,KAAM,UACvD8B,EAAO,IAAI0S,KAAK,CAACF,GAAc,CAAEtU,KAAM2T,IAC7Cc,SAAiB3S,EAAM+R,EAAWD,GAClCpO,IAAiB,GAGjB,IAAIkP,EAAiB,CACnB,SAAYnN,GACZ,aAAgB/D,KAAKwK,UAAUqF,GAC/B,kBAAqB9P,EAAWO,SAAW,EAAIoJ,EAAcnO,OAASyT,EAAWzT,OACjF,cAAiBwE,EAAWO,SAAW,EAAI5I,EAAMqH,uBAAyBrH,EAAM2G,eAChF,gBAAmB0B,EAAWO,SAAW,EAAIsP,EAAyBD,GAExEwB,GAAgBD,GAGhBnR,EAAWO,SAAW,EACpB5I,EAAM+H,qBAAqB,CAAEV,uBAAwB6Q,IACrDlY,EAAM6H,wBAAwB,CAC5BlB,eAAgBsR,EAChBpR,eAAgB7G,EAAM6G,eACtBC,iBAAkB9G,EAAM8G,iBACxBE,aAAchH,EAAMgH,aACpBD,eAAgB/G,EAAM+G,eACtBE,YAAajH,EAAMiH,cAGnBqQ,EAAWzT,OAAS,GACtB7D,EAAM8H,yBACJ,CACEZ,cAAemQ,IAIrB5E,GAAmB,CAAE,cAAiBwF,IAClC5P,EAAWO,SAAW,IA3uBhB8J,EA4uBG,CAAE,cAAiBwF,GA1uBxCvF,YAAU,CACRC,OAAQ,MACRC,IAAK,wBAAwB5K,IAC7BrB,KAAM0B,KAAKwK,UAAUJ,GACrBK,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJC,QAAQC,IAAI,OAAQF,EAAIrM,KAAK,IAE9BwM,OAAMC,IACLH,QAAQC,IAAI,MAAOE,EACsC,KAKhCgE,KAETrX,EAAMkH,cAE1B,MAAMwL,EAAS,CACb,OAAUlK,EACV,kBAAqB6O,GAGvBhD,YAAS,CACPzB,OAAQ,OACRC,IAAK,+CACLjM,KAAM0B,KAAKwK,UAAUJ,GACrBK,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJC,QAAQC,IAAI,OAAQF,EAAIrM,KAAK,IAE9BwM,OAAMC,IACLH,QAAQC,IAAI,MAAOE,EACsC,GACzD,EAmsBIqG,CAAsBrC,GACtBsC,GAAetN,GAAU2F,EAAcnO,OACzC,CAhvBY6O,KAgvBZ,IAeJe,IAAKC,KAAK,CACRC,MAAO,YACPC,KAAM,gCACNC,KAAM,QACNC,YAAY,EACZE,mBAAoB,YACnBhB,MAAMkB,OACX,EAKIuF,GAAmB/G,IAEvBC,YAAU,CACRC,OAAQ,MACRC,IAAK,oBACLjM,KAAM0B,KAAKwK,UAAUJ,GACrBK,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJC,QAAQC,IAAI,uBAAwBF,EAAIrM,KAAK,IAE9CwM,OAAMC,IACLH,QAAQC,IAAI,MAAOE,EACsC,GACzD,EAGAuC,GAAgB,SAAClD,GACrBQ,QAAQC,IAAI,qBAAsBT,GAClCtQ,EAAYqH,GACZa,IAAiB,GACjBgD,IAAqB,GAKE,KAAvBoF,EAAkB,WAAYA,EAAkB,UAAgBP,GAAoB,GAEpF,IAAIyH,EAAmB,GAEvB,MAAMxF,EAAW,CACf,WAAc1B,EAAO8B,WACrB,UAAa9B,EAAOjR,UACpB,SAAYiR,EAAO9Q,SACnB,OAAU8Q,EAAO7Q,OACjB,SAAY6Q,EAAOhR,SACnB,YAAegR,EAAO/Q,YACtB,YAAe+Q,EAAO9S,YAEtB,WAAc,EACd,gBAAmBmK,EACnB,WAAc2I,EAAO7G,WACrB,aAAgB6G,EAAO7H,aACvB,aAAgB6H,EAAOjI,aACvB,eAAkBiI,EAAOzG,eACzB,oBAAuByG,EAAOvG,oBAC9B,eAAkBuG,EAAOzH,eACzB,oBAAuByH,EAAOnH,oBAC9B,cAAiBgB,GACjB,YAAeE,GACf,iBAAoBiG,EAAO/E,iBAC3B,UAAa+E,EAAO5Q,UACpB,aAAgB4Q,EAAOzQ,aACvB,aAAgByQ,EAAOjF,iBACvB,YAAeiF,EAAO3D,YACtB,mBAAsB2D,EAAOmH,mBAC7B,iBAAoBnH,EAAOoH,iBAC3B,gBAAmBpH,EAAOlD,gBAC1B,mBAAsBkD,EAAOqH,mBAC7B,iBAAoBrH,EAAOsH,iBAC3B,uBAA0BtH,EAAOuH,uBACjC,qBAAwBvH,EAAOwH,qBAC/B,SAAYxH,EAAOyH,SACnB,YAAezH,EAAO0H,YACtB,YAAe1H,EAAO2H,YACtB,qBAAwB3H,EAAO4H,sBAGjCpH,QAAQC,IAAI,6BAA8B/J,GACtCsJ,EAAOpD,iBACT8E,EAAmB,SAAI1B,EAAOpD,iBAE5BtG,QAA8B8L,GAAhB1L,GAA6C,IAAhBA,GACxCsJ,EAAOvQ,eACViS,EAAmB,SAAIpL,GAI3BgN,YAAM,CACJpD,OAAQ,OACRC,IAAK,2BACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKuH,UACJva,EAAMgI,eAAeoM,GAmBrB,MAAM8B,EAAexD,EAAO9S,YAAY8D,KAAI8B,GAAQA,EAAKzE,gBAKnDoV,GAJQD,EAAa9Q,SAAS,OACtB8Q,EAAa9Q,SAAS,OAGdsN,EAAOjR,UAAUrB,eA4BvC,GAREwZ,EADoB,WAAlBzD,EACiBlD,EAAIrM,KAAKwP,eACD,WAAlBD,EACUlD,EAAIrM,KAAKyP,eAET,GAIjBuD,GAAoBA,EAAiB/V,OAAS,EAAG,CAEnDiG,EAAgB8P,GAChBpL,IAAkB,GAClBgM,GAAc9H,EAAQO,EAAIrM,KAAKyF,UAE/B,IAAI0B,EAAiB,GACjB0M,EAAana,OAAOoa,KAAKd,EAAiB,IAC9C,IAAK,IAAIe,KAAKF,EAE8B,MAAtCb,EAAiB,GAAGa,EAAWE,KACjC5M,EAAe2I,KAAK+D,EAAWE,IAGnC3M,GAAkBD,GAElBzB,GAAY2G,EAAIrM,KAAKyF,UACI,GAArBqG,EAAO1Q,YAAuC,IAAjBuK,KAC/BvM,EAAM6H,wBAAwB,CAC5BlB,eAAgB3G,EAAM2G,eACtBE,eAAgB7G,EAAM6G,eACtBC,iBAAkB9G,EAAM8G,iBACxBC,eAAgB/G,EAAM+G,eACtBC,aAAchH,EAAMgH,aACpBC,YAAajH,EAAMiH,YAAc,IAEnCwL,GAAmB,CAAE,YAAezS,EAAMiH,YAAc,KAK1D+O,YAAM,CACJpD,OAAQ,OACRC,IAAK,qCACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAK4H,IACJ,IACIC,EADWD,EAAWhU,KACCkU,iBAAiBpX,KAAIqX,IAAA,IAAC,UAAElD,EAAS,UAAEmD,EAAS,eAAEC,GAAgBF,EAAA,MAAM,CAC7F3W,MAAO,GAAG4W,MAAcC,KACxBrX,MAAOiU,EACR,IAEDxF,GAAqBwI,EAAY,IAMrCK,GAAgBxI,GAChByI,GAAgBzI,GAChB0I,GAAkB1I,GAClB2I,GAAuB3I,GACvB4I,GAAc5I,GACd6I,GAAkB7I,GAClB8I,GAAsB9I,GACtB+I,GAAoB/I,GACpBgJ,GAAoBhJ,GACpBiJ,GAAejJ,GACfpI,IAAiB,SAwjDzBiQ,eAA0CqB,GACxC,IAEE,IAAIC,EAA6B,UADXD,EAAYna,UAAUrB,cACA,iBAAmB,iBAC/Dwb,EAAwB,WAAIC,EAG5B7F,YAAM,CACJpD,OAAQ,OACRC,IAAK,6CACLjM,KAAM0B,KAAKwK,UAAU8I,GACrB7I,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IAEJ,IACI6I,EADc7I,EAAIrM,KAAKmV,yBACQrY,KAAIsY,IAAA,IAAC,YAAEC,EAAW,cAAEC,GAAeF,EAAA,MAAM,CAC1E5X,MAAO,GAAG6X,MAAgBC,KAC1BtY,MAAOqY,EACR,IAEDtM,GAA2BmM,EAAiB,GAElD,CAAE,MAAOK,GACPjJ,QAAQC,IAAIgJ,GACZxM,GAA2B,GAC7B,CACF,CAllDcyM,CAA2BhI,SAolDzCmG,eAAuCqB,GACrC,IACEA,EAAwB,WAAI,WAG5B5F,YAAM,CACJpD,OAAQ,OACRC,IAAK,6CACLjM,KAAM0B,KAAKwK,UAAU8I,GACrB7I,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IAEJ,IAAIoJ,EAAcpJ,EAAIrM,KAAKmV,yBAC3B,GAAIM,GAAeA,EAAYxY,OAAS,EAAG,CACzC,IAAIiY,EAAmBO,EAAY3Y,KAAI4Y,IAAA,IAAC,YAAEL,EAAW,cAAEC,GAAeI,EAAA,MAAM,CAC1ElY,MAAO,GAAG6X,MAAgBC,KAC1BtY,MAAOqY,EACR,IAEDlM,GAAoB+L,EACtB,MACE/L,GAAoB,GACtB,GAEN,CAAE,MAAOoM,GACPjJ,QAAQC,IAAIgJ,GACZpM,GAAoB,GACtB,CACF,CAjnDcwM,CAAwBnI,SAmnDtCmG,eAA0CqB,GACxC,IACEA,EAAwB,WAAI,oBAG5B5F,YAAM,CACJpD,OAAQ,OACRC,IAAK,6CACLjM,KAAM0B,KAAKwK,UAAU8I,GACrB7I,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IAEJ,IACI6I,EADc7I,EAAIrM,KAAKmV,yBACQrY,KAAI8Y,IAAA,IAAC,YAAEP,EAAW,cAAEC,GAAeM,EAAA,MAAM,CAC1EpY,MAAO,GAAG6X,MAAgBC,KAC1BtY,MAAOqY,EACR,IAED9L,GAAuB2L,EAAiB,GAE9C,CAAE,MAAOK,GACPjJ,QAAQC,IAAIgJ,GACZhM,GAAuB,GACzB,CACF,CA5oDcsM,CAA2BrI,EACnC,MAEEtK,EAAgB,IAChBQ,IAAiB,GACjBF,EAAe,GACf4D,GAAkB,IAClBQ,IAAkB,GAEpBxO,EAAM2H,aAAa,IAEpByL,OAAMC,IACLH,QAAQC,IAAI,MAAOE,GACnB/G,GAAY,IACZxC,EAAgB,IAChBQ,IAAiB,GACjB0D,GAAkB,IAClBhO,EAAM2H,aAAa,GAEzB,EAEM4M,GAA2B7B,IAE/BtQ,EAAYqH,GACZa,IAAiB,GACjBgD,IAAqB,GACrB,IAAIsM,EAAmB,GAEvB,MAAMxF,EAAW,CACf,WAAc,QACd,UAAa1B,EAAOjR,UACpB,SAAYiR,EAAO9Q,SACnB,OAAU8Q,EAAO7Q,OACjB,SAAY6Q,EAAOhR,SACnB,YAAegR,EAAO/Q,YACtB,YAAe+Q,EAAO9S,YACtB,WAAcqK,EAAO,EACrB,gBAAmBF,EACnB,SAAYsC,GACZ,WAAcqG,EAAO7G,WACrB,aAAgB6G,EAAO7H,aACvB,aAAgB6H,EAAOjI,aACvB,eAAkBiI,EAAOzG,eACzB,oBAAuByG,EAAOvG,oBAC9B,eAAkBuG,EAAOzH,eACzB,oBAAuByH,EAAOnH,oBAC9B,cAAiBgB,GACjB,YAAeE,GACf,iBAAoBiG,EAAO/E,iBAC3B,UAAa+E,EAAO5Q,UACpB,aAAgB4Q,EAAOzQ,aACvB,aAAgByQ,EAAOjF,iBACvB,YAAeiF,EAAO3D,YACtB,mBAAsB2D,EAAOmH,mBAC7B,iBAAoBnH,EAAOoH,iBAC3B,gBAAmBpH,EAAOlD,gBAC1B,mBAAsBkD,EAAOqH,mBAC7B,iBAAoBrH,EAAOsH,iBAC3B,uBAA0BtH,EAAOuH,uBACjC,qBAAwBvH,EAAOwH,qBAC/B,SAAYxH,EAAOyH,SACnB,YAAezH,EAAO0H,YACtB,YAAe1H,EAAO2H,YACtB,qBAAwB3H,EAAO4H,sBAIjCtE,YAAM,CACJpD,OAAQ,OACRC,IAAK,2BACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IAmBJ,MAAMiD,EAAexD,EAAO9S,YAAY8D,KAAI8B,GAAQA,EAAKzE,gBAKnDoV,GAJQD,EAAa9Q,SAAS,OACtB8Q,EAAa9Q,SAAS,OAGdsN,EAAOjR,UAAUrB,eA6BvC,GAREwZ,EADoB,WAAlBzD,EACiBlD,EAAIrM,KAAKwP,eACD,WAAlBD,EACUlD,EAAIrM,KAAKyP,eAET,GAIjBuD,GAAoBA,EAAiB/V,OAAS,EAAG,CAEnDiG,EAAgB8P,GAChBpL,IAAkB,GAClBgM,GAAc9H,EAAQO,EAAIrM,KAAKyF,UAC/B,IAAI0B,EAAiB,GACjB0M,EAAana,OAAOoa,KAAKd,EAAiB,IAC9C,IAAK,IAAIe,KAAKF,EAC8B,MAAtCb,EAAiB,GAAGa,EAAWE,KACjC5M,EAAe2I,KAAK+D,EAAWE,IAGnC3M,GAAkBD,GAClBzB,GAAY2G,EAAIrM,KAAKyF,UAYrB/B,IAAiB,EACnB,MAEER,EAAgB,IAChBQ,IAAiB,GACjBF,EAAe,GACf4D,GAAkB,IAClBQ,IAAkB,GAEpBxO,EAAM2H,aAAa,IAEpByL,OAAMC,IACLH,QAAQC,IAAI,MAAOE,GACnB/G,GAAY,IACZxC,EAAgB,IAChBQ,IAAiB,GACjB0D,GAAkB,IAClBhO,EAAM2H,aAAa,GACnB,EAIA6S,GAAgBA,CAAC9H,EAAQgK,KAE7BpP,IAAqB,GACrB,MAAM8G,EAAW,CACf,WAAc,QACd,UAAa1B,EAAOjR,UACpB,SAAYiR,EAAO9Q,SACnB,OAAU8Q,EAAO7Q,OACjB,SAAY6Q,EAAOhR,SACnB,YAAegR,EAAO/Q,YACtB,YAAe+Q,EAAO9S,YACtB,WAAcqK,EAAO,EACrB,gBAAmBF,EACnB,SAAY2S,EACZ,WAAchK,EAAO7G,WACrB,aAAgB6G,EAAO7H,aACvB,aAAgB6H,EAAOjI,aACvB,eAAkBiI,EAAOzG,eACzB,oBAAuByG,EAAOvG,oBAC9B,eAAkBuG,EAAOzH,eACzB,oBAAuByH,EAAOnH,oBAC9B,iBAAoBmH,EAAO/E,iBAC3B,UAAa+E,EAAO5Q,UACpB,aAAgB4Q,EAAOzQ,aACvB,aAAgByQ,EAAOjF,iBACvB,YAAeiF,EAAO3D,YACtB,mBAAsB2D,EAAOmH,mBAC7B,iBAAoBnH,EAAOoH,iBAC3B,gBAAmBpH,EAAOlD,gBAC1B,mBAAsBkD,EAAOqH,mBAC7B,iBAAoBrH,EAAOsH,iBAC3B,uBAA0BtH,EAAOuH,uBACjC,qBAAwBvH,EAAOwH,qBAC/B,SAAYxH,EAAOyH,SACnB,YAAezH,EAAO0H,YACtB,YAAe1H,EAAO2H,YACtB,qBAAwB3H,EAAO4H,sBAEjCpH,QAAQC,IAAI,yBACZ6C,YAAM,CACJpD,OAAQ,OACRC,IAAK,iCACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJ7I,EAAe6I,EAAIrM,MACnB+V,GAAkB1J,EAAIrM,KAAM8V,GAC5BE,WAAWtP,IAAqB,GAAQ,IAAK,IAG9C8F,OAAMC,IACLH,QAAQC,IAAI,MAAOE,GACnBjJ,EAAe,GACfoE,IAAkB,EAAK,GACvB,EAGAmO,GAAoBA,CAACE,EAAcH,KAEvC,MAAMtI,EAAW,CACf,aAAgByI,GAElB7G,YAAM,CACJpD,OAAQ,MACRC,IAAK,wCAAwC6J,IAC7C9V,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJC,QAAQC,IAAI,MAAOF,EAAIrM,KAAK,IAE7BwM,OAAMC,IACLH,QAAQC,IAAI,MAAOE,GACnBjJ,EAAe,EAAE,GACjB,EAGAuP,GAAiBA,CAAC+C,EAAUI,KAEhC9G,YAAM,CACJpD,OAAQ,MACRC,IAAK,8CAA8C6J,uBAA8BI,IACjF/J,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJC,QAAQC,IAAI,MAAOF,EAAIrM,KAAK,IAE7BwM,OAAMC,IACLH,QAAQC,IAAI,MAAOE,EAAI,GACvB,EAsBA6H,GAAmBxI,IACvBxF,IAAkB,GAClB,MAAMkH,EAAW,CACf,WAAc,QACd,UAAa1B,EAAOjR,UACpB,SAAYiR,EAAO9Q,SACnB,OAAU8Q,EAAO7Q,OACjB,SAAY6Q,EAAOhR,SACnB,YAAegR,EAAO/Q,YACtB,YAAe+Q,EAAO9S,YACtB,WAAcqK,EAAO,EACrB,gBAAmBF,EACnB,UAAa2I,EAAO5Q,UACpB,eAAkB4Q,EAAOzH,eACzB,oBAAuByH,EAAOnH,oBAC9B,WAAcmH,EAAO7G,WACrB,iBAAoB6G,EAAO/E,iBAC3B,aAAgB+E,EAAO7H,aACvB,aAAgB6H,EAAOjI,aACvB,eAAkBiI,EAAOzG,eACzB,oBAAuByG,EAAOvG,oBAC9B,SAAYE,GACZ,aAAgBqG,EAAOzQ,aACvB,aAAgByQ,EAAOjF,iBACvB,YAAeiF,EAAO3D,YACtB,mBAAsB2D,EAAOmH,mBAC7B,iBAAoBnH,EAAOoH,iBAC3B,gBAAmBpH,EAAOlD,gBAC1B,mBAAsBkD,EAAOqH,mBAC7B,iBAAoBrH,EAAOsH,iBAC3B,uBAA0BtH,EAAOuH,uBACjC,qBAAwBvH,EAAOwH,qBAC/B,SAAYxH,EAAOyH,SACnB,YAAezH,EAAO0H,YACtB,YAAe1H,EAAO2H,YACtB,qBAAwB3H,EAAO4H,sBAEjCtE,YAAM,CACJpD,OAAQ,OACRC,IAAK,mCACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJ,IAAI8J,EAAa,GACb9J,EAAIrM,KAAKoW,eACX/J,EAAIrM,KAAKoW,cAAc5E,SAASrB,IAC9B,IAAIkG,EAAe,CAAE,MAASlG,EAAKmG,cAAe,MAASnG,EAAKmG,cAAgB,KAAOnG,EAAKkE,eAAiB,KAC7G8B,EAAWrG,KAAKuG,EAAa,IAGjCrS,GAAoBmS,GACpB7P,IAAkB,EAAM,IAEzBkG,OAAMC,IACLH,QAAQC,IAAI,OACZvI,GAAoB,IACpBsC,IAAkB,EAAM,GACxB,EAGAiO,GAAmBzI,IACvBtF,IAAkB,GAClB,MAAMgH,EAAW,CACf,WAAc,QACd,UAAa1B,EAAOjR,UACpB,SAAYiR,EAAO9Q,SACnB,OAAU8Q,EAAO7Q,OACjB,SAAY6Q,EAAOhR,SACnB,YAAegR,EAAO/Q,YACtB,YAAe+Q,EAAO9S,YACtB,WAAcqK,EAAO,EACrB,gBAAmBF,EACnB,UAAa2I,EAAO5Q,UACpB,eAAkB4Q,EAAOzH,eACzB,oBAAuByH,EAAOnH,oBAC9B,WAAcmH,EAAO7G,WACrB,iBAAoB6G,EAAO/E,iBAC3B,aAAgB+E,EAAO7H,aACvB,aAAgB6H,EAAOjI,aACvB,eAAkBiI,EAAOzG,eACzB,oBAAuByG,EAAOvG,oBAC9B,SAAYE,GACZ,aAAgBqG,EAAOzQ,aACvB,aAAgByQ,EAAOjF,iBACvB,YAAeiF,EAAO3D,YACtB,mBAAsB2D,EAAOmH,mBAC7B,iBAAoBnH,EAAOoH,iBAC3B,gBAAmBpH,EAAOlD,gBAC1B,mBAAsBkD,EAAOqH,mBAC7B,iBAAoBrH,EAAOsH,iBAC3B,uBAA0BtH,EAAOuH,uBACjC,qBAAwBvH,EAAOwH,qBAC/B,SAAYxH,EAAOyH,SACnB,YAAezH,EAAO0H,YACtB,YAAe1H,EAAO2H,YACtB,qBAAwB3H,EAAO4H,sBAEjCtE,YAAM,CACJpD,OAAQ,OACRC,IAAK,mCACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJ,IAAIkK,EAAa,GACblK,EAAIrM,KAAKwW,eACXnK,EAAIrM,KAAKwW,cAAchF,SAASrB,IAC9B,IAAIkG,EAAe,CAAE,MAASlG,EAAKsG,cAAe,MAAStG,EAAKsG,cAAgB,KAAOtG,EAAKkE,eAAiB,KAC7GkC,EAAWzG,KAAKuG,EAAa,IAGjCjS,GAAoBmS,GACpB/P,IAAkB,EAAM,IAEzBgG,OAAMC,IACLH,QAAQC,IAAI,MAAOE,GACnBrI,GAAoB,IACpBoC,IAAkB,EAAM,GACxB,EAGAgO,GAAqB1I,IACzB,MAAM0B,EAAW,CACf,WAAc,QACd,UAAa1B,EAAOjR,UACpB,SAAYiR,EAAO9Q,SACnB,OAAU8Q,EAAO7Q,OACjB,SAAY6Q,EAAOhR,SACnB,YAAegR,EAAO/Q,YACtB,YAAe+Q,EAAO9S,YACtB,WAAcqK,EAAO,EACrB,gBAAmBF,EACnB,UAAa2I,EAAO5Q,UACpB,eAAkB4Q,EAAOzH,eACzB,oBAAuByH,EAAOnH,oBAC9B,WAAcmH,EAAO7G,WACrB,iBAAoB6G,EAAO/E,iBAC3B,aAAgB+E,EAAO7H,aACvB,aAAgB6H,EAAOjI,aACvB,eAAkBiI,EAAOzG,eACzB,oBAAuByG,EAAOvG,oBAC9B,SAAYE,GACZ,aAAgBqG,EAAOzQ,aACvB,aAAgByQ,EAAOjF,iBACvB,YAAeiF,EAAO3D,YACtB,mBAAsB2D,EAAOmH,mBAC7B,iBAAoBnH,EAAOoH,iBAC3B,gBAAmBpH,EAAOlD,gBAC1B,mBAAsBkD,EAAOqH,mBAC7B,iBAAoBrH,EAAOsH,iBAC3B,uBAA0BtH,EAAOuH,uBACjC,qBAAwBvH,EAAOwH,qBAC/B,SAAYxH,EAAOyH,SACnB,YAAezH,EAAO0H,YACtB,YAAe1H,EAAO2H,YACtB,qBAAwB3H,EAAO4H,sBAIjCtE,YAAM,CACJpD,OAAQ,OACRC,IAAK,qCACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJ,IAAIqK,EAAY,GACZrK,EAAIrM,KAAK0W,WACXrK,EAAIrM,KAAK0W,UAAUlF,SAASrB,IAC1B,IAAIkG,EAAe,CAAE,MAASlG,EAAKwG,UAAW,MAASxG,EAAKwG,UAAY,KAAOxG,EAAKkE,eAAiB,KACrGqC,EAAU5G,KAAKuG,EAAa,IAGhC7R,GAAsBkS,EAAU,IAEjClK,OAAMC,IACLH,QAAQC,IAAI,MAAOE,GACnBjI,GAAsB,GAAG,GACzB,EAGAiQ,GAA0B3I,IAC9B5F,IAAkB,GAClB,MAAMsH,EAAW,CACf,WAAc,QACd,UAAa1B,EAAOjR,UACpB,SAAYiR,EAAO9Q,SACnB,OAAU8Q,EAAO7Q,OACjB,SAAY6Q,EAAOhR,SACnB,YAAegR,EAAO/Q,YACtB,YAAe+Q,EAAO9S,YACtB,WAAcqK,EAAO,EACrB,gBAAmBF,EACnB,UAAa2I,EAAO5Q,UACpB,eAAkB4Q,EAAOzH,eACzB,oBAAuByH,EAAOnH,oBAC9B,WAAcmH,EAAO7G,WACrB,iBAAoB6G,EAAO/E,iBAC3B,aAAgB+E,EAAO7H,aACvB,aAAgB6H,EAAOjI,aACvB,eAAkBiI,EAAOzG,eACzB,oBAAuByG,EAAOvG,oBAC9B,SAAYE,GACZ,aAAgBqG,EAAOzQ,aACvB,aAAgByQ,EAAOjF,iBACvB,YAAeiF,EAAO3D,YACtB,mBAAsB2D,EAAOmH,mBAC7B,iBAAoBnH,EAAOoH,iBAC3B,gBAAmBpH,EAAOlD,gBAC1B,mBAAsBkD,EAAOqH,mBAC7B,iBAAoBrH,EAAOsH,iBAC3B,uBAA0BtH,EAAOuH,uBACjC,qBAAwBvH,EAAOwH,qBAC/B,SAAYxH,EAAOyH,SACnB,YAAezH,EAAO0H,YACtB,YAAe1H,EAAO2H,YACtB,qBAAwB3H,EAAO4H,sBAEjCtE,YAAM,CACJpD,OAAQ,OACRC,IAAK,sCACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJ,IAAIqK,EAAY,GACZrK,EAAIrM,KAAK0W,WACXrK,EAAIrM,KAAK0W,UAAUlF,SAASrB,IAC1B,IAAIkG,EAAe,CAAE,MAASlG,EAAKwG,UAAW,MAASxG,EAAKwG,UAAY,IAAMxG,EAAKkE,eAAiB,KACpGqC,EAAU5G,KAAKuG,EAAa,IAGhC3R,GAA2BgS,GAC3BxQ,IAAkB,EAAM,IAEzBsG,OAAMC,IACLH,QAAQC,IAAI,MAAOE,GACnB/H,GAA2B,IAC3BwB,IAAkB,EAAM,GACxB,EAGAwO,GAAiB5I,IACrB9F,IAAgB,GAChB,MAAMwH,EAAW,CACf,WAAc,QACd,UAAa1B,EAAOjR,UACpB,SAAYsT,IAAOrC,EAAO9Q,UAAUoT,OAAO,cAC3C,OAAUD,IAAOrC,EAAO7Q,QAAQmT,OAAO,cACvC,SAAYtC,EAAOhR,SAAWgR,EAAOhR,SAAW,UAChD,YAAegR,EAAO/Q,YAAc+Q,EAAO/Q,YAAc,CAAC,KAC1D,YAAe+Q,EAAO9S,YACtB,WAAcqK,EAAO,EACrB,gBAAmBF,EACnB,UAAa2I,EAAO5Q,UAAY4Q,EAAO5Q,UAAY,IACnD,eAAkB4Q,EAAOzH,eACzB,oBAAuByH,EAAOnH,oBAC9B,WAAcmH,EAAO7G,WACrB,iBAAoB6G,EAAO/E,iBAC3B,aAAgB+E,EAAO7H,aACvB,aAAgB6H,EAAOjI,aACvB,eAAkBiI,EAAOzG,eACzB,oBAAuByG,EAAOvG,oBAC9B,SAAYE,GACZ,aAAgBqG,EAAOzQ,aACvB,aAAgByQ,EAAOjF,iBACvB,YAAeiF,EAAO3D,YACtB,mBAAsB2D,EAAOmH,mBAC7B,iBAAoBnH,EAAOoH,iBAC3B,gBAAmBpH,EAAOlD,gBAC1B,mBAAsBkD,EAAOqH,mBAC7B,iBAAoBrH,EAAOsH,iBAC3B,uBAA0BtH,EAAOuH,uBACjC,qBAAwBvH,EAAOwH,qBAC/B,SAAYxH,EAAOyH,SACnB,YAAezH,EAAO0H,YACtB,YAAe1H,EAAO2H,YACtB,qBAAwB3H,EAAO4H,sBAEjCtE,YAAM,CACJpD,OAAQ,OACRC,IAAK,iCACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJ,IAAIuK,EAAS,GACTvK,EAAIrM,KAAK6W,aACXxK,EAAIrM,KAAK6W,YAAYrF,SAASrB,IAC5B,IAAIkG,EAAe,CAAE,MAASlG,EAAK2G,OAAQ,MAAS3G,EAAK2G,OAAS,KAAO3G,EAAKkE,eAAiB,KAC/FuC,EAAO9G,KAAKuG,EAAa,IAG7BjR,GAAkBwR,GAClB5Q,IAAgB,EAAM,IAEvBwG,OAAMC,IACLH,QAAQC,IAAI,MAAOE,GACnBrH,GAAkB,IAClBY,IAAgB,EAAM,GACtB,EAGA6O,GAAuB/I,IAC3B9F,IAAgB,GAChB,MAAMwH,EAAW,CACf,WAAc,QACd,UAAa1B,EAAOjR,UACpB,SAAYiR,EAAO9Q,SACnB,OAAU8Q,EAAO7Q,OACjB,SAAY6Q,EAAOhR,SACnB,YAAegR,EAAO/Q,YACtB,YAAe+Q,EAAO9S,YACtB,WAAcqK,EAAO,EACrB,gBAAmBF,EACnB,UAAa2I,EAAO5Q,UACpB,eAAkB4Q,EAAOzH,eACzB,oBAAuByH,EAAOnH,oBAC9B,WAAcmH,EAAO7G,WACrB,iBAAoB6G,EAAO/E,iBAC3B,aAAgB+E,EAAO7H,aACvB,aAAgB6H,EAAOjI,aACvB,eAAkBiI,EAAOzG,eACzB,oBAAuByG,EAAOvG,oBAC9B,SAAYE,GACZ,aAAgBqG,EAAOzQ,aACvB,aAAgByQ,EAAOjF,iBACvB,YAAeiF,EAAO3D,YACtB,mBAAsB2D,EAAOmH,mBAC7B,iBAAoBnH,EAAOoH,iBAC3B,gBAAmBpH,EAAOlD,gBAC1B,mBAAsBkD,EAAOqH,mBAC7B,iBAAoBrH,EAAOsH,iBAC3B,uBAA0BtH,EAAOuH,uBACjC,qBAAwBvH,EAAOwH,qBAC/B,SAAYxH,EAAOyH,SACnB,YAAezH,EAAO0H,YACtB,YAAe1H,EAAO2H,YACtB,qBAAwB3H,EAAO4H,sBAEjCtE,YAAM,CACJpD,OAAQ,OACRC,IAAK,uCACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJ,IAAIuK,EAAS,GACTvK,EAAIrM,KAAK6W,aACXxK,EAAIrM,KAAK6W,YAAYrF,SAASrB,IAC5B,IAAIkG,EAAe,CAAE,MAASlG,EAAK2G,OAAQ,MAAS3G,EAAK2G,OAAS,KAAO3G,EAAKkE,eAAiB,KAC/FuC,EAAO9G,KAAKuG,EAAa,IAG7BnP,GAAwB0P,GACxB5Q,IAAgB,EAAM,IAEvBwG,OAAMC,IACLH,QAAQC,IAAI,MAAOE,GACnBvF,GAAwB,IACxBlB,IAAgB,EAAM,GACtB,EAIA4O,GAAyB9I,IAC7B1F,IAAY,GACZ,MAAMoH,EAAW,CACf,WAAc,QACd,UAAa1B,EAAOjR,UACpB,SAAYiR,EAAO9Q,SACnB,OAAU8Q,EAAO7Q,OACjB,SAAY6Q,EAAOhR,SACnB,YAAegR,EAAO/Q,YACtB,YAAe+Q,EAAO9S,YACtB,WAAcqK,EAAO,EACrB,gBAAmBF,EACnB,UAAa2I,EAAO5Q,UACpB,eAAkB4Q,EAAOzH,eACzB,oBAAuByH,EAAOnH,oBAC9B,WAAcmH,EAAO7G,WACrB,iBAAoB6G,EAAO/E,iBAC3B,aAAgB+E,EAAO7H,aACvB,aAAgB6H,EAAOjI,aACvB,eAAkBiI,EAAOzG,eACzB,oBAAuByG,EAAOvG,oBAC9B,SAAYE,GACZ,aAAgBqG,EAAOzQ,aACvB,aAAgByQ,EAAOjF,iBACvB,YAAeiF,EAAO3D,YACtB,mBAAsB2D,EAAOmH,mBAC7B,iBAAoBnH,EAAOoH,iBAC3B,gBAAmBpH,EAAOlD,gBAC1B,mBAAsBkD,EAAOqH,mBAC7B,iBAAoBrH,EAAOsH,iBAC3B,uBAA0BtH,EAAOuH,uBACjC,qBAAwBvH,EAAOwH,qBAC/B,SAAYxH,EAAOyH,SACnB,YAAezH,EAAO0H,YACtB,YAAe1H,EAAO2H,YACtB,qBAAwB3H,EAAO4H,sBAEjCtE,YAAM,CACJpD,OAAQ,OACRC,IAAK,0CACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJ,IAAI0K,EAAS,GACT1K,EAAIrM,KAAKgX,eACX3K,EAAIrM,KAAKgX,cAAcxF,SAASrB,IAC9B,IAAIkG,EAAe,CAAE,MAASlG,EAAK8G,aAAc,MAAS9G,EAAK8G,aAAe,KAAO9G,EAAKkE,eAAiB,KAC3G0C,EAAOjH,KAAKuG,EAAa,IAG7BvR,GAAqBiS,GACrBf,WAAW5P,IAAY,GAAQ,IAAK,IAGrCoG,OAAMC,IACLH,QAAQC,IAAI,OACZzH,GAAqB,IACrBsB,IAAY,EAAM,GAClB,EAGAuO,GAAqB7I,IACzB,MAAM0B,EAAW,CACf,WAAc,QACd,UAAa1B,EAAOjR,UACpB,SAAYiR,EAAO9Q,SACnB,OAAU8Q,EAAO7Q,OACjB,SAAY6Q,EAAOhR,SACnB,YAAegR,EAAO/Q,YACtB,YAAe+Q,EAAO9S,YACtB,WAAcqK,EAAO,EACrB,gBAAmBF,EACnB,UAAa2I,EAAO5Q,UACpB,eAAkB4Q,EAAOzH,eACzB,oBAAuByH,EAAOnH,oBAC9B,WAAcmH,EAAO7G,WACrB,iBAAoB6G,EAAO/E,iBAC3B,aAAgB+E,EAAO7H,aACvB,aAAgB6H,EAAOjI,aACvB,eAAkBiI,EAAOzG,eACzB,oBAAuByG,EAAOvG,oBAC9B,SAAYE,GACZ,aAAgBqG,EAAOzQ,aACvB,aAAgByQ,EAAOjF,iBACvB,YAAeiF,EAAO3D,YACtB,mBAAsB2D,EAAOmH,mBAC7B,iBAAoBnH,EAAOoH,iBAC3B,gBAAmBpH,EAAOlD,gBAC1B,mBAAsBkD,EAAOqH,mBAC7B,iBAAoBrH,EAAOsH,iBAC3B,uBAA0BtH,EAAOuH,uBACjC,qBAAwBvH,EAAOwH,qBAC/B,SAAYxH,EAAOyH,SACnB,YAAezH,EAAO0H,YACtB,YAAe1H,EAAO2H,YACtB,qBAAwB3H,EAAO4H,sBAEjCtE,YAAM,CACJpD,OAAQ,OACRC,IAAK,sCACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJ,IAAI6K,EAAS,GACT7K,EAAIrM,KAAKmX,YACX9K,EAAIrM,KAAKmX,WAAW3F,SAASrB,IAC3B,IAAIkG,EAAe,CAAE,MAASlG,EAAKiH,UAAW,MAASjH,EAAKiH,UAAY,KAAOjH,EAAKkE,eAAiB,KACrG6C,EAAOpH,KAAKuG,EAAa,IAG7BrR,GAA0BkS,EAAO,IAElC1K,OAAMC,IACLH,QAAQC,IAAI,OACZvH,GAA0B,GAAG,GAC7B,EAGA8P,GAAuBhJ,IAC3B,MAAM0B,EAAW,CACf,WAAc,QACd,UAAa1B,EAAOjR,UACpB,SAAYiR,EAAO9Q,SACnB,OAAU8Q,EAAO7Q,OACjB,SAAY6Q,EAAOhR,SACnB,YAAegR,EAAO/Q,YACtB,YAAe+Q,EAAO9S,YACtB,WAAcqK,EAAO,EACrB,gBAAmBF,EACnB,UAAa2I,EAAO5Q,UACpB,eAAkB4Q,EAAOzH,eACzB,oBAAuByH,EAAOnH,oBAC9B,WAAcmH,EAAO7G,WACrB,iBAAoB6G,EAAO/E,iBAC3B,aAAgB+E,EAAO7H,aACvB,aAAgB6H,EAAOjI,aACvB,eAAkBiI,EAAOzG,eACzB,oBAAuByG,EAAOvG,oBAC9B,SAAYE,GACZ,aAAgBqG,EAAOzQ,aACvB,aAAgByQ,EAAOjF,iBACvB,YAAeiF,EAAO3D,YACtB,mBAAsB2D,EAAOmH,mBAC7B,iBAAoBnH,EAAOoH,iBAC3B,gBAAmBpH,EAAOlD,gBAC1B,mBAAsBkD,EAAOqH,mBAC7B,iBAAoBrH,EAAOsH,iBAC3B,uBAA0BtH,EAAOuH,uBACjC,qBAAwBvH,EAAOwH,qBAC/B,SAAYxH,EAAOyH,SACnB,YAAezH,EAAO0H,YACtB,YAAe1H,EAAO2H,YACtB,qBAAwB3H,EAAO4H,sBAEjCtE,YAAM,CACJpD,OAAQ,OACRC,IAAK,sCACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJ,IAAI6K,EAAS,GACT7K,EAAIrM,KAAK6G,kBACXwF,EAAIrM,KAAK6G,iBAAiB2K,SAASrB,IACjC,IAAIkG,EAAe,CAAE,MAASlG,EAAKkH,UAAW,MAASlH,EAAKkH,WAC5DH,EAAOpH,KAAKuG,EAAa,IAG7BzP,GAAwBsQ,EAAO,IAEhC1K,OAAMC,IACLH,QAAQC,IAAI,OACZ3F,GAAwB,GAAG,GAC3B,EAGAmO,GAAkBjJ,IACtB,MAAM0B,EAAW,CACf,WAAc,QACd,UAAa1B,EAAOjR,UACpB,SAAYiR,EAAO9Q,SACnB,OAAU8Q,EAAO7Q,OACjB,SAAY6Q,EAAOhR,SACnB,YAAegR,EAAO/Q,YACtB,YAAe+Q,EAAO9S,YACtB,WAAcqK,EAAO,EACrB,gBAAmBF,EACnB,UAAa2I,EAAO5Q,UACpB,eAAkB4Q,EAAOzH,eACzB,oBAAuByH,EAAOnH,oBAC9B,WAAcmH,EAAO7G,WACrB,iBAAoB6G,EAAO/E,iBAC3B,aAAgB+E,EAAO7H,aACvB,aAAgB6H,EAAOjI,aACvB,eAAkBiI,EAAOzG,eACzB,oBAAuByG,EAAOvG,oBAC9B,SAAYE,GACZ,aAAgBqG,EAAOzQ,aACvB,aAAgByQ,EAAOjF,iBACvB,YAAeiF,EAAO3D,YACtB,mBAAsB2D,EAAOmH,mBAC7B,iBAAoBnH,EAAOoH,iBAC3B,gBAAmBpH,EAAOlD,gBAC1B,mBAAsBkD,EAAOqH,mBAC7B,iBAAoBrH,EAAOsH,iBAC3B,uBAA0BtH,EAAOuH,uBACjC,qBAAwBvH,EAAOwH,qBAC/B,SAAYxH,EAAOyH,SACnB,YAAezH,EAAO0H,YACtB,YAAe1H,EAAO2H,YACtB,qBAAwB3H,EAAO4H,sBAEjCtE,YAAM,CACJpD,OAAQ,OACRC,IAAK,iCACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJ,IAAI6K,EAAS,GACT7K,EAAIrM,KAAKmI,aACXkE,EAAIrM,KAAKmI,YAAYqJ,SAASrB,IAC5B,IAAIkG,EAAe,CAAE,MAASlG,EAAKmH,SAAU,MAASnH,EAAKmH,UAC3DJ,EAAOpH,KAAKuG,EAAa,IAG7BnO,GAAmBgP,EAAO,IAE3B1K,OAAMC,IACLH,QAAQC,IAAI,OACZrE,GAAmB,GAAG,GACtB,EASAqP,GAAgBvX,IA8CpB,GA5CIA,EAAKqE,gBACPC,GAAkBtE,EAAKqE,gBAErBrE,EAAK2E,qBACPC,GAAuB5E,EAAK2E,qBAE1B3E,EAAKiF,YACPC,GAAclF,EAAKiF,YAEjBjF,EAAK+G,kBACPC,GAAoBhH,EAAK+G,kBAEvB/G,EAAK6D,cACPC,GAAgB9D,EAAK6D,cAEnB7D,EAAKiE,cACPC,GAAgBlE,EAAKiE,cAEnBjE,EAAKqF,gBACPC,GAAkBtF,EAAKqF,gBAErBrF,EAAKuF,qBACPC,GAAuBxF,EAAKuF,qBAE1BvF,EAAK6G,kBACPC,GAAoB9G,EAAK6G,kBAEvB7G,EAAKmI,aACPC,GAAepI,EAAKmI,aAElBnI,EAAK0I,gBACPC,GAAkB3I,EAAK0I,gBAErB1I,EAAK2O,qBACP9F,GAAmB7I,EAAK2O,qBAEtB3O,EAAKgJ,cACPC,GAAgBjJ,EAAKgJ,cAEnBhJ,EAAKoJ,iBACPC,GAAmBrJ,EAAKoJ,iBAItBzF,IAAgBA,GAAa9I,UAAW,CAC1C,IAAIiR,EAASnI,GACbmI,EAAO8B,WAAa,UACpB9B,EAAOzH,eAAiBrE,EAAKqE,eAC7ByH,EAAOnH,oBAAsB3E,EAAK2E,oBAClCmH,EAAO7G,WAAajF,EAAKiF,WACzB6G,EAAOjI,aAAe7D,EAAK6D,aAC3BiI,EAAO7H,aAAejE,EAAKiE,aAC3B6H,EAAOzG,eAAiBrF,EAAKqF,eAC7ByG,EAAOvG,oBAAsBvF,EAAKuF,oBAClCuG,EAAO/E,iBAAmB/G,EAAK+G,iBAC/B+E,EAAOjF,iBAAmB7G,EAAK6G,iBAC/BiF,EAAO3D,YAAcnI,EAAKmI,YAC1B2D,EAAO1Q,YAAa,EAIhB4E,EAAKqE,iBAEPyH,EAAuB,eAAI9L,EAAKqE,gBAE9BrE,EAAK2E,sBAEPmH,EAA4B,oBAAI9L,EAAK2E,qBAEnC3E,EAAKiF,aAEP6G,EAAmB,WAAI9L,EAAKiF,YAE1BjF,EAAK+G,mBAEP+E,EAAyB,iBAAI9L,EAAK+G,kBAEhC/G,EAAK6D,eAEPiI,EAAqB,aAAI9L,EAAK6D,cAE5B7D,EAAKiE,eAEP6H,EAAqB,aAAI9L,EAAKiE,cAE5BjE,EAAKqF,iBAEPyG,EAAuB,eAAI9L,EAAKqF,gBAE9BrF,EAAKuF,sBAEPuG,EAA4B,oBAAI9L,EAAKuF,qBAEnCvF,EAAK6G,mBAEPiF,EAAqB,aAAI9L,EAAK6G,kBAE5B7G,EAAKmI,cAEP2D,EAAoB,YAAI9L,EAAKmI,aAE3BnI,EAAKqO,cACPvC,EAA2B,mBAAI9L,EAAKqO,aAElCrO,EAAKsO,cACPxC,EAAyB,iBAAI9L,EAAKsO,aAEhCtO,EAAKuO,WACPzC,EAA2B,mBAAI9L,EAAKuO,UAElCvO,EAAKwO,WACP1C,EAAyB,iBAAI9L,EAAKwO,UAEhCxO,EAAKyO,eACP3C,EAA+B,uBAAI9L,EAAKyO,cAEtCzO,EAAK0O,eACP5C,EAA6B,qBAAI9L,EAAK0O,cAEpC1O,EAAK2O,sBACP7C,EAAwB,gBAAI9L,EAAK2O,qBAE/B3O,EAAKgJ,eACP8C,EAAiB,SAAI9L,EAAKgJ,cAExBhJ,EAAKoJ,kBACP0C,EAAoB,YAAI9L,EAAKoJ,iBAE3BpJ,EAAK4O,kBACP9C,EAA6B,qBAAI9L,EAAK6O,4BACtC/C,EAAoB,YAAI9L,EAAK4O,iBAE3B5O,EAAK0I,iBACPoD,EAAuB,eAAI9L,EAAK0I,gBAElC9E,GAAgBkI,GAChBkD,GAAclD,EAiBhB,CACA9I,GAAU,EAAM,EA+DZwU,GAAoBjH,IACxB,MAAM/C,EAAW,CACf,aAA8C,gBAA9B9D,GAAa9N,QAAQoB,MAA0BuT,EAAKkH,SAAS/N,GAAa9N,QAAQoB,OAClG,UAAayI,GACb,KAAQ+D,GAAU5N,QAAQoB,MAC1B,YAAeyM,GAAS7N,QAAQoB,MAChC,UAAa,KAEfyQ,YAAS,CACPzB,OAAQ,OACRC,IAAK,4CACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJjT,EAAM6H,wBAAwB,CAC5BlB,eAAgB3G,EAAM2G,eACtBE,eAAgB7G,EAAM6G,eACtBC,iBAAkB9G,EAAM8G,iBACxBC,eAAgB/G,EAAM+G,eAAiB,EACvCC,aAAchH,EAAMgH,aACpBC,YAAajH,EAAMiH,cAErBwL,GAAmB,CAAE,eAAkBzS,EAAM+G,eAAiB,IAC9D0M,IAAKC,KAAK,CACRC,MAAO,UACPC,KAAM,kCACNC,KAAM,WACN,IAEHT,OAAMC,IACLH,QAAQC,IAAI,MAAOE,GACnB,IAAIiB,EAAW,2CACXjB,EAAIzM,KAAK0N,WACXA,EAAWjB,EAAIzM,KAAK0N,UAEtBb,IAAKC,KAAK,CACRC,MAAO,QACPC,KAAMU,EACNT,KAAM,SACN,IAENrB,IAAa,EAkBfhP,qBAAU,KAZR6Q,YAAS,CACPzB,OAAQ,MACRC,IAAK,8CAA8C5K,MAElD+K,MAAKC,IACJ/B,GAAiB+B,EAAIrM,KAAKqK,cAAc,IAEzCmC,OAAMC,IACLH,QAAQC,IAAI,MAAOE,EAAI,IAM3BiL,IAAkB,GACjB,IAGH,MAAMC,GAAoBA,CAAC3a,EAAO4a,EAAgBxH,KAChD,GAAIpT,GAASA,EAAMC,QAAU,EAAG,CAC9B,IAAI4a,EAAoB,GACpBC,EAAgC,CAAC,GAAI,GAAI,IAC7C,MAAMtK,EAAW,CACf,UAAaoK,EAAe/c,UAC5B,SAAY+c,EAAe5c,SAC3B,OAAU4c,EAAe3c,OACzB,SAAqB,IAATmV,EAAcwH,EAAe9c,SAAW8c,EAAevc,aAAa+U,EAAQ,GAAGtV,SAC3F,YAAekC,EACf,YAAe4a,EAAe5e,YAC9B,UAAsB,IAAToX,EAAcwH,EAAe1c,UAAY0c,EAAevc,aAAa+U,EAAQ,GAAGlV,WAE/FkU,YAAM,CACJpD,OAAQ,OACRC,IAAK,oCACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACAA,EAAIrM,KAAK+X,iBACX1L,EAAIrM,KAAK+X,eAAejb,KAAKqT,IAC3B,IAAIkG,EAAe,CAAE,MAASlG,EAAK6H,eAAgB,MAAS7H,EAAK6H,gBACjEH,EAAkB/H,KAAKuG,EAAa,IAEzB,IAATjG,EACF9I,GAAeuQ,IAGfC,EAA8B1H,EAAQ,GAAKyH,EAC3CvL,QAAQC,IAAI,4BAA6BuL,GACzCtQ,GAA2BsQ,IAG/B,IAEDtL,OAAMC,OAIX,GAMIwL,GAAoB7e,GAEtBiE,cAAC6a,IAAWC,SAAQ,IAAM/e,EAAKgE,SAC5BhE,EAAMgE,WAMPyQ,GAAyB/B,IAC7BlC,GAAakC,GAEbsM,YAAY,CACVpM,OAAQ,MACRC,IAAK,4CAA4CH,MAEhDM,MAAKC,IACJ,IAAI9L,EAAc,GAChB8X,EAAmB,GACjBhM,EAAIrM,KAAKO,cACX8L,EAAIrM,KAAKO,YAAYiR,SAASrB,IAC5BkI,EAAiBvI,KAAK,CACpB,MAASK,EAAK1R,UACd,MAAS0R,EAAKmI,KACd,SAAYnI,EAAKoI,MACjB,gBAA6B,KAAVzM,EAAgBqE,EAAKqI,qBAAuBrI,EAAKsI,uBAEtE,IAAIpC,EAAe3c,OAAOC,OAAOwW,EAAM,CAAEuI,UAAU,IACnDnY,EAAYuP,KAAKuG,EAAa,IAGhC9V,EAAc8L,EAAIrM,KAAKO,YAAYtD,OAAS,GAAK7D,EAAMmH,YAAYtD,OAAS,GAAKoP,EAAIrM,KAAKO,YAAY5B,QAAQwR,GACrG/W,EAAMmH,YAAY/B,SAAS2R,EAAK1R,aAGzC+L,GAAoBjK,GACpBkK,GAAyB4N,GACzB/L,QAAQC,IAAI,sCAAuC8L,GACrD,IAED7L,OAAMC,IACLjC,GAAoB,GAAG,GACvB,EAGAkN,GAAmBA,KAEvB,GADApL,QAAQC,IAAI,0BACRnK,EAAW,CACb,IAAIyV,EAAoB,GACpBc,EAA6B,GACjCvJ,YAAM,CACJpD,OAAQ,MACRC,IAAK,oCACLH,OAAQ,CAAErG,SAAUrD,KAEnBgK,MAAKC,IACJ,GAAIA,EAAIrM,KAAK4Y,UAAW,CACtB,IAAIC,EAAUxM,EAAIrM,KAAK4Y,UAAU,GAAGE,gBACpCle,EAAgB,IACXA,EACHC,UAAWge,EAAQhe,UACnBK,UAAW2d,EAAQ3d,UACnBJ,SAAU+d,EAAQ/d,SAClBC,YAAa8d,EAAQ9d,YACrB/B,YAAa6f,EAAQ7f,YACrBgC,SAAU6d,EAAQ7d,SAAW,IAAIiQ,KAAK4N,EAAQ7d,UAAY,GAC1DC,OAAQ4d,EAAQ5d,OAAS,IAAIgQ,KAAK4N,EAAQ5d,QAAU,GACpDE,UAAWiH,EAAY,IAAM,GAC7B/G,aAAcwd,EAAQxd,aAAewd,EAAQxd,aAAe,GAC5DkK,oBAAqBsT,EAAQtT,oBAC7BF,eAAgBwT,EAAQxT,eACxBpB,aAAc4U,EAAQ5U,aACtB8C,iBAAkB8R,EAAQ9R,iBAC1B9B,WAAY4T,EAAQ5T,WACpBpB,aAAcgV,EAAQhV,aACtBc,oBAAqBkU,EAAQlU,oBAC7BN,eAAgBwU,EAAQxU,eACxBwC,iBAAkBgS,EAAQE,aAAeF,EAAQE,aAAe,GAChE5Q,YAAa0Q,EAAQ1Q,YAAc0Q,EAAQ1Q,YAAc,GACzDkG,YAAawK,EAAQ5F,mBAAqB4F,EAAQ5F,mBAAqB,KACvE3E,YAAauK,EAAQ3F,iBAAmB2F,EAAQ3F,iBAAmB,KACnEvE,oBAAqBkK,EAAQjQ,gBAAkBiQ,EAAQjQ,gBAAkB,GACzE2F,SAAUsK,EAAQ1F,mBAAqB0F,EAAQ1F,mBAAqB,KACpE3E,SAAUqK,EAAQzF,iBAAmByF,EAAQzF,iBAAmB,KAChE3E,aAAcoK,EAAQxF,uBAAyBwF,EAAQxF,uBAAyB,KAChF3E,aAAcmK,EAAQvF,qBAAuBuF,EAAQvF,qBAAuB,KAC5EtK,aAAc6P,EAAQtF,SAAWsF,EAAQtF,SAAW,GACpDnK,gBAAiByP,EAAQrF,YAAcqF,EAAQrF,YAAc,IAE/DnL,GAAewQ,EAAQ7f,aAEvB6f,EAAQ9d,YAAY+B,KAAI,CAACqT,EAAMC,KAC7B,IAAIiG,EAAe,CAAE,MAASlG,EAAM,MAASA,GAC7C0H,EAAkB/H,KAAKuG,EAAa,IAEtC3L,GAAemN,GACXgB,EAAQxd,cAAgBwd,EAAQxd,aAAa4B,OAAS,GAExD4b,EAAQxd,aAAayB,KAAI,CAACkc,EAASC,KACjC,IAAIC,EAAY,GAChBF,EAAQje,YAAY+B,KAAI,CAACqT,EAAMC,KAC7B,IAAIiG,EAAe,CAAE,MAASlG,EAAM,MAASA,GAC7C+I,EAAUpJ,KAAKuG,EAAa,IAE9BsC,EAA2BM,GAAYC,CAAS,IAGpDtO,GAA2B+N,GAC3BrM,QAAQC,IAAI,+BAAgC3R,GAE5C8M,GAAgB2E,EAAIrM,KAAK4Y,UAAU,GAAGnR,cACtCO,GAA4BqE,EAAIrM,KAAK4Y,UAAU,GAAG3C,cAC7B,UAArB4C,EAAQhe,UAAwBse,GAAqC,IAAKN,EAAQ7f,YAAa6f,EAAQhe,UAAWD,GAAiBue,GAAqC,IAAKN,EAAQ7f,YAAa6f,EAAQhe,UAAWD,EACvN,KAED4R,OAAMC,IACLH,QAAQC,IAAI,MAAOE,EAAI,GAE7B,GAGI0M,GAAuCA,CAACrN,EAAQ9S,EAAa6B,EAAWD,KAC5EgP,GAAakC,GACbsM,YAAY,CACVpM,OAAQ,MACRC,IAAK,4CAA4CH,MAEhDM,MAAKC,IACJ,IAAI9L,EAAc,GAChB8X,EAAmB,GACnBe,EAAsB,GACxB,GAAI/M,EAAIrM,KAAKO,YAAa,CACxB8L,EAAIrM,KAAKO,YAAYiR,SAASrB,IAC5BkI,EAAiBvI,KAAK,CACpB,MAASK,EAAK1R,UACd,MAAS0R,EAAKmI,KACd,SAAYnI,EAAKoI,MACjB,gBAA6B,KAAVzM,EAAgBqE,EAAKqI,qBAAuBrI,EAAKsI,uBAEtE,IAAIpC,EAAe3c,OAAOC,OAAOwW,EAAM,CAAEuI,UAAU,IACnDnY,EAAYuP,KAAKuG,EAAa,IAGhC9V,EAAc8L,EAAIrM,KAAKO,YAAYtD,OAAS,GAAK7D,EAAMmH,YAAYtD,OAAS,GAAKoP,EAAIrM,KAAKO,YAAY5B,QAAQwR,GACrG/W,EAAMmH,YAAY/B,SAAS2R,EAAK1R,aAIzC+L,GAAoBjK,GACpBkK,GAAyB4N,GACzB/L,QAAQC,IAAI,kCAAmC8L,GAG/C,MAAMgB,EAAU9Y,EAAY5B,QAAQwR,GAClCnX,EAAYsgB,MAAM1a,GAASuR,EAAK1R,UAAUjF,gBAAkBoF,EAAKpF,kBAGnE6f,EAAQ7H,SAASrB,IACfiJ,EAAoBtJ,KAAK,CAAE,MAASK,EAAK1R,UAAW,MAAS0R,EAAKmI,MAAO,IAE3Enc,GAAwBid,GAExB9M,QAAQC,IAAI,yCAA0C6M,GAGtD7Q,GAAqB8Q,EAAQ,GAAG/Q,mBAChCG,GAAqB4Q,EAAQ,GAAG7Q,mBAuCxC,SAAiBwE,EAAMnS,EAAW0P,GAEhC,MAAM8O,EAAU9O,EAAiB5L,QAAQwR,GACvCnD,EAAKsM,MAAM1a,GAASuR,EAAK1R,UAAUjF,gBAAkBoF,EAAKpF,kBAI5D,GAFA8S,QAAQC,IAAI,2BAA4B8M,IAEnCA,EAAQpc,OAAQ,OAErB,IAAIjC,EAAW,GACXC,EAAS,GAEK,MAAdJ,GACFG,EAAWmT,IAAOkL,EAAQ,GAAGE,YAAYnL,OAAO,cAChDnT,EAASkT,IAAOkL,EAAQ,GAAGG,YAAYpL,OAAO,gBAE9CpT,EAAWmT,IAAOkL,EAAQ,GAAGI,YAAYrL,OAAO,cAChDnT,EAASkT,IAAOkL,EAAQ,GAAGK,YAAYtL,OAAO,eAGhDpD,GAAW,IAAIC,KAAKjQ,IACpBmQ,GAAW,IAAIF,KAAKhQ,IAEb,IAAIgQ,KAAKhQ,EAClB,CA7DQ0e,CAAQ3gB,EAAa6B,EAAWwR,EAAIrM,KAAKO,aACjB,KAApB+B,EACF0L,GAAapT,EAAe2F,EAAa+B,GAEzC0L,GAAapT,EAAe2F,EAGhC,KAGDiM,OAAMC,IACLjC,GAAoB,GAAG,GACvB,EA2FN,SAASpO,GAAcwd,EAAmB/e,GACxC,IAAK+e,GAAkD,IAA7BA,EAAkB3c,OAO1C,YANA4P,IAAKC,KAAK,CACRC,MAAO,UACPC,KAAM,qCACNC,KAAM,QACNG,mBAAoB,YAKxB,IAAIyM,EAAY,GACZC,EAAU,GAgBd,GAdAF,EAAkBpI,SAAQzU,IACxB,IAAIsc,EAAU9O,GAAiByG,MAAKb,GAAQA,EAAK1R,UAAUjF,gBAAkBuD,EAAQC,MAAMxD,gBAEvF6f,IACgB,MAAdxe,GACFgf,EAAU/J,KAAK3B,IAAOkL,EAAQE,YAAYte,UAC1C6e,EAAQhK,KAAK3B,IAAOkL,EAAQG,YAAYve,YAExC4e,EAAU/J,KAAK3B,IAAOkL,EAAQI,YAAYxe,UAC1C6e,EAAQhK,KAAK3B,IAAOkL,EAAQK,YAAYze,WAE5C,IAGE4e,EAAU5c,OAAS,GAAK6c,EAAQ7c,OAAS,EAAG,CAC9C,IAAI8N,EAAU,IAAIE,KAAKiE,KAAK6K,OAAOF,IAC/B3O,EAAU,IAAID,KAAKiE,KAAK8K,OAAOF,IAQnC,OANAxN,QAAQC,IAAI,gBAAiBxB,GAC7BuB,QAAQC,IAAI,gBAAiBrB,GAE7BF,GAAWD,GACXI,GAAWD,GAEJA,CACT,CACF,CAYAtO,qBAAU,IACD,KACL0E,aAAa2Y,WAAW,cAAc,GAEvC,IAgGH,MAAM5e,GAAeA,CAACa,EAAQge,EAAQC,EAASC,EAAiBne,EAAeoe,IAE3Ehd,cAACid,IAAU,CACThC,KAAK,eACLiC,OAAQC,GACNnd,cAAAF,WAAA,CAAAC,SACGlB,EAAOb,cAAgBa,EAAOb,aAAa4B,OAAS,EACnDf,EAAOb,aAAayB,KAAI,CAACkD,EAAMoQ,IAC7BlT,eAACmd,EAAQ,CAAAjd,SAAA,CACPC,cAAA,OAAKC,UAAU,qBAAoBF,SACjCC,cAAA,OAAKC,UAAU,eAAcF,SAC3BF,eAACud,IAAK,CACJnC,KAAM,gBAAgBlI,cACtBsK,UAAU,SACVpd,UAAW,gDAA+C6c,EAAQjf,WAAagf,EAAOhf,UAAY,aAAe,IACjHyf,aAAa,MACbvc,SAAUwc,IACJxhB,EAAMiH,YAAc,GACtBpE,EAAc,gBAAgBmU,cAAmBwK,EAAMC,OAAO7d,OAC9D8K,IAAmB,IAEZ1O,EAAMiH,aAAe,GAA0B,MAArBjH,EAAMiH,aACvCya,IACF,EACA1d,SAAA,CAEFC,cAAA,UAAQL,MAAM,GAAEI,SAAC,oBACjBC,cAAA,UAAQL,MAAM,MAAKI,SAAC,eAM1BC,cAAA,OAAKC,UAAU,qBAAoBF,SAEjCC,cAAA,OAAKC,UAAU,eAAcF,SAC3BF,eAACud,IAAK,CACJnC,KAAM,gBAAgBlI,cACtBsK,UAAU,SACVpd,UAAW,gDAA+C6c,EAAQrf,UAAYof,EAAOpf,SAAW,aAAe,IAC/G6f,aAAa,MACbvc,SAAUwc,IACJxhB,EAAMiH,YAAc,GACA,WAAtBua,EAAMC,OAAO7d,MAAqBf,EAAc,gBAAgBmU,eAAoB,KAAOnU,EAAc,gBAAgBmU,eAAoB,KAC7InU,EAAc,gBAAgBmU,cAAmBwK,EAAMC,OAAO7d,OAC9D8K,IAAmB,GACnB6C,GAAwB1N,OAAS,GAE1B7D,EAAMiH,aAAe,GAA0B,MAArBjH,EAAMiH,aACvCya,IACF,EACA1d,SAAA,CAEFC,cAAA,UAAQL,MAAM,GAAEI,SAAC,gBACjBC,cAAA,UAAQL,MAAM,UAASI,SAAC,YACxBC,cAAA,UAAQL,MAAM,UAASI,SAAC,YACF,UAApBlB,EAAOrB,WAA8C,KAArByN,IAAiD,UAApBpM,EAAOrB,UAAwBwC,cAAA,UAAQL,MAAM,WAAUI,SAAC,aAAoB,KACrH,UAApBlB,EAAOrB,WAA8C,KAArB2N,IAAgD,UAApBtM,EAAOrB,UAAyBwC,cAAA,UAAQL,MAAM,WAAUI,SAAC,aAAoB,YAIjJC,cAAA,OAAKC,UAAU,qBAAoBF,SACjCC,cAAA,OAAKC,UAAU,eAAcF,SAC3BF,eAACud,IAAK,CACJnC,KAAM,gBAAgBlI,eACtBsK,UAAU,SACVpd,UAAW,gDAA+C6c,EAAQjf,WAAagf,EAAOhf,UAAY,aAAe,IACjHyf,aAAa,MACbvc,SAAUwc,IACJxhB,EAAMiH,YAAc,GACtBpE,EAAc,gBAAgBmU,eAAoBwK,EAAMC,OAAO7d,OAC/D2N,GAAwB1N,OAAS,EACjC6K,IAAmB,IAEZ1O,EAAMiH,aAAe,GAA0B,MAArBjH,EAAMiH,aACvCya,IACF,EACA1d,SAAA,CAEFC,cAAA,UAAQL,MAAM,GAAEI,SAAC,WAChBlB,EAAOb,cAAgBa,EAAOb,aAAa4B,OAAS,GAAKf,EAAOb,aAAa+U,GAAO2K,eAAe,aAAsD,WAAvC7e,EAAOb,aAAa+U,GAAOtV,SAAwBoC,eAAAC,WAAA,CAAAC,SAAA,CAAEC,cAAA,UAAQL,MAAM,IAAGI,SAAC,aAAiBC,cAAA,UAAQL,MAAM,IAAGI,SAAC,sBAA0B,OAAO,KAC9PC,cAAA,UAAQL,MAAM,IAAGI,SAAC,gBAIvBuN,IAA2BA,GAAwB1N,OAAS,EAC3DI,cAAA,OAAKC,UAAU,qBAAoBF,SACjCC,cAAA,OAAKC,UAAU,eAAcF,SAC3BF,eAAC8d,IAAS,CAAA5d,SAAA,CACRC,cAAC4d,IAAS,CACRC,YAAY,uBACZ5C,KAAM,gBAAgBlI,iBACtB+K,QAAS5T,GAAwB6I,GACjCgL,SAAO,EACPC,iBAAkBA,IAAMnf,EAAOb,aAAa+U,GAAOrV,aAAemB,EAAOb,aAAa+U,GAAOrV,YAAYkC,QAAU,GACnHqe,iBAAkBA,IAAM,iBACxBpD,WAAY,CAAEC,SAAUF,IACxBsD,cAAgBC,GAAapiB,EAAMiH,YAAc,EAAIsX,GAAkB6D,EAAUtf,EAAQkU,EAAQ,GAAK,KACtGhS,SAAWqd,IACT,GAAIriB,EAAMiH,YAAc,EAAG,CACzB,IAAIqb,EAAW,GACf5T,IAAmB,GACnB2T,EAAejK,SAASrB,IACtBuL,EAAS5L,KAAKK,EAAKnT,MAAM,IAE3Bf,EAAc,gBAAgBmU,iBAAsBsL,EACtD,MACStiB,EAAMiH,aAAe,GAA0B,MAArBjH,EAAMiH,aACvCya,IACF,EAEFa,aAAchR,GAAwByF,KAGvC8J,EAAOnf,aAAeof,EAAQpf,YAC7BsC,cAAA,QAAMC,UAAU,WAAUF,SAAE8c,EAAOnf,cACjC,YAGD,KAGXmC,eAAA,OAAKI,UAAU,qBAAoBF,SAAA,CACb,aAAnBlB,EAAOpB,UAQNoB,EAAOb,aAAa4B,OAAS,EAP5BI,cAAA,UACCa,KAAK,SAASZ,UAAU,kBACxBC,QAASA,IAAMid,EAAaoB,OAAOxL,GAAOhT,SAC3C,MAWG,KACL,WAEAlB,EAAOb,aAAa4B,OAAS,EAC5BI,cAAA,UACEa,KAAK,SAASZ,UAAU,kBACxBC,QAASA,IAAMid,EAAa1K,KAAK,CAAE+L,SAAU,GAAI/gB,SAAU,GAAII,UAAW,GAAIH,YAAa,KAAMqC,SAClG,MAEW,UA3IHgT,KAgJjB/S,cAAA,OAAKC,UAAU,qBAAoBF,SAChCoF,EAAe,KACdnF,cAAA,UAAQa,KAAK,QAAQZ,UAAU,kBAC7BC,QAASA,IAAMid,EAAa1K,KAAK,CAAE+L,SAAU,GAAI/gB,SAAU,GAAII,UAAW,GAAIH,YAAa,KAAMqC,SAAC,cAW9G0d,GAAeA,KACnBjO,IAAKC,KAAK,CACRC,MAAO,WACPC,KAAM,8BACNC,KAAM,QACNC,YAAY,EACZE,mBAAoB,WACpB,EAGJ,OACElQ,eAAAC,WAAA,CAAAC,SAAA,CACEF,eAAA,OAAKI,UAAU,kBAAiBF,SAAA,CAC9BC,cAAA,OAAKC,UAAU,MAAKF,SAClBF,eAAA,OAAKI,UAAU,2BAA0BF,SAAA,CACvCF,eAAA,OAAKI,UAAU,aAAYF,SAAA,CACzBC,cAAA,MAAAD,SAAI,6BAGJC,cAACye,IAAM,CACLC,oBAAoB,EACpBnhB,cAAeA,EACfohB,iBAAkB/c,EAClBgd,SAzoFM/f,IAKlB,GAHAoQ,QAAQC,IAAI,6CAA8CrQ,EAAOnB,aACjEuR,QAAQC,IAAI,iCAAkCrQ,GAE1CA,EAAOnB,aAAemB,EAAOnB,YAAYkC,OAAS,EAAG,CACvD6K,IAAmB,GACnBxD,GAAkB,IAClBM,GAAuB,IACvBM,GAAc,IACd8B,GAAoB,IACpBlD,GAAgB,IAChBI,GAAgB,IAChBoB,GAAkB,IAClBE,GAAuB,IACvBsB,GAAoB,IACpBsB,GAAe,IACflM,EAAOX,cAAe,EAEtB,IAAI2gB,GAAgB,EAChBC,EAAS,GACTjgB,EAAOpB,SACToB,EAAOnB,YAAY+B,KAAI,CAACqT,EAAMC,KACxBD,EAAKlT,OAAS,IAChBif,GAAgB,EAChBC,EAAS,4DACX,IAYAjgB,EAAOb,aAAa4B,OAAS,GAC/Bf,EAAOb,aAAayB,KAAI,CAACqT,EAAMC,KACR,WAAjBD,EAAKrV,SACPqV,EAAKpV,YAAYkC,OAAS,GAAKkT,EAAKpV,YAAY+B,KAAI,CAACsf,EAAShM,KACxDgM,EAAQnf,OAAS,IACnBif,GAAgB,EAChBC,EAAS,4DACX,IAIFhM,EAAKpV,YAAYkC,OAAS,GAAKkT,EAAKpV,YAAY+B,KAAI,CAACsf,EAAShM,KACxDgM,EAAQnf,OAAS,IACnBif,GAAgB,EAChBC,EAAS,4DACX,GAEJ,IAIiB,GAAjBD,EACFrP,IAAKC,KAAK,CACRC,MAAO,UACPC,KAAMmP,EACNlP,KAAM,QACNC,YAAY,EACZE,mBAAoB,aAItBhU,EAAMyH,eACNmN,GAAa9R,GAGjB,MAEE2Q,IAAKC,KAAK,CACRC,MAAO,UACPC,KAAM,sBACNC,KAAM,QACNC,YAAY,EACZE,mBAAoB,WAExB,EAwjFYiP,WAAS,EAAAjf,SAERkf,IAA+H,IAA9H,OAAEpgB,EAAM,OAAEge,EAAM,cAAEje,EAAa,cAAEsgB,EAAa,QAAEpC,EAAO,QAAEqC,EAAO,aAAEC,EAAY,WAAEC,EAAU,gBAAEtC,EAAe,UAAEiC,GAAWC,EAExH,OACEpf,eAACyf,IAAI,CAAAvf,SAAA,CAEHF,eAAA,OAAKI,UAAU,MAAKF,SAAA,CAClBC,cAAA,OAAKC,UAAU,qBAAoBF,SACjCF,eAAA,OAAKI,UAAU,eAAcF,SAAA,CAC3BF,eAACud,IAAK,CACJnC,KAAK,YACLoC,UAAU,SACVpd,UAAW,gDAA+C6c,EAAQtf,WAAaqf,EAAOrf,UAAY,aAAe,IACjH8f,aAAa,MACb3d,MAAOd,EAAOrB,UACduD,SAAUwc,IACJxhB,EAAMiH,YAAc,GACtBpE,EAAc,YAAa2e,EAAMC,OAAO7d,OACxCf,EAAc,cAAe,IAC7BA,EAAc,WAAY,IAC1BA,EAAc,SAAU,IACxBA,EAAc,YAAa,IAC3B6L,IAAmB,GACnB5E,EAAgB,IAChBkE,GAAkB,IAClBxB,GAAiB,IACjBE,GAAe,QACf+H,GAA4C,UAAtB+M,EAAMC,OAAO7d,MAAoB,IAAM,MAEtD5D,EAAMiH,aAAe,GAA0B,MAArBjH,EAAMiH,aACvCya,IACF,EACA1d,SAAA,CAEFC,cAAA,UAAQL,MAAM,GAAEI,SAAC,iBACjBC,cAAA,UAAQL,MAAM,SAAQI,SAAC,WACvBC,cAAA,UAAQL,MAAM,SAAQI,SAAC,cAExB8c,EAAOrf,WAAasf,EAAQtf,UAC3BwC,cAAA,QAAMC,UAAU,WAAUF,SAAE8c,EAAOrf,YACjC,UAuGRqC,eAAA,OAAKI,UAAU,qBAAoBF,SAAA,CAGjCC,cAACvB,EAAe,CACdC,sBAAuBA,GACvBC,qBAAsBA,GACtBC,cAAeA,EACfC,OAAQA,EACRC,wBAAyBA,GACzBC,cAAeA,KAIhB8d,EAAOlhB,aAAemhB,EAAQnhB,YAC7BqE,cAAA,QAAMC,UAAU,WAAUF,SAAE8c,EAAOlhB,cACjC,QAGNqE,cAAA,OAAKC,UAAU,qBAAoBF,SACjCF,eAAA,OAAKI,UAAU,6CAA4CF,SAAA,CACzDF,eAACud,IAAK,CACJnC,KAAK,YACLoC,UAAU,SACVpd,UAAW,gDAA+C6c,EAAQhf,WAAa+e,EAAO/e,UAAY,aAAe,IACjHwf,aAAa,MACb3d,MAAOd,EAAOf,UACdiD,SAAUwc,IAER,GAAIxhB,EAAMiH,YAAc,EAAG,CACzBjH,EAAMyH,eACNiH,IAAmB,GACnB7L,EAAc,YAAa2e,EAAMC,OAAO7d,OACxC,IAAI4f,EAAaxgB,GAAcJ,GAAsBE,EAAOrB,WACxDgiB,EAAc1O,IAAOyO,GAAYE,KAAK3O,IAAO/U,EAAMsH,gBAAiB,QAAU,EAAItH,EAAMsH,eAAiBkc,EACzGG,EAAa,GAEjB,GAAI7gB,EAAOlD,YAAYwF,SAAS,QAAUtC,EAAOlD,YAAYwF,SAAS,OAAQ,CAC5E,MAAMwe,EAAU7O,MAAS2O,KAAK3O,IAAO0O,GAAc,QAAU,EAAIA,EAAc,IAAI5R,KAC7EgS,EAAI,IAAIhS,KAAK+R,GACnBC,EAAEtD,QAAQ,GACVoD,EAAa5O,IAAO8O,GAAGC,SAAS,EAAG,OACrC,MACEH,EAAa5O,MAAS2O,KAAK3O,IAAO0O,GAAc,QAAU,EAAIA,EAAc,IAAI5R,KAKlF,IAAIkS,EAAW,GACXC,EAAW,GACXC,EAAe,GAEnB,GAAkB,IAAdN,EACF,OAAQnC,EAAMC,OAAO7d,OACnB,IAAK,IAEHmgB,EAAW,IAAIlS,KAAK8R,GACpBI,EAASxD,QAAQ,GAIjByD,EAAWjP,IAAOgP,GAAUL,KAAK3O,IAAO/U,EAAMoH,mBAAoB,QAEhEvE,EAAc,WADZmhB,GAAY,EACY,IAAInS,KAAKkS,GAGT,IAAIlS,KAAK7R,EAAMoH,oBAE3CvE,EAAc,SAAU,IAAIgP,KAAK8R,IACjC3jB,EAAM2H,cACN,MACF,IAAK,IAEHsc,EAAelP,IAAO4O,GAAYG,SAAS,EAAG,UAAUI,IAAI,EAAG,QAAQlP,OAAO,cAC9E+O,EAAW,IAAIlS,KAAKoS,GACpBF,EAASxD,QAAQ,GAIjByD,EAAWjP,IAAOgP,GAAUL,KAAK3O,IAAO/U,EAAMoH,mBAAoB,QAEhEvE,EAAc,WADZmhB,GAAY,EACY,IAAInS,KAAKkS,GAGT,IAAIlS,KAAK7R,EAAMoH,oBAE3CvE,EAAc,SAAU,IAAIgP,KAAK8R,IACjC3jB,EAAM2H,cACN,MAEF,IAAK,IAEHsc,EAAelP,IAAO4O,GAAYG,SAAS,EAAG,UAAUI,IAAI,EAAG,QAAQlP,OAAO,cAC9E+O,EAAW,IAAIlS,KAAKoS,GACpBF,EAASxD,QAAQ,GAIjByD,EAAWjP,IAAOgP,GAAUL,KAAK3O,IAAO/U,EAAMoH,mBAAoB,QAEhEvE,EAAc,WADZmhB,GAAY,EACY,IAAInS,KAAKkS,GAGT,IAAIlS,KAAK7R,EAAMoH,oBAE3CvE,EAAc,SAAU,IAAIgP,KAAK8R,IACjC3jB,EAAM2H,cACN,MACF,IAAK,IACHsc,EAAelP,IAAO4O,GAAYG,SAAS,GAAI,UAAUI,IAAI,EAAG,QAAQlP,OAAO,cAC/E+O,EAAW,IAAIlS,KAAKoS,GACpBF,EAASxD,QAAQ,GACjByD,EAAWjP,IAAOgP,GAAUL,KAAK3O,IAAO/U,EAAMoH,mBAAoB,QAEhEvE,EAAc,WADZmhB,GAAY,EACY,IAAInS,KAAKkS,GAGT,IAAIlS,KAAK7R,EAAMoH,oBAE3CvE,EAAc,SAAU,IAAIgP,KAAK8R,IACjC3jB,EAAM2H,cACN,MACF,QACE9E,EAAc,SAAU,IACxBA,EAAc,WAAY,IAC1B7C,EAAM2H,cAGd,MACS3H,EAAMiH,aAAe,GAA0B,MAArBjH,EAAMiH,aACvCya,IACF,EACA1d,SAAA,CAEFC,cAAA,UAAQL,MAAM,GAAEI,SAAC,wBACjBC,cAAA,UAAQL,MAAM,IAAGI,SAAC,iBAClBC,cAAA,UAAQL,MAAM,IAAGI,SAAC,kBAClBC,cAAA,UAAQL,MAAM,IAAGI,SAAC,kBAClBC,cAAA,UAAQL,MAAM,IAAGI,SAAC,gBAClBC,cAAA,UAAQL,MAAM,IAAGI,SAAC,cAEnB8c,EAAO/e,WAAagf,EAAQhf,UAC3BkC,cAAA,QAAMC,UAAU,WAAUF,SAAE8c,EAAO/e,YACjC,UAGRkC,cAAA,OAAKC,UAAU,qBAAoBF,SACjCF,eAAA,OAAKI,UAAU,eAAcF,SAAA,CAC3BC,cAACkgB,IAAU,CACTjF,KAAK,WACLkF,WAAW,gBACXC,gBAAgB,OAChBC,mBAAiB,EACjBC,kBAAgB,EAChBC,mBAAiB,EACjBC,kBAAgB,EAChB9S,QAASoD,IAAOpD,IAAS+R,KAAK3O,IAAO/U,EAAMoH,mBAAoB,QAAU,EAAI,IAAIyK,KAAKF,IAAW,IAAIE,KAAK7R,EAAMoH,mBAEhH0K,QAAkC,MAAxB9R,EAAMsH,gBAAkD,IAAxBtH,EAAMsH,gBAA4CyN,IAAO/U,EAAMsH,gBAAgBoc,KAAK3O,IAAOjD,IAAU,QAAU,EAAjF,IAAID,KAAKC,IAAgG,IAAID,KAAK7R,EAAMsH,gBAChMpD,UAAU,eACVwgB,aAAa,SACb1f,SAAWpB,IACL5D,EAAMiH,YAAc,GACtBpE,EAAc,WAAYe,GAC1Bod,EAAgB,YAChBne,EAAc,YAAa,GAC3B6L,IAAmB,IAEZ1O,EAAMiH,aAAe,GAA0B,MAArBjH,EAAMiH,aACvCya,IACF,EAEFiD,SAAU7hB,EAAOlB,WAElBkf,EAAOlf,UAAYmf,EAAQnf,SAC1BqC,cAAA,QAAMC,UAAU,WAAUF,SAAE8c,EAAOlf,WACjC,UAGRqC,cAAA,OAAKC,UAAU,qBAAoBF,SACjCF,eAAA,OAAKI,UAAU,eAAcF,SAAA,CAC3BC,cAACkgB,IAAU,CACTjF,KAAK,SACLkF,WAAW,gBACXC,gBAAgB,KAChBC,mBAAiB,EACjBC,kBAAgB,EAChBC,mBAAiB,EACjBC,kBAAgB,EAEhB9S,QAASoD,IAAOpD,IAAS+R,KAAK3O,IAAO/U,EAAMoH,mBAAoB,QAAU,EAAI,IAAIyK,KAAKF,IAAW,IAAIE,KAAK7R,EAAMoH,mBAChH0K,QAAkC,MAAxB9R,EAAMsH,gBAAkD,IAAxBtH,EAAMsH,gBAA4CyN,IAAO/U,EAAMsH,gBAAgBoc,KAAK3O,IAAOjD,IAAU,QAAU,EAAjF,IAAID,KAAKC,IAAgG,IAAID,KAAK7R,EAAMsH,gBAChMpD,UAAU,eACVwgB,aAAa,SACb1f,SAAWpB,IACL5D,EAAMiH,YAAc,GACtBpE,EAAc,SAAUe,GACxBod,EAAgB,UAChBne,EAAc,YAAa,GAC3B6L,IAAmB,IAEZ1O,EAAMiH,aAAe,GAA0B,MAArBjH,EAAMiH,aACvCya,IACF,EAEFiD,SAAU7hB,EAAOjB,SAElBif,EAAOjf,QAAUkf,EAAQlf,OACxBoC,cAAA,QAAMC,UAAU,WAAUF,SAAE8c,EAAOjf,SACjC,aAKViC,eAAA,OAAKI,UAAU,MAAKF,SAAA,CAClBC,cAAA,OAAKC,UAAU,qBAAoBF,SACjCF,eAAA,OAAKI,UAAU,eAAcF,SAAA,CAC3BF,eAACud,IAAK,CACJnC,KAAK,WACLoC,UAAU,SACVpd,UAAW,gDAA+C6c,EAAQrf,UAAYof,EAAOpf,SAAW,aAAe,IAC/G6f,aAAa,MACb3d,MAAOd,EAAOpB,SACdsD,SAAUwc,IACJxhB,EAAMiH,YAAc,GACA,WAAtBua,EAAMC,OAAO7d,MAAqBf,EAAc,YAAa,KAAOA,EAAc,YAAa,KAC/FlB,GAAYkC,OAAS,EACrBhB,EAAc,WAAY2e,EAAMC,OAAO7d,OACvC8K,IAAmB,IAEZ1O,EAAMiH,aAAe,GAA0B,MAArBjH,EAAMiH,aACvCya,IACF,EACA1d,SAAA,CAEFC,cAAA,UAAQL,MAAM,GAAEI,SAAC,gBACjBC,cAAA,UAAQL,MAAM,YAAWI,SAAC,oBAC1BC,cAAA,UAAQL,MAAM,UAASI,SAAC,YACxBC,cAAA,UAAQL,MAAM,UAASI,SAAC,YACF,UAApBlB,EAAOrB,WAA8C,KAArByN,IAAiD,UAApBpM,EAAOrB,UAAwBwC,cAAA,UAAQL,MAAM,WAAUI,SAAC,aAAoB,KACrH,UAApBlB,EAAOrB,WAA8C,KAArB2N,IAAgD,UAApBtM,EAAOrB,UAAyBwC,cAAA,UAAQL,MAAM,WAAUI,SAAC,aAAoB,QAE5I8c,EAAOpf,UAAYqf,EAAQrf,SAC1BuC,cAAA,QAAMC,UAAU,WAAUF,SAAE8c,EAAOpf,WACjC,UAGRuC,cAAA,OAAKC,UAAU,qBAAoBF,SACjCF,eAAA,OAAKI,UAAU,eAAcF,SAAA,CAC3BF,eAACud,IAAK,CACJnC,KAAK,YACLoC,UAAU,SACVpd,UAAW,gDAA+C6c,EAAQjf,WAAagf,EAAOhf,UAAY,aAAe,IACjHyf,aAAa,MACb3d,MAAOd,EAAOhB,UACdkD,SAAUwc,IACJxhB,EAAMiH,YAAc,GACtBpE,EAAc,YAAa2e,EAAMC,OAAO7d,OACxCjC,GAAYkC,OAAS,EACrB6K,IAAmB,IAEZ1O,EAAMiH,aAAe,GAA0B,MAArBjH,EAAMiH,aACvCya,IACF,EACA1d,SAAA,CAEFC,cAAA,UAAQL,MAAM,GAAEI,SAAC,WACG,WAAnBlB,EAAOpB,SAAwBoC,eAAAC,WAAA,CAAAC,SAAA,CAAEC,cAAA,UAAQL,MAAM,IAAGI,SAAC,aAAiBC,cAAA,UAAQL,MAAM,IAAGI,SAAC,sBAA0B,OAAO,KACxHC,cAAA,UAAQL,MAAM,IAAGI,SAAC,YAEnB8c,EAAOhf,WAAaif,EAAQjf,UAC3BmC,cAAA,QAAMC,UAAU,WAAUF,SAAE8c,EAAOhf,YACjC,UAGPH,IAAeA,GAAYkC,OAAS,EACnCI,cAAA,OAAKC,UAAU,qBAAoBF,SACjCC,cAAA,OAAKC,UAAU,eAAcF,SAC3BF,eAAC8d,IAAS,CAAA5d,SAAA,CACRC,cAAC4d,IAAS,CACRC,YAAgC,WAAnBhf,EAAOpB,SAAwB,oBAAsB,oBAClEwd,KAAK,cACL6C,QAAS9T,GACT+T,SAAO,EACPC,iBAAkBA,IAAMnf,EAAOnB,aAAemB,EAAOnB,YAAYkC,QAAU,GAC3Eqe,iBAAkBA,IAAM,iBACxBpD,WAAY,CAAEC,SAAUF,IACxBsD,cAAgBC,GAAapiB,EAAMiH,YAAc,EAAIsX,GAAkB6D,EAAUtf,EAAQ,IAAM,KAC/FkC,SAAWqd,IAET,GAAIriB,EAAMiH,YAAc,EAAG,CACzB,IAAIqb,EAAW,GACXsC,EAAW,GACXC,GAAiB,EACrBnW,IAAmB,GACnB2T,EAAejK,SAASrB,IACtBuL,EAAS5L,KAAKK,EAAKnT,OACI,aAAnBd,EAAOpB,WACTmjB,GAAiB,EACnB,IAEoB,GAAlBA,IACFD,EAAS,GAAK,CAAEnC,SAAU,GAAI/gB,SAAU,GAAII,UAAW,GAAIH,YAAa,IACxEkB,EAAc,eAAgB+hB,IAEhC/hB,EAAc,cAAeyf,EAC/B,MACStiB,EAAMiH,aAAe,GAA0B,MAArBjH,EAAMiH,aACvCya,IACF,EAEFa,aAAc5gB,KAGfmf,EAAOnf,aAAeof,EAAQpf,YAC7BsC,cAAA,QAAMC,UAAU,WAAUF,SAAE8c,EAAOnf,cACjC,YAGD,QAKbsC,cAAA,OAAKC,UAAU,MAAKF,SACjB/B,GAAaa,EAAQge,EAAQC,EAASC,EAAiBne,EAAeoe,cAGxE7X,EAAe,KACdnF,cAAA,OAAKC,UAAU,MAAKF,SAClBF,eAAA,OAAKI,UAAU,qBAAoBF,SAAA,CACjCC,cAAA,UAAQa,KAAK,QAAQZ,UAAU,kBAC7BC,QAAUqd,IA32FlBsD,EAACjiB,EAAeC,KAClC0H,GAAgB,IAChBV,EAAgB,IAChBwH,GAAe,IACfE,GAA2B,IAC3B3O,EAAc,WAAY,IAC1BA,EAAc,SAAU,IACxBA,EAAc,cAAe,IAC7BA,EAAc,cAAe,IAC7BA,EAAc,YAAa,IAC3BA,EAAc,WAAY,IAC1BA,EAAc,YAAa,IAC3BA,EAAc,YAAa,IAC3BmL,GAAkB,IAClB5D,EAAe,GACftH,EAAOrB,UAAY,GACnBqB,EAAOpB,SAAW,GAClBoB,EAAOhB,UAAY,GACnBgB,EAAOlD,YAAc,GACrBkD,EAAOnB,YAAc,GACrBmB,EAAOjB,OAAS,GAChBiB,EAAOlB,SAAW,GAClBkB,EAAOf,UAAY,GAEnB6I,GAAoB,IACpBI,GAAoB,IACpBI,GAAsB,IACtBE,GAA2B,IAC3BU,GAAkB,IAClB8B,GAAwB,IACxBpC,GAAqB,IACrBE,GAA0B,IAC1B4B,GAAwB,IACxBsB,GAAmB,IAEnB5G,aAAa2Y,WAAW,eACxBvU,GAAY,IACZ2C,GAAe,IACfiE,QAAQC,IAAI,cAAerQ,EAAO,EAs0FNgiB,CAAYjiB,EAAeC,EAAO,EAClCkB,SAAC,UAAc,QACnBC,cAAA,UAAQa,KAAK,SACXigB,SAAUtW,GACVtK,QAAUqd,IACRA,EAAMwD,iBACN1Y,GAAY,IACZzJ,EAAc,cAAc,GAC5BwgB,GAAc,EACbnf,UAAU,kBAAiBF,SAAC,kBAIlC,OAOduG,IAAgBA,GAAa9I,WAAaoI,EAAahG,OAAS,EAC/DC,eAAA,OAAKI,UAAU,qBAAoBF,SAAA,CACjCC,cAAA,OAAKC,UAAU,wBAAuBF,SAEpCF,eAAA,MAAAE,SAAA,CAAI,oBAAkBuG,GAAa9I,UAAUrB,cAAc,iBACxD2U,IAAOxK,GAAa3I,UAAUoT,OAAO,eAAe,OAAKD,IAAOxK,GAAa1I,QAAQmT,OAAO,oBAG9E,GAAlBzG,GACCzK,eAAAC,WAAA,CAAAC,SAAA,CACEC,cAAA,OAAKC,UAAU,gCAA+BF,SAC5CF,eAAA,OAAKI,UAAU,OAAMF,SAAA,CACnBF,eAAA,OAAKI,UAAU,4BAA2BF,SAAA,CACxCC,cAAA,OAAKC,UAAU,SAAQF,SACrBC,cAAA,QAAMC,UAAU,uCAAsCF,SACpDC,cAAA,KAAGC,UAAU,uDAGjBJ,eAAA,OAAKI,UAAU,UAASF,SAAA,CACtBC,cAAA,KAAGC,UAAU,uBAAsBF,SAAC,WACpCC,cAAA,MAAIC,UAAU,YAAWF,SAAE+H,GAAelI,eAG7C8I,IACC1I,cAAA,OAAKC,UAAU,YAAWF,SACxBC,cAAA,OAAKC,UAAU,kBAKvBD,cAAA,OAAKC,UAAU,oBAAmBF,SAChCF,eAAA,OAAKI,UAAU,OAAMF,SAAA,CACnBF,eAAA,OAAKI,UAAU,4BAA2BF,SAAA,CACxCC,cAAA,OAAKC,UAAU,SAAQF,SACrBC,cAAA,QAAMC,UAAU,uCAAsCF,SACpDC,cAAA,KAAGC,UAAU,qDAGjBJ,eAAA,OAAKI,UAAU,UAASF,SAAA,CACtBC,cAAA,KAAGC,UAAU,uBAAsBF,SAAC,mBACpCC,cAAA,MAAIC,UAAU,YAAWF,SAAEmG,UAG9BkD,IACCpJ,cAAA,OAAKC,UAAU,YAAWF,SACxBC,cAAA,OAAKC,UAAU,kBAKvBD,cAAA,OAAKC,UAAU,oBAAmBF,SAChCF,eAAA,OAAKI,UAAU,OAAMF,SAAA,CACnBF,eAAA,OAAKI,UAAU,4BAA2BF,SAAA,CACxCC,cAAA,OAAKC,UAAU,SAAQF,SACrBC,cAAA,QAAMC,UAAU,uCAAsCF,SACpDC,cAAA,KAAGC,UAAU,uDAGjBJ,eAAA,OAAKI,UAAU,UAASF,SAAA,CACtBF,eAAA,KAAGI,UAAU,uBAAsBF,SAAA,CAAC,IAAe,KAAbvC,GAAmB,yBAA2B,uBACpFwC,cAAA,MAAIC,UAAU,YAAWF,SAAEyH,GAAkB5H,eAGhDgJ,IACC5I,cAAA,OAAKC,UAAU,YAAWF,SACxBC,cAAA,OAAKC,UAAU,kBAKK,UAA1BqG,GAAa9I,WAA8C,KAArB2N,IAAsD,UAA1B7E,GAAa9I,UAC/EwC,cAAA,OAAKC,UAAU,oBAAmBF,SAChCF,eAAA,OAAKI,UAAU,OAAMF,SAAA,CACnBF,eAAA,OAAKI,UAAU,4BAA2BF,SAAA,CACxCC,cAAA,OAAKC,UAAU,SAAQF,SACrBC,cAAA,QAAMC,UAAU,uCAAsCF,SACpDC,cAAA,KAAGC,UAAU,qDAGjBJ,eAAA,OAAKI,UAAU,UAASF,SAAA,CACtBC,cAAA,KAAGC,UAAU,uBAAsBF,SAAC,aACpCC,cAAA,MAAIC,UAAU,YAAWF,SAAE+G,IAAoBA,GAAiBlH,eAGnEsJ,IACClJ,cAAA,OAAKC,UAAU,YAAWF,SACxBC,cAAA,OAAKC,UAAU,kBAId,KACiB,UAA1BqG,GAAa9I,WAA8C,KAArByN,IAAuD,UAA1B3E,GAAa9I,UAChFwC,cAAA,OAAKC,UAAU,oBAAmBF,SAChCF,eAAA,OAAKI,UAAU,OAAMF,SAAA,CACnBF,eAAA,OAAKI,UAAU,4BAA2BF,SAAA,CACxCC,cAAA,OAAKC,UAAU,SAAQF,SACrBC,cAAA,QAAMC,UAAU,uCAAsCF,SACpDC,cAAA,KAAGC,UAAU,wDAGjBJ,eAAA,OAAKI,UAAU,UAASF,SAAA,CACtBC,cAAA,KAAGC,UAAU,uBAAsBF,SAAC,aACpCC,cAAA,MAAIC,UAAU,YAAWF,SAAE2G,IAAoBA,GAAiB9G,eAInEoJ,IACChJ,cAAA,OAAKC,UAAU,YAAWF,SACxBC,cAAA,OAAKC,UAAU,kBAId,QAGbJ,eAAA,OAAKI,UAAU,kCAAiCF,SAAA,CAC9CC,cAAA,KAAAD,SAAG,SACHC,cAAA,KAAAD,SAAG,SACHC,cAAA,OAAKzD,IAAKykB,EAAQ,KAA6BC,UAC/CjhB,cAAA,MAAAD,SAAIC,cAAA,KAAAD,SAAG,0CACPC,cAAA,MAAAD,SAAI,2BAIR,KAEJC,cAACkhB,IAAS,CAAAnhB,SACRC,cAAA,OAAKmhB,MAAM,UAASphB,SAClBC,cAAA,UAAQC,UAAU,iCAAiCC,QAASA,IAAMyF,GAAWD,GAAQ3F,SAACC,cAAA,KAAGC,UAAU,qDAKvGD,cAAA,OAAK5B,IAAKoH,IAITsE,GAAelK,OAAS,EACT,MAAdpC,GACEwC,cAACohB,IAAe,CACdxP,YAAaA,GACbhM,aAAcA,EACdE,MAAOA,EACPE,KAAMA,EACNC,QAASA,EACTwK,kBAAmBA,GACnBvK,YAAaA,EACbE,cAAeA,EACfmC,iBAAkBA,GAClBE,eAAgBA,GAChBH,cAAeA,GACfE,YAAaA,GACb8G,aAAcA,GACdtQ,UAAWA,GACX8K,eAAgBA,GAChBoG,UAAWA,GACXnL,UAAWqD,IAAsBrD,EACjCxC,MAAOxG,EAAMiJ,SAASzC,MACtBqQ,oBAAqBA,GACrBlM,iBAAkBA,GAClB/K,YAAaA,GACb0lB,eAAgBtlB,EAAMiJ,SAASzC,OAASxG,EAAMiJ,SAASzC,MAAM+e,WAAavlB,EAAMiJ,SAASzC,MAAM+e,WAAa,GAC5GrW,kBAAmBA,GACnBE,kBAAmBA,GACnBgD,kBAAmBA,KAGrBnO,cAACuhB,IAAe,CACd3P,YAAaA,GACbhM,aAAcA,EACdE,MAAOA,EACPE,KAAMA,EACNC,QAASA,EACTwK,kBAAmBA,GACnBvK,YAAaA,EACbE,cAAeA,EACfmC,iBAAkBA,GAClBE,eAAgBA,GAChBH,cAAeA,GACfE,YAAaA,GACb8G,aAAcA,GACdtQ,UAAWA,GACX8K,eAAgBA,GAChBoG,UAAWA,GACXnL,UAAWqD,IAAsBrD,EACjCxC,MAAOxG,EAAMiJ,SAASzC,MACtBqQ,oBAAqBA,GACrBlM,iBAAkBA,GAClB/K,YAAaA,GACb0lB,eAAgBtlB,EAAMiJ,SAASzC,OAASxG,EAAMiJ,SAASzC,MAAM+e,WAAavlB,EAAMiJ,SAASzC,MAAM+e,WAAa,GAC5GrW,kBAAmBA,GACnBE,kBAAmBA,GACnBgD,kBAAmBA,KAElB7D,GAAiBtK,cAAA,OAAAD,SAAKC,cAAA,MAAAD,SAAI,uBAA8B,UAIlE2F,GAAU1F,cAACwhB,IAAa,CAACC,gBAAiB9b,EACzCe,iBAAkBA,GAClBI,iBAAkBA,GAClBI,mBAAoBA,GACpBE,wBAAyBA,GACzBI,kBAAmBA,GACnBE,uBAAwBA,GACxBI,eAAgBA,GAChBwB,qBAAsBA,GACtBE,iBAAkBA,GAClB3I,KAAMyF,GAAa9I,UACnB7B,YAAa2K,GAAa3K,YAC1Bue,aAAcA,GACdlT,eAAgBA,GAChBM,oBAAqBA,GACrBM,WAAYA,GACZpB,aAAcA,GACdI,aAAcA,GACdoB,eAAgBA,GAChBE,oBAAqBA,GACrB0B,qBAAsBA,GACtBF,iBAAkBA,GAClB2Q,iBAAkBA,GAClBqH,YAvoDa/e,IACnBgI,GAA4B,GAC5BN,GAAgB,KAChB6P,GAAavX,EAAK,EAqoDZmI,YAAaA,GACbF,gBAAiBA,GACjBxC,SAAUA,GACV6C,kBAAmBA,GACnBE,kBAAmBA,GACnBI,gBAAiBA,GACjBE,wBAAyBA,GACzBE,aAAcA,GACdgW,iBAAkB9V,GAClBE,gBAAiBA,GACjB6V,oBAAqB3V,QAIzBjM,cAAA,OAAKkT,GAAG,YAAY2O,QAAQ,EAAK9hB,SAC9BgO,IAAiBA,GAAcnO,OAAS,EAAII,cAAC8hB,IAAgB,CAAC/T,cAAeA,GAAevQ,UAAWA,GAAW7B,YAAaA,KAAkB,OAGpJkE,eAACQ,IAAK,CACJC,KAAMtB,GACNuB,OAAQgO,GACRwT,SAAS,SACTC,UAAU,EAAMjiB,SAAA,CAEhBC,cAACK,IAAMI,OAAM,CAACC,aAAW,EAAAX,SACvBC,cAACK,IAAMM,MAAK,CAAAZ,SAAC,kBAEfC,cAACK,IAAMO,KAAI,CAAAb,SACTF,eAAA,OAAKI,UAAU,MAAKF,SAAA,CAClBF,eAAA,OAAKI,UAAU,YAAWF,SAAA,CACxBC,cAAA,SAAAD,SAAO,eACPF,eAAA,UAAQI,UAAU,eAAe7B,IAAKiO,GACpCtL,SAAWmX,IAx6GMA,KACP,gBAAlBA,EAAEsF,OAAO7d,MACX8N,IAAyB,GAEtBA,IAAyB,EAAM,EAo6GLwU,CAAsB/J,EAAE,EAAGnY,SAAA,CAC9CC,cAAA,UAAAD,SAAS,eACTC,cAAA,UAAQL,MAAM,eAAcI,SAAC,yBAC5BiN,GAAcvN,KAAI,CAACyiB,EAAInP,IAEpB/S,cAAA,UAAoBL,MAAOuiB,EAAGhP,GAAGnT,SAAEmiB,EAAGjH,MAAzBlI,QAIlBjG,IAAY9M,cAAA,KAAGC,UAAU,QAAOF,SAAE+M,QAEpCU,GACC3N,eAAA,OAAKI,UAAU,YAAWF,SAAA,CACxBC,cAAA,SAAAD,SAAO,wBACPC,cAAA,SAAOa,KAAK,OAAOoa,KAAK,QAAQ7c,IAAKkO,GAAerM,UAAU,iBAC7D2M,IAAgB5M,cAAA,KAAGC,UAAU,QAAOF,SAAE6M,QAChC,KAEX/M,eAAA,OAAKI,UAAU,YAAWF,SAAA,CACxBC,cAAA,SAAAD,SAAO,WACPC,cAAA,SAAOa,KAAK,OAAOoa,KAAK,QAAQ7c,IAAK+N,GAAWlM,UAAU,iBACzDuM,IAAgBxM,cAAA,KAAGC,UAAU,QAAOF,SAAEyM,QAEzC3M,eAAA,OAAKI,UAAU,YAAWF,SAAA,CACxBC,cAAA,SAAAD,SAAO,iBACPC,cAAA,SAAOa,KAAK,OAAOoa,KAAK,QAAQ7c,IAAKgO,GAAUnM,UAAU,iBACxDyM,IAAe1M,cAAA,KAAGC,UAAU,QAAOF,SAAE2M,aAK5C7M,eAACQ,IAAM8hB,OAAM,CAAApiB,SAAA,CACXC,cAACoiB,IAAM,CAACC,QAAQ,YAAYniB,QAASqO,GAAYxO,SAAC,UAGlDC,cAACoiB,IAAM,CAACC,QAAQ,UAAUniB,QAASA,KAtiDjBoiB,MACxB,GAAIjW,GAAa9N,QAAQoB,OAAuC,gBAA9B0M,GAAa9N,QAAQoB,MACrD,GAAK0M,GAAa9N,QAAQoB,OAAU2M,GAAc/N,QAAQoB,OAAUwM,GAAU5N,QAAQoB,OAAUyM,GAAS7N,QAAQoB,MAiB5G,CACH,MAAMwQ,EAAW,CACf,KAAQ7D,GAAc/N,QAAQoB,MAC9B,UAAa,KAEfyQ,YAAS,CACPzB,OAAQ,OACRC,IAAK,iCACLjM,KAAM0B,KAAKwK,UAAUsB,GACrBrB,QAAS,CACP,eAAgB,sBAGjBC,MAAKC,IACJmL,GAAiBnL,EAAIrM,KAAK,IAE3BwM,OAAMC,IACLH,QAAQC,IAAI,MAAOE,EAAI,GAE7B,MAnCO/C,GAAa9N,QAAQoB,MAEnBoN,GAAU,IADfA,GAAU,gCAGPT,GAAc/N,QAAQoB,MAEpBkN,GAAa,IADlBA,GAAa,+BAGVV,GAAU5N,QAAQoB,MAEhB8M,GAAc,IADnBA,GAAc,sBAGXL,GAAS7N,QAAQoB,MAEfgN,GAAa,IADlBA,GAAa,iCAyBZN,GAAa9N,QAAQoB,OAAUwM,GAAU5N,QAAQoB,OAAUyM,GAAS7N,QAAQoB,MAc/Ewa,MAbK9N,GAAa9N,QAAQoB,OAAuC,cAA9B0M,GAAa9N,QAAQoB,MAEjDoN,GAAU,IADfA,GAAU,+BAGPZ,GAAU5N,QAAQoB,MAEhB8M,GAAc,IADnBA,GAAc,sBAGXL,GAAS7N,QAAQoB,MAEfgN,GAAa,IADlBA,GAAa,4BAMnB,EA8+CQ2V,EAAmB,EACnBviB,SAAC,mBAGN,I","file":"static/js/7.1bedbff1.chunk.js","sourcesContent":["import * as React from 'react';\n\nconst DEFAULT_CDN_URL =\n  'https://cdn.jsdelivr.net/gh/lipis/flag-icons/flags/4x3/';\nconst DEFAULT_CDN_SUFFIX = 'svg';\n\n// offset between uppercase ascii and regional indicator symbols\nconst OFFSET = 127397;\n\ninterface EmojiProps extends React.HTMLAttributes<HTMLSpanElement> {\n  cdnSuffix?: string;\n  cdnUrl?: string;\n  countryCode: string;\n  style?: React.CSSProperties;\n  svg?: false;\n}\n\ninterface ImgProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  cdnSuffix?: string;\n  cdnUrl?: string;\n  countryCode: string;\n  style?: React.CSSProperties;\n  svg?: true;\n}\n\nexport type ReactCountryFlagProps = EmojiProps | ImgProps;\n\nexport const ReactCountryFlag = ({\n  cdnSuffix = DEFAULT_CDN_SUFFIX,\n  cdnUrl = DEFAULT_CDN_URL,\n  countryCode,\n  style,\n  svg = false,\n  ...props\n}: ReactCountryFlagProps) => {\n  if (typeof countryCode !== 'string') {\n    return null;\n  }\n\n  if (svg) {\n    const flagUrl = `${cdnUrl}${countryCode.toLowerCase()}.${cdnSuffix}`;\n\n    return (\n      <img\n        {...props}\n        src={flagUrl}\n        style={{\n          display: 'inline-block',\n          width: '1em',\n          height: '1em',\n          verticalAlign: 'middle',\n          ...style,\n        }}\n      />\n    );\n  }\n\n  const emoji = countryCode\n    .toUpperCase()\n    .replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + OFFSET));\n\n  return (\n    <span\n      role=\"img\"\n      {...props}\n      style={{\n        display: 'inline-block',\n        fontSize: '1em',\n        lineHeight: '1em',\n        verticalAlign: 'middle',\n        ...style,\n      }}\n    >\n      {emoji}\n    </span>\n  );\n};\n\nexport default ReactCountryFlag;\n","import React, { useState, useRef, useCallback, useEffect, Fragment } from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\n// import { DatePicker, Space } from 'antd';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport 'react-datepicker/dist/react-datepicker-cssmodules.min.css'\nimport DropdownMultiselect from \"react-multiselect-dropdown-bootstrap\";\nimport { MultiSelect } from \"react-multi-select-component\";\n// import beData from \"../assets/data/IMP-BE2.json\";\nimport moment from 'moment';\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\nimport Axios from '../shared/Axios';\nimport { Field, Formik, Form, FieldArray } from 'formik';\nimport { Button, Modal, FormGroup } from 'react-bootstrap';\nimport * as Yup from \"yup\";\nimport DataTableImport from '../components/DataTableImport';\nimport DataTableExport from '../components/DataTableExport';\nimport AdvanceSearch from '../components/AdvanceSearch';\nimport Swal from 'sweetalert2';\nimport AxiosACT from \"../shared/AxiosACT\";\nimport AxiosMaster from \"../shared/AxiosMaster\";\nimport AxiosUser from \"../shared/AxiosUser\";\nimport Select, { components } from 'react-select';\nimport { DropDownTreeComponent, ColumnsDirective, ColumnDirective, Filter, Sort, Reorder, Inject, ITreeData } from '@syncfusion/ej2-react-dropdowns';\nimport Creatable from 'react-select/creatable';\nimport * as ReactDOM from 'react-dom';\n// import { TagsInput } from \"react-tag-input-component\";\n// import ReactTags from \"react-tag-autocomplete\";\nimport {\n  checkGreaterTimes,\n  checkGreaterStartEndTimes\n} from \"../shared/validationFunctions\";\nimport Draggable from 'react-draggable';\nimport { loaderStart, loaderStop } from \"../store/actions/loader\";\nimport { updateSubscriptionCount, updateDownloadArrayCount, setDloadCountSubuser, setSearchQuery } from \"../store/actions/data\"\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router-dom';\nimport DloadTemplateXLS from '../components/DloadTemplateXLS'\nimport { testJson } from '../shared/JSONString'\nimport LoginCheck from '../shared/LoginCheck';\nimport ReactCountryFlag from \"react-country-flag\"\n\n\nlet initialValues = {\n  tradeType: \"\",\n  searchBy: \"\",\n  searchValue: \"\",\n  countryCode: \"\",\n  fromDate: \"\",\n  toDate: \"\",\n  matchType: \"\",\n  dateRange: \"\",\n  searchFlag: false,\n  queryBuilder: [],\n  SearchQueryCount: 0,\n  isMainSearch: false\n};\n\nlet treeSettings = { autoCheck: true };\n\nconst dateFormat = \"YYYY-MM-DD\";\nconst scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop)\n// const columnOptions = ['Date', 'HSCODE', 'Product Description', 'Value', 'Quantity', 'Unit', 'Port Of Destination', 'Foreign Country', 'Indian Company Name', 'Foreign Company Name']\n\n\n\nlet defaultCountry = []\n\n// -------country list show in modal 26.05.2025----------//\n\n\n\n\n// const CountrySelector = ({ multiTradeCountryList, selectedTradeCountry, setFieldValue, values, setSelectedTradeCountry, setMaxMinDate }) => {\n//   const [showModal, setShowModal] = useState(false);\n//   const [tempSelectedCountries, setTempSelectedCountries] = useState([]);\n\n//   // Synchronize tempSelectedCountries with selectedTradeCountry when it changes\n//   useEffect(() => {\n//     const selectedValues = selectedTradeCountry.map((country) => country.value);\n//     setTempSelectedCountries(selectedValues);\n//   }, [selectedTradeCountry]);\n\n//   const handleCheckboxChange = (shortcode) => {\n//     let updatedTempSelectedCountries;\n\n//     if (tempSelectedCountries.includes(shortcode)) {\n//       // Remove the country if it's already selected\n//       updatedTempSelectedCountries = tempSelectedCountries.filter((code) => code !== shortcode);\n//     } else {\n//       // Add the country if it's not selected\n//       updatedTempSelectedCountries = [...tempSelectedCountries, shortcode];\n//     }\n\n//     // Update the state and form values\n//     setTempSelectedCountries(updatedTempSelectedCountries);\n\n//     const updatedSelectedCountries = multiTradeCountryList.filter((country) =>\n//       updatedTempSelectedCountries.includes(country.value)\n//     );\n\n//     setSelectedTradeCountry(updatedSelectedCountries);\n//     setFieldValue(\"countryCode\", updatedTempSelectedCountries);\n//     setFieldValue(\"fromDate\", \"\");\n//     setFieldValue(\"toDate\", \"\");\n//     setFieldValue(\"dateRange\", \"\");\n//     setMaxMinDate(updatedSelectedCountries, values.tradeType);\n//   };\n\n//   const handleSelectAll = () => {\n//     const allCountryValues = multiTradeCountryList.map((country) => country.value);\n//     setTempSelectedCountries(allCountryValues);\n\n//     const updatedSelectedCountries = multiTradeCountryList;\n//     setSelectedTradeCountry(updatedSelectedCountries);\n//     setFieldValue(\"countryCode\", allCountryValues);\n//     setFieldValue(\"fromDate\", \"\");\n//     setFieldValue(\"toDate\", \"\");\n//     setFieldValue(\"dateRange\", \"\");\n//     setMaxMinDate(updatedSelectedCountries, values.tradeType);\n//   };\n\n//   const handleDeselectAll = () => {\n//     setTempSelectedCountries([]);\n//     setSelectedTradeCountry([]);\n//     setFieldValue(\"countryCode\", []);\n//     setFieldValue(\"fromDate\", \"\");\n//     setFieldValue(\"toDate\", \"\");\n//     setFieldValue(\"dateRange\", \"\");\n//     setMaxMinDate([], values.tradeType);\n//   };\n\n//   return (\n//     <>\n//       {/* Box displaying selected countries */}\n//       <div\n//         className=\"country-box countryModal\"\n//         onClick={() => setShowModal(true)}\n//       >\n//         {selectedTradeCountry.length > 0\n//           ? selectedTradeCountry.map((country) => country.label).join(\", \")\n//           : \"Select Countries\"}\n//       </div>\n\n//       {/* Modal for country selection */}\n//       <Modal show={showModal} onHide={() => setShowModal(false)} size=\"lg\">\n//         <Modal.Header closeButton>\n//           <Modal.Title>Select Countries</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <div className=\"row mb-3\">\n//             <div className=\"col-md-6\">\n//               <Button variant=\"primary\" onClick={handleSelectAll}>\n//                 Select All\n//               </Button>\n//             </div>\n//             <div className=\"col-md-6 text-right\">\n//               <Button variant=\"secondary\" onClick={handleDeselectAll}>\n//                 Deselect All\n//               </Button>\n//             </div>\n//           </div>\n//           <div\n//             className=\"row countryModal_row\">\n//             {multiTradeCountryList.map((country) => (\n//               <div key={country.value} className=\"col-md-4 mb-3\">\n//                 <div\n//                   className=\"d-flex align-items-center countryModal_data_div\">\n//                   <input\n//                     type=\"checkbox\"\n//                     checked={tempSelectedCountries.includes(country.value)}\n//                     onChange={() => handleCheckboxChange(country.value)}\n//                   />\n//                   <label>{country.label}</label>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         </Modal.Body>\n//       </Modal>\n//     </>\n//   );\n// };\n\n\nconst CountrySelector = ({ multiTradeCountryList, selectedTradeCountry, setFieldValue, values, setSelectedTradeCountry, setMaxMinDate }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [tempSelectedCountries, setTempSelectedCountries] = useState([]);\n  const [selectAll, setSelectAll] = useState(false); // State to track \"Select All\" checkbox\n\n  // Synchronize tempSelectedCountries with selectedTradeCountry when it changes\n  useEffect(() => {\n    const selectedValues = selectedTradeCountry.map((country) => country.value);\n    setTempSelectedCountries(selectedValues);\n    setSelectAll(selectedValues.length === multiTradeCountryList.length); // Update \"Select All\" checkbox state\n  }, [selectedTradeCountry, multiTradeCountryList]);\n\n  const handleCheckboxChange = (shortcode) => {\n    let updatedTempSelectedCountries;\n\n    if (tempSelectedCountries.includes(shortcode)) {\n      // Remove the country if it's already selected\n      updatedTempSelectedCountries = tempSelectedCountries.filter((code) => code !== shortcode);\n    } else {\n      // Add the country if it's not selected\n      updatedTempSelectedCountries = [...tempSelectedCountries, shortcode];\n    }\n\n    // Update the state and form values\n    setTempSelectedCountries(updatedTempSelectedCountries);\n\n    const updatedSelectedCountries = multiTradeCountryList.filter((country) =>\n      updatedTempSelectedCountries.includes(country.value)\n    );\n\n    setSelectedTradeCountry(updatedSelectedCountries);\n    setFieldValue(\"countryCode\", updatedTempSelectedCountries);\n    setFieldValue(\"fromDate\", \"\");\n    setFieldValue(\"toDate\", \"\");\n    setFieldValue(\"dateRange\", \"\");\n    setMaxMinDate(updatedSelectedCountries, values.tradeType);\n\n    // Update \"Select All\" checkbox state\n    setSelectAll(updatedTempSelectedCountries.length === multiTradeCountryList.length);\n  };\n\n  const handleSelectAllChange = () => {\n    if (selectAll) {\n      // Deselect all\n      setTempSelectedCountries([]);\n      setSelectedTradeCountry([]);\n      setFieldValue(\"countryCode\", []);\n      setFieldValue(\"fromDate\", \"\");\n      setFieldValue(\"toDate\", \"\");\n      setFieldValue(\"dateRange\", \"\");\n      setMaxMinDate([], values.tradeType);\n    } else {\n      // Select all\n      const allCountryValues = multiTradeCountryList.map((country) => country.value);\n      setTempSelectedCountries(allCountryValues);\n\n      const updatedSelectedCountries = multiTradeCountryList;\n      setSelectedTradeCountry(updatedSelectedCountries);\n      setFieldValue(\"countryCode\", allCountryValues);\n      setFieldValue(\"fromDate\", \"\");\n      setFieldValue(\"toDate\", \"\");\n      setFieldValue(\"dateRange\", \"\");\n      setMaxMinDate(updatedSelectedCountries, values.tradeType);\n    }\n\n    setSelectAll(!selectAll); // Toggle \"Select All\" checkbox state\n  };\n\n  const getDisplayText = () => {\n    if (selectedTradeCountry.length <= 2) {\n      return selectedTradeCountry.map((country) => country.label).join(\", \");\n    }\n    return `${selectedTradeCountry[0].label}, ${selectedTradeCountry[1].label}, ...`;\n  };\n\n  return (\n    <>\n      {/* Box displaying selected countries */}\n      <div\n        className=\"country-box countryModal\"\n        onClick={() => setShowModal(true)}\n      >\n        {selectedTradeCountry.length > 0 ? getDisplayText() : \"Select Countries\"}\n      </div>\n\n      {/* Modal for country selection */}\n      <Modal show={showModal} onHide={() => setShowModal(false)} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Select Countries</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row mb-3\">\n            <div className=\"col-md-12\">\n              <div className=\"d-flex align-items-center countryModal_data_div\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectAll}\n                  onChange={handleSelectAllChange}\n                  // style={{ width: \"20px\", height: \"20px\", marginRight: \"10px\" }}\n                />\n                <label>Select All</label>\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"row countryModal_row\"\n          >\n            {multiTradeCountryList.map((country) => (\n              <div key={country.value} className=\"col-md-4 mb-3\">\n                <div\n                  className=\"d-flex align-items-center countryModal_data_div\"\n                >\n                  <input\n                    type=\"checkbox\"\n                    checked={tempSelectedCountries.includes(country.value)}\n                    onChange={() => handleCheckboxChange(country.value)}\n                  />\n                  <label>\n                    <ReactCountryFlag\n                      className=\"emojiFlag\"\n                      countryCode={country.iso2code}\n                      style={{\n                        fontSize: '1.5em',\n                        lineHeight: '2em',\n                        paddingRight: '5px'\n                      }}\n                      aria-label=\"United States\"\n                    />\n                    {country.label}</label>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Modal.Body>\n\n      </Modal>\n    </>\n  );\n};\n\n// -------country list show in modal 26.05.2025----------//\n\n\nconst validateForm = Yup.object().shape({\n  tradeType: Yup.string().required(\"Please select trade type\"),\n  searchBy: Yup.string().required(\"This field is required\"),\n  matchType: Yup.string().required(\"This field is required\"),\n  dateRange: Yup.string().required(\"This field is required\"),\n\n  //   searchValue: Yup.mixed().when(['searchBy'], {\n  //     is: (searchBy) => (searchBy == 'HS_CODE'),\n  //     then: Yup.array().of(Yup.string()\n  //     .matches(/^[0-9]*$/, function() {\n  //       return \"Enter valid number\"\n  //     }))\n  //     .required('Required'),\n  //     otherwise: Yup.array().of(Yup.string().matches(/^[A-Za-z0-9-_\\s]*$/, function() {\n  //       return \"Enter valid input\"\n  //     })).required('Required')\n  // }),\n  // countryCode: Yup.array().of(Yup.string().required(\"This field is required\")),    \n  fromDate: Yup.date().required(\"This field is required\")\n    .test(\n      \"checkGreaterStartEndTimes\",\n      \"From date should be less than To date\",\n      function (value) {\n        if (value) {\n          return checkGreaterStartEndTimes(value, this.parent.toDate);\n        }\n        return true;\n      }\n    ),\n  toDate: Yup.date().required(\"This field is required\")\n    .test(\n      \"checkGreaterStartEndTimes\",\n      \"To date should be greater than From date\",\n      function (value) {\n        if (value) {\n          return checkGreaterStartEndTimes(this.parent.fromDate, value);\n        }\n        return true;\n      }\n    )\n    .test(\n      \"checkGreaterTimes\",\n      \"To date should be less than 3 years\",\n      function (value) {\n        if (value) {\n          return checkGreaterTimes(this.parent.fromDate, value);\n        }\n        return true;\n      }\n    ),\n});\n\nconst tempOptions = [\n  { label: \"Option 1\", value: \"1\" },\n  { label: \"Option 2\", value: \"2\" },\n  { label: \"Option 3\", value: \"3\" },\n];\n\n\nconst List = (props) => {\n\n  const userId = localStorage.getItem(\"userToken\");\n  const user = localStorage.getItem(\"user\");\n  const loggedUser = user ? JSON.parse(user) : {};\n  const userName = `${loggedUser.firstname} ${loggedUser.lastname}`;\n  const userEmail = loggedUser.email;\n  const userId_new = loggedUser.uplineId > 0 ? loggedUser.uplineId : loggedUser.userid\n\n  const history = useHistory();\n  const search_id = props.location.state ? props.location.state.search_id : null;\n\n  // console.log(\"props ==== \", props)\n  const searchTypeValue = props.location.state && props.location.state.search_type ? props.location.state.search_type : \"\";\n  const workspace_id = props.location.state && props.location.state.workspace_id ? props.location.state.workspace_id : \"\";\n  const workspace_name = props.location.state ? props.location.state.workspace_name : \"\";\n  const workspace_desc = props.location.state ? props.location.state.workspace_desc : \"\";\n  const workspaceId = props.location.state ? props.location.state.workspaceId : \"\";\n  const newSearch = [{ \"value\": props && props.location.state && props.location.state.searchValue, \"label\": props && props.location.state && props.location.state.searchValue }];\n\n\n  const gridRef = useRef();\n\n  const [toggle, setToggle] = useState(false);\n  const [searchResult, setSearchResult] = useState([]);\n  const [limit, setLimit] = useState(20);\n  const [page, setPage] = useState(1);\n  const [totalRecord, setTotalRecord] = useState(0);\n  const [searchLoading, setSearchLoading] = useState(false);\n  const [searchParams, setSearchParams] = useState(initialValues.searchValue);\n  const [importerList, setImporterList] = useState([]);\n  const [importerDataList, setImporterDataList] = useState([]);\n  const [exporterList, setExporterList] = useState([]);\n  const [exporterDataList, setExporterDataList] = useState([]);\n  const [portOriginList, setPortOriginList] = useState([]);\n  const [portOriginDataList, setPortOriginDataList] = useState([]);\n  const [portDestinationDataList, setPortDestinationDataList] = useState([]);\n  const [portDestinationList, setPortDestinationList] = useState([]);\n  const [countryOriginList, setCountryOriginList] = useState([]);\n  const [countryDestinationList, setCountryDestinationList] = useState([]);\n  const [hsCodeList, setHsCodeList] = useState([]);\n  const [hsCodeDataList, setHsCodeDataList] = useState([]);\n  const [cityOriginList, setCityOriginList] = useState([]);\n  const [cityDestinationList, setCityDestinationList] = useState([]);\n  const [searchId, setSearchId] = useState();\n  const [orderByColumn, setOrderByColumn] = useState(\"\");\n  const [orderByMode, setOrderByMode] = useState(\"desc\");\n  const [hscodeLoading, isHscodeLoading] = useState(false);\n  const [portDestLoading, isPortDestLoading] = useState(false);\n  const [coLoading, isCoLoading] = useState(false);\n  const [importerLoading, isImporterLoading] = useState(false);\n  const [exporterLoading, isExporterLoading] = useState(false);\n  const [totalRecordLoading, isTotalRecordLoading] = useState(false);\n\n  const [shipmentModeDataList, setShipmentModeDataList] = useState([]);\n  const [shipmentModeList, setShipmentModeList] = useState([]);\n  const [hsCode4DigitList, setHsCode4digitList] = useState([])\n  const [hsCode4digitDataList, setHsCode4digitDataList] = useState([])\n  const [filteredColumn, setFilteredColumn] = useState([])\n  const [suggestions, setSuggestions] = useState([])\n  const [queryBuilderSuggestions, setQueryBuilderSuggestions] = useState([])\n  const [isDownloaded, setIsDownloaded] = useState(\"\");\n  const [noDataErrorMsg, setNoDataErrorMsg] = useState(false);\n  const [isSearchClicked, setIsSearchClicked] = useState(true);\n  const [previousTotalRecordCount, setPreviousTotalRecordCount] = useState(0);\n  const [stdUnitDataList, setStdUnitDataList] = useState([]);\n  const [stdUnitList, setStdUnitList] = useState([]);\n  const [countryCode, setCountryCode] = useState(\"\");\n  const [importerForExport, setImporterForExport] = useState(\"\");\n  const [exporterForImport, setExporterForImport] = useState(\"\");\n  const [returnSearchId, setReturnSearchId] = useState([]);\n\n  const [consumptionType, setConsumptionType] = useState([]);\n  const [consumptionTypeDataList, setConsumptionTypeDataList] = useState([]);\n  const [incotermList, setIncotermList] = useState([]);\n  const [incotermListData, setIncotermListData] = useState([]);\n  const [notifyPartyList, setNotifyPartyList] = useState([]);\n  const [notifyPartyListData, setNotifyPartyListData] = useState([]);\n  // const [fieldArray , setFieldArray] = useState([])\n\n\n\n  const sTitleRef = useRef();\n  const sDescRef = useRef();\n  const workspaceRef = useRef();\n  const sWorkspaceRef = useRef();\n  const [showModal, setShowModal] = useState(false);\n  const [tradeType, setTradeType] = useState(\"\");\n  const [sTitleError, isSTitleError] = useState(\"\");\n  const [sDescError, isSDescError] = useState(\"\");\n  const [sNewWsError, isNewWsError] = useState(\"\");\n  const [wsError, isWsError] = useState(\"\");\n  const [workspaceList, setWorkspaceList] = useState([]);\n  const [tradeCountryList, setTradeCountryList] = useState([]);\n  const [multiTradeCountryList, setMultiTradeCountryList] = useState([]);\n  const [selectedTradeCountry, setSelectedTradeCountry] = useState([])\n  const [searchValue, setSearchValue] = useState([]);\n  const [queryBuilderSearchValue, setQueryBuilderSearchValue] = useState([]);\n  const [showNewWorkspaceInput, setshowNewWorkspaceInput] = useState(false);\n  const [minDate, setMinDate] = useState(new Date());\n  const [maxDate, setMaxDate] = useState(new Date());\n  const [filteredArray, setFilteredArray] = useState([]);\n  const [countryWeightage, setCountryWeightage] = useState(1);\n\n  /* For country filter array after search */\n  const [filterCountryList, setFilterCountryList] = useState([]);\n  const [selectedFilterCountryList, setSelectedFilterCountryList] = useState([]);\n\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n    isSTitleError(\"\");\n    isSDescError(\"\");\n    isNewWsError(\"\");\n    isWsError(\"\")\n  }\n\n\n\n  const UpdateSubscription = (params) => {\n\n    AxiosUser({\n      method: \"PUT\",\n      url: `user-management/user-subscription/update/${props.subscriptionId}`,\n      data: JSON.stringify(params),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"user\", res.data);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n      });\n\n  }\n\n  useEffect(() => {\n    LoginCheck(history)\n  }, [props.loading, searchValue, workspaceList, searchLoading])\n\n  const UpdateUser = (params) => {\n\n    AxiosUser({\n      method: \"PUT\",\n      url: `user-management/user/${userId}`,\n      data: JSON.stringify(params),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"user\", res.data);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n      });\n\n  }\n\n  const UpdateDownloadTracher = (prevDownloadArray) => {\n\n    let DownloadArray = props.downloadArray\n\n    const params = {\n      \"userId\": userId_new,\n      \"downloadedRecords\": prevDownloadArray\n    }\n\n    AxiosACT({\n      method: \"POST\",\n      url: \"/activity-management/download-tracker/update\",\n      data: JSON.stringify(params),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"user\", res.data);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n      });\n\n  }\n\n  const setWorkspace = (val) => {\n    if (props.totalWorkspace > 0) {\n      Swal.fire({\n        title: 'Create Workspace !',\n        text: `Available Limit ${props.totalWorkspace}. \\n Are you sure you want to Create New Workspace ?`,\n        icon: 'warning',\n        dangerMode: true,\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n      }).then((isConfirm) => {\n        if (isConfirm.value) {\n          setShowModal(val)\n        }\n      })\n    }\n    else {\n      Swal.fire({\n        title: 'Create Workspace !',\n        text: \"Your Workspace Limit Exhausted\",\n        icon: 'error',\n        dangerMode: true,\n        confirmButtonColor: '#3085d6',\n      }).then((isConfirm) => { })\n    }\n  }\n\n\n  const saveQuery = () => {\n    const postData = {\n      \"workspace_id\": workspace_id,\n      \"search_id\": searchId,\n      \"name\": workspace_name,\n      \"description\": workspace_desc,\n      \"is_active\": \"Y\",\n      \"id\": workspaceId\n    }\n    AxiosACT({\n      method: \"POST\",\n      url: `/activity-management/workspace/savesearch`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        Swal.fire({\n          title: 'Success',\n          text: \"Search query saved successfully\",\n          icon: 'success',\n        })\n      })\n      .catch(err => {\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n        if (err.data.errorMsg) {\n          errorMsg = err.data.errorMsg;\n        }\n        Swal.fire({\n          title: 'Oops!',\n          text: errorMsg,\n          icon: 'error',\n        })\n      });\n  }\n\n  const handleWorkspaceChange = (e) => {\n    if (e.target.value == \"newWorkspace\") {\n      setshowNewWorkspaceInput(true)\n    }\n    else setshowNewWorkspaceInput(false)\n  }\n\n  useEffect(() => {\n    return () => {\n      initialValues = {}\n    }\n  }, [])\n\n  useEffect(() => {\n\n    if (searchParams && searchParams.tradeType) {\n      getPaginationSearchData(searchParams);\n    }\n    if (props && props.location.state && props.location.state.searchValue) {\n      setSearchValue(newSearch)\n    };\n\n    initialValues = {\n      ...initialValues,\n      tradeType: props && props.location.state && props.location.state.tradeType ? props.location.state.tradeType : \"\",\n      matchType: \"\",\n      searchBy: props && props.location.state && props.location.state.searchType ? props.location.state.searchType : \"\",\n      searchValue: props && props.location.state && props.location.state.searchType,\n      countryCode: props && props.location.state && props.location.state.countryCode,\n      fromDate: \"\",\n      toDate: \"\",\n      dateRange: \"\",\n      queryBuilder: []\n    };\n    if (props && props.location.state && props.location.state.tradeType) {\n      getTradingCountryList(props && props.location.state && props.location.state.tradeType == \"IMPORT\" ? \"I\" : \"E\")\n    }\n\n  }, [page, limit, orderByColumn, orderByMode])\n\n\n  const handleChangeLimit = dataKey => {\n    setPage(1);\n    setLimit(dataKey);\n  };\n\n\n\n  const mainSearch = (values) => {\n\n    console.log(\"values.searchValue >>>>>>>>>>>>>>>>>>>>>>>\", values.searchValue)\n    console.log(\"values >>>>>>>>>>>>>>>>>>>>>>>\", values)\n\n    if (values.searchValue && values.searchValue.length > 0) {\n      setIsSearchClicked(true)\n      setPortOriginList([])\n      setPortDestinationList([])\n      setHsCodeList([])\n      setHsCode4digitList([])\n      setImporterList([])\n      setExporterList([])\n      setCityOriginList([])\n      setCityDestinationList([])\n      setShipmentModeList([])\n      setStdUnitList([])\n      values.isMainSearch = true\n      // console.log(\"Submit values ==== \", values)\n      let checkValidErr = false\n      let errMsg = \"\"\n      if (values.searchBy == \"HS_CODE\") {\n        values.searchValue.map((item, index) => {\n          if (item.length < 2) {\n            checkValidErr = true\n            errMsg = \"Search Values should be greater than or equal to 2 digits\"\n          }\n        })\n      }\n      else {\n        values.searchValue.map((item, index) => {\n          if (item.length < 2) {\n            checkValidErr = true\n            errMsg = \"Search Values should be greater than or equal to 2 digits\"\n          }\n        })\n      }\n\n      if (values.queryBuilder.length > 0) {\n        values.queryBuilder.map((item, index) => {\n          if (item.searchBy == \"HS_CODE\") {\n            item.searchValue.length > 0 && item.searchValue.map((subitem, index) => {\n              if (subitem.length < 4) {\n                checkValidErr = true\n                errMsg = \"Search Values should be greater than or equal to 4 digits\"\n              }\n            })\n          }\n          else {\n            item.searchValue.length > 0 && item.searchValue.map((subitem, index) => {\n              if (subitem.length < 2) {\n                checkValidErr = true\n                errMsg = \"Search Values should be greater than or equal to 2 digits\"\n              }\n            })\n          }\n        })\n      }\n\n      if (checkValidErr == true) {\n        Swal.fire({\n          title: 'Alert !',\n          text: errMsg,\n          icon: 'error',\n          dangerMode: true,\n          confirmButtonColor: '#3085d6',\n        })\n      }\n      else {\n        props.loadingStart()\n        handleSearch(values)\n      }\n\n    }\n    else {\n      Swal.fire({\n        title: 'Alert !',\n        text: \"Enter Search Values\",\n        icon: 'error',\n        dangerMode: true,\n        confirmButtonColor: '#3085d6',\n      })\n    }\n\n  }\n\n  const handleSearch = (values, countryList = [], searchType = \"TRADE\") => {\n    setIsDownloaded(\"N\")\n\n    props.loadingStart()\n    var params = [];\n    params[\"searchType\"] = searchType;\n    params[\"tradeType\"] = values.tradeType;\n    params[\"searchBy\"] = values.searchBy;\n    params[\"searchValue\"] = values.searchValue;\n    params[\"countryCode\"] = values.countryCode;;\n    params[\"fromDate\"] = moment(values.fromDate).format(\"YYYY-MM-DD\");\n    params[\"toDate\"] = moment(values.toDate).format(\"YYYY-MM-DD\");\n    params[\"matchType\"] = values.matchType;\n    params[\"searchFlag\"] = values.searchFlag;\n    params[\"queryBuilder\"] = values.queryBuilder\n\n    if (values.portOriginList) {\n      setPortOriginList(values.portOriginList);\n      params[\"portOriginList\"] = values.portOriginList;\n    }\n    if (values.portDestinationList) {\n      setPortDestinationList(values.portDestinationList);\n      params[\"portDestinationList\"] = values.portDestinationList;\n    }\n    if (values.hsCodeList) {\n      setHsCodeList(values.hsCodeList);\n      params[\"hsCodeList\"] = values.hsCodeList;\n    }\n    if (values.hsCode4DigitList) {\n      setHsCode4digitList(values.hsCode4DigitList);\n      params[\"hsCode4DigitList\"] = values.hsCode4DigitList;\n    }\n    if (values.importerList) {\n      setImporterList(values.importerList);\n      params[\"importerList\"] = values.importerList;\n    }\n    if (values.exporterList) {\n      setExporterList(values.exporterList);\n      params[\"exporterList\"] = values.exporterList;\n    }\n    if (values.cityOriginList) {\n      setCityOriginList(values.cityOriginList);\n      params[\"cityOriginList\"] = values.cityOriginList;\n    }\n    if (values.cityDestinationList) {\n      setCityDestinationList(values.cityDestinationList);\n      params[\"cityDestinationList\"] = values.cityDestinationList;\n    }\n    if (values.shipmentModeList) {\n      setShipmentModeList(values.shipmentModeList);\n      params[\"shipmentModeList\"] = values.shipmentModeList;\n    }\n    if (values.stdUnitList) {\n      setStdUnitList(values.stdUnitList);\n      params[\"stdUnitList\"] = values.stdUnitList;\n    }\n\n    /* code add start on 23-04-2025 */\n\n    if (values.minQuantity) {\n      params[\"rangeQuantityStart\"] = values.minQuantity;\n    }\n    if (values.maxQuantity) {\n      params[\"rangeQuantityEnd\"] = values.maxQuantity;\n    }\n    if (values.minValue) {\n      params[\"rangeValueUsdStart\"] = values.minValue;\n    }\n    if (values.maxValue) {\n      params[\"rangeValueUsdEnd\"] = values.maxValue;\n    }\n    if (values.minUnitPrice) {\n      params[\"rangeUnitPriceUsdStart\"] = values.minUnitPrice;\n    }\n    if (values.maxUnitPrice) {\n      params[\"rangeUnitPriceUsdEnd\"] = values.maxUnitPrice;\n    }\n    if (values.consumptionTypeList) {\n      setConsumptionType(values.consumptionTypeList);\n      params[\"consumptionType\"] = values.consumptionTypeList;\n    }\n    if (values.incotermList) {\n      setIncotermList(values.incotermList);\n      params[\"incoterm\"] = values.incotermList;\n    }\n    if (values.notifyPartyList) {\n      setNotifyPartyList(values.notifyPartyList);\n      params[\"notifyParty\"] = values.notifyPartyList;\n    }\n    if (values.descriptionList) {\n      params[\"conditionProductDesc\"] = values.conditionProductDescription;\n      params[\"productDesc\"] = values.descriptionList;\n    }\n\n    /* code end on 23-04-2025 */\n\n    params[\"isMainSearch\"] = values.isMainSearch;\n\n    setSearchParams(params);\n    let lp = {\n      \"tradeType\": values.tradeType, \"searchBy\": values.searchBy, \"searchValue\": values.searchValue, \"countryCode\": values.countryCode,\n      \"fromDate\": moment(values.fromDate).format(\"YYYY-MM-DD\"), \"toDate\": moment(values.toDate).format(\"YYYY-MM-DD\"), \"matchType\": values.matchType\n    }\n    localStorage.setItem(\"searchParam\", JSON.stringify(lp));\n\n    if (searchId != \"\") {\n      setFilteredColumn([])\n      getSearchData(params, countryList);\n\n      // commented 05.04.2024\n\n      // getImporterList(params);\n      // getExporterList(params);\n      // getPortOriginList(params);\n      // getPortDestinationList(params);\n      // getHSCodeList(params);\n      // getIndianCityList(params);\n      // getForeignCountryList(params);\n      // getHSCode4digitList(params);\n      // getShipmentModeList(params);\n      // getStdUnitList(params);\n    }\n    else {\n      if (props.queryPerDay > 0) {\n        getSearchData(params);\n\n        // commented 05.04.2024\n\n        // getImporterList(params);\n        // getExporterList(params);\n        // getPortOriginList(params);\n        // getPortDestinationList(params);\n        // getHSCodeList(params);\n        // getIndianCityList(params);\n        // getForeignCountryList(params);\n        // getHSCode4digitList(params);\n        // getShipmentModeList(params);\n        // getStdUnitList(params);\n      }\n      else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n        props.loadingStop()\n        Swal.fire({\n          title: 'Search !',\n          text: \"Your Search Limit Exhausted\",\n          icon: 'error',\n          dangerMode: true,\n          confirmButtonColor: '#3085d6',\n        }).then((isConfirm) => {\n          // getImporterList(params);\n          // getExporterList(params);\n          // getPortOriginList(params);\n          // getPortDestinationList(params);\n          // getHSCodeList(params);\n          // getIndianCityList(params);\n          // getForeignCountryList(params);\n          // getHSCode4digitList(params);\n          // getShipmentModeList(params);\n        })\n      }\n    }\n\n  }\n\n\n  const resetSearch = (setFieldValue, values) => {\n    setSearchParams([]);\n    setSearchResult([]);\n    setSearchValue([]);\n    setQueryBuilderSearchValue([])\n    setFieldValue(\"fromDate\", \"\")\n    setFieldValue(\"toDate\", \"\")\n    setFieldValue(\"searchValue\", []);\n    setFieldValue(\"countryCode\", \"\");\n    setFieldValue(\"matchType\", \"\");\n    setFieldValue(\"searchBy\", \"\");\n    setFieldValue(\"tradeType\", \"\");\n    setFieldValue(\"dateRange\", \"\");\n    setFilteredColumn([]);\n    setTotalRecord(0);\n    values.tradeType = \"\"\n    values.searchBy = \"\"\n    values.matchType = \"\"\n    values.countryCode = \"\"\n    values.searchValue = \"\"\n    values.toDate = \"\"\n    values.fromDate = \"\"\n    values.dateRange = \"\"\n\n    setImporterDataList([]);\n    setExporterDataList([]);\n    setPortOriginDataList([]);\n    setPortDestinationDataList([]);\n    setHsCodeDataList([]);\n    setHsCode4digitDataList([]);\n    setCountryOriginList([]);\n    setCountryDestinationList([]);\n    setShipmentModeDataList([]);\n    setStdUnitDataList([]);\n\n    localStorage.removeItem(\"searchParam\");\n    setSearchId(\"\");\n    setCountryCode(\"\")\n    console.log(\"values === \", values)\n    //  window.resetFilter()\n  }\n\n\n  const exportToCSV = () => {\n    if (totalRecord * countryWeightage <= props.maxDownload) {\n      if (searchParams && searchParams.tradeType) {\n        const postData = {\n          \"searchType\": \"TRADE\",\n          \"tradeType\": searchParams.tradeType,\n          \"fromDate\": searchParams.fromDate,\n          \"toDate\": searchParams.toDate,\n          \"searchBy\": searchParams.searchBy,\n          \"searchValue\": searchParams.searchValue,\n          \"countryCode\": searchParams.countryCode,\n          \"pageNumber\": 0,\n          \"numberOfRecords\": Math.round(props.maxDownload / countryWeightage),\n          \"searchId\": \"\",\n          \"hsCodeList\": hsCodeList,\n          \"exporterList\": exporterList,\n          \"importerList\": importerList,\n          \"cityOriginList\": cityOriginList,\n          \"cityDestinationList\": cityDestinationList,\n          \"portOriginList\": portOriginList,\n          \"portDestinationList\": portDestinationList,\n          \"orderByColumn\": orderByColumn,\n          \"orderByMode\": orderByMode,\n          \"matchType\": searchParams.matchType,\n          \"hsCode4DigitList\": hsCode4DigitList,\n          \"queryBuilder\": searchParams.queryBuilder,\n          \"shipModeList\": shipmentModeList,\n          \"stdUnitList\": stdUnitList\n\n        }\n        Axios({\n          method: \"POST\",\n          url: `search-management/search`,\n          data: JSON.stringify(postData),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        })\n          .then(res => {\n            let exportDataSet = [];\n            // if (searchParams.tradeType.toLowerCase() === \"export\" && searchParams.countryCode.toUpperCase() != \"IND\" && searchParams.countryCode.toUpperCase() != \"SEZ\") {\n            //   exportDataSet = res.data.expForeignList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"export\" && searchParams.countryCode.toUpperCase() === \"IND\") {\n            //   exportDataSet = res.data.expIndList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"import\" && searchParams.countryCode.toUpperCase() != \"IND\" && searchParams.countryCode.toUpperCase() != \"SEZ\") {\n            //   exportDataSet = res.data.impForeignList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"import\" && searchParams.countryCode.toUpperCase() === \"IND\") {\n            //   exportDataSet = res.data.impIndList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"import\" && searchParams.countryCode.toUpperCase() === \"SEZ\") {\n            //   exportDataSet = res.data.impIndList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"export\" && searchParams.countryCode.toUpperCase() === \"SEZ\") {\n            //   exportDataSet = res.data.expIndList\n            // }\n            const countryCodes = searchParams.countryCode.map(code => code.toUpperCase());\n            const isIND = countryCodes.includes(\"IND\");\n            const isSEZ = countryCodes.includes(\"SEZ\");\n            const isForeign = !isIND && !isSEZ;\n\n            const tempTradeType = searchParams.tradeType.toLowerCase();\n\n            // if (tempTradeType === \"export\" && isForeign) {\n            //   exportDataSet = res.data.expForeignList;\n            // } else if (tempTradeType === \"export\" && isIND) {\n            //   exportDataSet = res.data.expIndList;\n            // } else if (tempTradeType === \"export\" && isSEZ) {\n            //   exportDataSet = res.data.expIndList;\n            // } else if (tempTradeType === \"import\" && isForeign) {\n            //   exportDataSet = res.data.impForeignList;\n            // } else if (tempTradeType === \"import\" && isIND) {\n            //   exportDataSet = res.data.impIndList;\n            // } else if (tempTradeType === \"import\" && isSEZ) {\n            //   exportDataSet = res.data.impIndList;\n            // }\n            // else {\n            //   exportDataSet = []\n            // }\n\n            /* change on 24-04-2025 */\n            if (tempTradeType === \"export\") {\n              exportDataSet = res.data.expForeignList;\n            } else if (tempTradeType === \"import\") {\n              exportDataSet = res.data.impForeignList;\n            } else {\n              exportDataSet = []\n            }\n            /* change on 24-04-2025 */\n\n            let filteredArray = []\n            const d = new Date();\n            for (let i = 0; i < exportDataSet.length; i++) {\n              let filtered = {};\n              let obj = exportDataSet[i];\n              // if(testJson.includes(obj[\"id\"])){\n              for (let key in obj) {\n                if (typeof (obj[key] == \"object\")) {\n                  let item = obj[key];\n                  if (item != null) {\n                    filtered[key] = obj[key];\n                  }\n                }\n              }\n              // }\n              // else{ console.log(\"Download values Not found ========= \", obj[\"id\"])}\n\n              filteredArray.push(filtered);\n            }\n            setFilteredArray(filteredArray)\n            // setTimeout(downloadXLS(searchParams,totalRecord,1), 5000)\n            downloadXLS(searchParams, 1, filteredArray)\n\n\n          })\n          .catch(err => {\n            console.log(\"Err == \", err);\n            setSearchLoading(false);\n          });\n      } else {\n        Swal.fire({\n          title: 'Alert!',\n          text: 'Please Search data first, then export',\n          icon: 'error',\n          confirmButtonText: 'OK'\n        })\n      }\n    }\n    else {\n      Swal.fire({\n        title: 'Alert!',\n        text: `You cannot download more than ${Math.round(props.maxDownload / countryWeightage)} records in a single search. Please refine your search criteria.`,\n        icon: 'error',\n        confirmButtonText: 'OK'\n      })\n    }\n  };\n\n  const exportSelectedToCSV = (checkedRowID) => {\n    let remainingDload = props.download_count - checkedRowID.length\n    let exportDataSet = [];\n    let filteredArray = []\n\n    searchResult.map((item, index) => {\n      checkedRowID.map((subItem, subIndex) => {\n        if (item.id == subItem) {\n          exportDataSet.push(item)\n        }\n      })\n    })\n\n    for (let i = 0; i < exportDataSet.length; i++) {\n      let filtered = {};\n      let obj = exportDataSet[i];\n      for (let key in obj) {\n        if (typeof (obj[key] == \"object\")) {\n          let item = obj[key];\n          if (item != null) {\n            filtered[key] = obj[key];\n          }\n        }\n      }\n      filteredArray.push(filtered);\n    }\n    setFilteredArray(filteredArray)\n    downloadXLS(searchParams, 2, filteredArray)\n\n  };\n\n  const downloadXLS = (searchParams, dloadType, filteredArray) => {\n\n    // console.log(\"Search Id >>> \", searchId)\n\n    let prevDownloadArray = []\n    let newIDArray = []\n    let newValueArray = []; /* add on 12-05-2025 */\n    prevDownloadArray = JSON.parse(JSON.stringify(props.downloadArray));\n    console.log(\"prevDownloadArray >>>>>>>>>>\", prevDownloadArray);\n\n\n    for (let i = 0; i < filteredArray.length; i++) {\n\n      let obj = filteredArray[i];\n      if (!prevDownloadArray.includes(obj[\"id\"])) {\n        newIDArray.push(obj[\"id\"]);\n        prevDownloadArray.push(obj[\"id\"]);\n        newValueArray.push(obj); /* add on 12-05-2025 */\n      }\n      else { console.log(\"Download values found ========= \", obj[\"id\"]) }\n    }\n\n    const totalNewWeightage = newValueArray.reduce((total, item) => {\n      const match1 = multiTradeCountryList.find(country => country.value === item.ctry_code);\n      return match1 ? total + match1.weightagePoints : total;\n    }, 0);\n\n    const totalFilteredWeightage = filteredArray.reduce((total, item) => {\n      const match = multiTradeCountryList.find(country => country.value === item.ctry_code);\n      return match ? total + match.weightagePoints : total;\n    }, 0);\n\n    // console.log(\">>> totalNewWeightage >>>\", totalNewWeightage);\n    // console.log(\">>> totalFilteredWeightage >>>\", totalFilteredWeightage)\n\n    // let remainingDload = props.download_count - newIDArray.length * countryWeightage\n    // let remainingDload_subUser = props.download_count_subUser - filteredArray.length * countryWeightage\n    let remainingDload = props.download_count - totalNewWeightage;\n    let remainingDload_subUser = props.download_count_subUser - totalFilteredWeightage;\n    // console.log(\"remainingDload ======= \", remainingDload);\n\n    /* Save Download log into database (19-05-2025) --start*/\n    const countryWeightageSummary = [];\n\n    multiTradeCountryList.forEach((country) => {\n      const countryCode = country.value;\n      const countryName = country.label;\n      const weightagePoints = country.weightagePoints;\n\n      const countryData = filteredArray.filter(item => item.ctry_code === countryCode);\n      const totalCount = countryData.length;\n      const totalWeightage = totalCount * weightagePoints;\n\n      if (totalCount > 0) {\n        countryWeightageSummary.push({\n          countryName,\n          weightagePoints,\n          totalCount,\n          totalWeightage\n        });\n      }\n    });\n\n    // console.log(\"countryWeightageSummary>>> \", countryWeightageSummary);\n    /* Save Download log into database (19-05-2025) --End*/\n\n    if (remainingDload > 0) {\n      if ((loggedUser.uplineId > 0 && remainingDload_subUser > 0) || (loggedUser.uplineId == 0)) {\n        Swal.fire({\n          title: 'Download!',\n          html: `Available Download <b>${loggedUser.uplineId > 0 ? props.download_count_subUser : props.download_count}</b>. <br> Total Record to Download <b>${loggedUser.uplineId > 0 ? filteredArray.length : newIDArray.length}</b>. \n        <br> Total Points to deduct <b>${loggedUser.uplineId > 0 ? totalFilteredWeightage : totalNewWeightage}</b>.<br> Remaining Download <b>${loggedUser.uplineId > 0 ? remainingDload_subUser : remainingDload}</b>. <br> Are you sure you want to Download ?`,\n          icon: 'warning',\n          dangerMode: true,\n          showCancelButton: true,\n          confirmButtonColor: '#3085d6',\n          cancelButtonColor: '#d33',\n        }).then((isConfirm) => {\n          if (isConfirm.value) {\n\n            const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n            const fileExtension = \".xlsx\";\n            const fileName = searchParams.tradeType + \"_\" + searchParams.countryCode + \"_\" + searchParams.fromDate + \"_\" + searchParams.toDate;\n            // const ws = XLSX.utils.json_to_sheet(filteredArray);\n\n            const ws = XLSX.utils.table_to_sheet(document.getElementById(\"reportXLS\"), { header: 1 });\n\n            const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n            const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n            const data = new Blob([excelBuffer], { type: fileType });\n            FileSaver.saveAs(data, fileName + fileExtension);\n            setSearchLoading(false);\n\n            /* Save API Download log into database (19-05-2025) --Start*/\n            let saveLogPayload = {\n              \"searchId\": searchId,\n              \"downloadJson\": JSON.stringify(countryWeightageSummary),\n              \"recordsDownloaded\": loggedUser.uplineId > 0 ? filteredArray.length : newIDArray.length,\n              \"initialCredit\": loggedUser.uplineId > 0 ? props.download_count_subUser : props.download_count,\n              \"remainingCredit\": loggedUser.uplineId > 0 ? remainingDload_subUser : remainingDload\n            }\n            saveDownloadLog(saveLogPayload);\n            /* Save API Download log into database (19-05-2025) --End*/\n\n            loggedUser.uplineId > 0 ?\n              props.setDloadCountSubuser({ download_count_subUser: remainingDload_subUser }) :\n              props.updateSubscriptionCount({\n                download_count: remainingDload,\n                subscriptionId: props.subscriptionId,\n                dataAccess_count: props.dataAccess_count,\n                subUserCount: props.subUserCount,\n                totalWorkspace: props.totalWorkspace,\n                queryPerDay: props.queryPerDay\n              })\n\n            if (newIDArray.length > 0) {\n              props.updateDownloadArrayCount(\n                {\n                  downloadArray: prevDownloadArray\n                })\n            }\n\n            UpdateSubscription({ \"downloadLimit\": remainingDload })\n            if (loggedUser.uplineId > 0) {\n              UpdateUser({ \"downloadLimit\": remainingDload_subUser })\n            }\n            UpdateDownloadTracher(prevDownloadArray)\n            downloadSearch(searchId, filteredArray.length)\n          }\n\n        })\n      }\n      else {\n        Swal.fire({\n          title: 'Download!',\n          text: \"Your Download Limit Exhausted\",\n          icon: 'error',\n          dangerMode: true,\n          confirmButtonColor: '#3085d6',\n        }).then((isConfirm) => { })\n      }\n    }\n    else {\n      Swal.fire({\n        title: 'Download!',\n        text: \"Your Download Limit Exhausted\",\n        icon: 'error',\n        dangerMode: true,\n        confirmButtonColor: '#3085d6',\n      }).then((isConfirm) => { })\n    }\n\n\n  }\n\n  const saveDownloadLog = (params) => {\n    // console.log(\"Download Log request params ---------- \", params)\n    AxiosUser({\n      method: \"PUT\",\n      url: `download-log/save`,\n      data: JSON.stringify(params),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"Download log res >>>\", res.data);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n      });\n  }\n\n  const getSearchData = (params, countryList = []) => {\n    console.log(\"params ---------- \", params)\n    scrollToRef(gridRef);\n    setSearchLoading(true);\n    isTotalRecordLoading(true)\n    // let updatedCountryList = tradeCountryList && tradeCountryList.length == 0 ? countryList : tradeCountryList\n    // let selectedCountry = updatedCountryList.filter((item) => item.shortcode ==  (countryCode ? countryCode : params.countryCode))\n    //  console.log(\"params ======= \", countryCode)\n\n    params[\"tradeType\"] == \"E\" || params[\"tradeType\"] == \"EXPORT\" ? setCountryWeightage(1) : setCountryWeightage(1)\n\n    let tempSearchResult = []\n    // \"searchId\": searchId,\n    const postData = {\n      \"searchType\": params.searchType,\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      //\"pageNumber\": page - 1,\n      \"pageNumber\": 0,\n      \"numberOfRecords\": limit,\n      \"hsCodeList\": params.hsCodeList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"orderByColumn\": orderByColumn,\n      \"orderByMode\": orderByMode,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"matchType\": params.matchType,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n\n    }\n    console.log(\"params.returnSearchId === \", workspace_id)\n    if (params.returnSearchId) {\n      postData[\"searchId\"] = params.returnSearchId\n    }\n    if (search_id && (workspace_id == undefined || workspace_id == \"\")) {\n      if (!params.isMainSearch) {\n        postData[\"searchId\"] = search_id\n      }\n    }\n\n    Axios({\n      method: \"POST\",\n      url: `search-management/search`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(async (res) => {\n        props.setSearchQuery(postData);\n        // if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() != \"IND\" && params.countryCode.toUpperCase() != \"SEZ\") {\n        //   tempSearchResult = res.data.expForeignList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() === \"IND\") {\n        //   tempSearchResult = res.data.expIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() != \"IND\" && params.countryCode.toUpperCase() != \"SEZ\") {\n        //   tempSearchResult = res.data.impForeignList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() === \"IND\") {\n        //   tempSearchResult = res.data.impIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() === \"SEZ\") {\n        //   tempSearchResult = res.data.expIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() === \"SEZ\") {\n        //   tempSearchResult = res.data.impIndList\n        // }\n        const countryCodes = params.countryCode.map(code => code.toUpperCase());\n        const isIND = countryCodes.includes(\"IND\");\n        const isSEZ = countryCodes.includes(\"SEZ\");\n        const isForeign = !isIND && !isSEZ;\n\n        const tempTradeType = params.tradeType.toLowerCase();\n\n        // if (tempTradeType === \"export\" && isForeign) {\n        //   tempSearchResult = res.data.expForeignList;\n        // } else if (tempTradeType === \"export\" && isIND) {\n        //   tempSearchResult = res.data.expIndList;\n        // } else if (tempTradeType === \"export\" && isSEZ) {\n        //   tempSearchResult = res.data.expIndList;\n        // } else if (tempTradeType === \"import\" && isForeign) {\n        //   tempSearchResult = res.data.impForeignList;\n        // } else if (tempTradeType === \"import\" && isIND) {\n        //   tempSearchResult = res.data.impIndList;\n        // } else if (tempTradeType === \"import\" && isSEZ) {\n        //   tempSearchResult = res.data.impIndList;\n        // } else {\n        //   tempSearchResult = []\n        // }\n\n        /* change on 24-04-2025 */\n        if (tempTradeType === \"export\") {\n          tempSearchResult = res.data.expForeignList;\n        } else if (tempTradeType === \"import\") {\n          tempSearchResult = res.data.impForeignList;\n        } else {\n          tempSearchResult = []\n        }\n        /* change on 24-04-2025 */\n\n        if (tempSearchResult && tempSearchResult.length > 0) {\n\n          setSearchResult(tempSearchResult);\n          setNoDataErrorMsg(false)\n          getTotalCount(params, res.data.searchId);\n          // console.log(\"props.location.state.columnKeys\", props.location.state)\n          let filteredColumn = []\n          let objColumns = Object.keys(tempSearchResult[0]);\n          for (var x in objColumns) {\n            //  console.log(\"objColumns ==== \", objColumns)\n            if (tempSearchResult[0][objColumns[x]] != null) {\n              filteredColumn.push(objColumns[x]);\n            }\n          }\n          setFilteredColumn(filteredColumn)\n\n          setSearchId(res.data.searchId)\n          if (params.searchFlag == true && orderByColumn == \"\") {\n            props.updateSubscriptionCount({\n              download_count: props.download_count,\n              subscriptionId: props.subscriptionId,\n              dataAccess_count: props.dataAccess_count,\n              totalWorkspace: props.totalWorkspace,\n              subUserCount: props.subUserCount,\n              queryPerDay: props.queryPerDay - 1\n            })\n            UpdateSubscription({ \"queryPerDay\": props.queryPerDay - 1 })\n          }\n\n\n          /* After search set country Filter array */\n          Axios({\n            method: \"POST\",\n            url: `search-management/countrywisecount`,\n            data: JSON.stringify(postData),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          })\n            .then(countryRes => {\n              let tempdata = countryRes.data;\n              let tempOptions = tempdata.countryWiseCount.map(({ ctry_code, ctry_name, shipment_count }) => ({\n                label: `${ctry_name} (${shipment_count})`,\n                value: ctry_code\n              }));\n              // console.log(\"Country Res data , >>>>>>>>>>> \", tempOptions);\n              setFilterCountryList(tempOptions);\n            })\n\n\n          //Added here on 18.04.2024\n\n          getImporterList(params);\n          getExporterList(params);\n          getPortOriginList(params);\n          getPortDestinationList(params);\n          getHSCodeList(params);\n          getIndianCityList(params);\n          getForeignCountryList(params);\n          getHSCode4digitList(params);\n          getShipmentModeList(params);\n          getStdUnitList(params);\n          setSearchLoading(false);\n\n          /* After search set consumptionType Data array for advance search*/\n          await getConsumptionTypeDataList(postData);\n          /* After search set Incoterm list Data array for advance search*/\n          await getIncotermListDataList(postData);\n          /* After search set Notify Party list Data array for advance search*/\n          await getNotifyPartyListDataList(postData);\n        }\n        else {\n          setSearchResult([]);\n          setSearchLoading(false);\n          setTotalRecord(0)\n          setFilteredColumn([])\n          setNoDataErrorMsg(true)\n        }\n        props.loadingStop()\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setSearchId(\"\")\n        setSearchResult([]);\n        setSearchLoading(false);\n        setFilteredColumn([])\n        props.loadingStop()\n      });\n  }\n\n  const getPaginationSearchData = (params) => {\n    // console.log(\"params ---------- \", params)\n    scrollToRef(gridRef);\n    setSearchLoading(true);\n    isTotalRecordLoading(true)\n    let tempSearchResult = []\n    // \"searchId\": searchId,\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"searchId\": searchId,\n      \"hsCodeList\": params.hsCodeList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"orderByColumn\": orderByColumn,\n      \"orderByMode\": orderByMode,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"matchType\": params.matchType,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n\n    }\n\n    Axios({\n      method: \"POST\",\n      url: `search-management/search`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        // if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() != \"IND\" && params.countryCode.toUpperCase() != \"SEZ\") {\n        //   tempSearchResult = res.data.expForeignList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() === \"IND\") {\n        //   tempSearchResult = res.data.expIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() != \"IND\" && params.countryCode.toUpperCase() != \"SEZ\") {\n        //   tempSearchResult = res.data.impForeignList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() === \"IND\") {\n        //   tempSearchResult = res.data.impIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() === \"SEZ\") {\n        //   tempSearchResult = res.data.expIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() === \"SEZ\") {\n        //   tempSearchResult = res.data.impIndList\n        // }\n        const countryCodes = params.countryCode.map(code => code.toUpperCase());\n        const isIND = countryCodes.includes(\"IND\");\n        const isSEZ = countryCodes.includes(\"SEZ\");\n        const isForeign = !isIND && !isSEZ;\n\n        const tempTradeType = params.tradeType.toLowerCase();\n\n        // if (tempTradeType === \"export\" && isForeign) {\n        //   tempSearchResult = res.data.expForeignList;\n        // } else if (tempTradeType === \"export\" && isIND) {\n        //   tempSearchResult = res.data.expIndList;\n        // } else if (tempTradeType === \"export\" && isSEZ) {\n        //   tempSearchResult = res.data.expIndList;\n        // } else if (tempTradeType === \"import\" && isForeign) {\n        //   tempSearchResult = res.data.impForeignList;\n        // } else if (tempTradeType === \"import\" && isIND) {\n        //   tempSearchResult = res.data.impIndList;\n        // } else if (tempTradeType === \"import\" && isSEZ) {\n        //   tempSearchResult = res.data.impIndList;\n        // }\n        // else {\n        //   tempSearchResult = []\n        // }\n\n        /* change on 24-04-2025 */\n        if (tempTradeType === \"export\") {\n          tempSearchResult = res.data.expForeignList;\n        } else if (tempTradeType === \"import\") {\n          tempSearchResult = res.data.impForeignList;\n        } else {\n          tempSearchResult = []\n        }\n        /* change on 24-04-2025 */\n\n        if (tempSearchResult && tempSearchResult.length > 0) {\n\n          setSearchResult(tempSearchResult);\n          setNoDataErrorMsg(false)\n          getTotalCount(params, res.data.searchId);\n          let filteredColumn = []\n          let objColumns = Object.keys(tempSearchResult[0]);\n          for (var x in objColumns) {\n            if (tempSearchResult[0][objColumns[x]] != null) {\n              filteredColumn.push(objColumns[x]);\n            }\n          }\n          setFilteredColumn(filteredColumn)\n          setSearchId(res.data.searchId)\n          // if(params.searchFlag == true && orderByColumn == \"\"){\n          //   props.updateSubscriptionCount({\n          //     download_count: props.download_count,\n          //     subscriptionId: props.subscriptionId,\n          //     dataAccess_count: props.dataAccess_count,\n          //     totalWorkspace: props.totalWorkspace,\n          //     subUserCount: props.subUserCount,\n          //     queryPerDay: props.queryPerDay - 1\n          //   })\n          //   UpdateSubscription({\"queryPerDay\": props.queryPerDay - 1})\n          // }\n          setSearchLoading(false);\n        }\n        else {\n          setSearchResult([]);\n          setSearchLoading(false);\n          setTotalRecord(0)\n          setFilteredColumn([])\n          setNoDataErrorMsg(true)\n        }\n        props.loadingStop()\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setSearchId(\"\")\n        setSearchResult([]);\n        setSearchLoading(false);\n        setFilteredColumn([])\n        props.loadingStop()\n      });\n  }\n\n\n  const getTotalCount = (params, searchID) => {\n    // console.log(\"params 2---------- \", params)\n    isTotalRecordLoading(true)\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"searchId\": searchID,\n      \"hsCodeList\": params.hsCodeList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"matchType\": params.matchType,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    console.log(\"111111111111111111111\")\n    Axios({\n      method: \"POST\",\n      url: `/search-management/searchcount`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        setTotalRecord(res.data);\n        updateSearchCount(res.data, searchID)\n        setTimeout(isTotalRecordLoading(false), 1000)\n\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setTotalRecord(0);\n        setNoDataErrorMsg(true)\n      });\n  }\n\n  const updateSearchCount = (totalRecords, searchID) => {\n    // console.log(\"params 2---------- \", params)\n    const postData = {\n      \"totalRecords\": totalRecords,\n    }\n    Axios({\n      method: \"PUT\",\n      url: `/search-management/updatesearchcount/${searchID}`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"Res\", res.data)\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setTotalRecord(0);\n      });\n  }\n\n  const downloadSearch = (searchID, totalDownloadRecords) => {\n    // if(isDownloaded != \"Y\") {\n    Axios({\n      method: \"PUT\",\n      url: `/search-management/downloadsearch?searchId=${searchID}&recordsDownloaded=${totalDownloadRecords}`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"Res\", res.data)\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n      });\n\n    // if(search_id){\n    //   Axios({\n    //     method: \"PUT\",\n    //     url: `/search-management/downloadsearch?searchId=${search_id}`,\n    //     headers: {\n    //       \"Content-Type\": \"application/json\"\n    //     }\n    //   })\n    //     .then(res => {\n    //       console.log(\"Res\", res.data)\n    //     })\n    //     .catch(err => {\n    //       console.log(\"Err\", err);\n    //     });\n    // }\n    // } \n\n  }\n\n\n  const getImporterList = (params) => {\n    isImporterLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listimporters`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let importList = [];\n        if (res.data.importersList) {\n          res.data.importersList.forEach((item) => {\n            let specificItem = { \"value\": item.importer_name, \"label\": item.importer_name + \" [\" + item.shipment_count + \"]\" };\n            importList.push(specificItem);\n          })\n        }\n        setImporterDataList(importList);\n        isImporterLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setImporterDataList([]);\n        isImporterLoading(false);\n      });\n  }\n\n  const getExporterList = (params) => {\n    isExporterLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listexporters`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let exportList = [];\n        if (res.data.exportersList) {\n          res.data.exportersList.forEach((item) => {\n            let specificItem = { \"value\": item.exporter_name, \"label\": item.exporter_name + \" [\" + item.shipment_count + \"]\" };\n            exportList.push(specificItem);\n          })\n        }\n        setExporterDataList(exportList);\n        isExporterLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setExporterDataList([]);\n        isExporterLoading(false);\n      });\n  }\n\n  const getPortOriginList = (params) => {\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n\n\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listindianports`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let portsList = [];\n        if (res.data.portsList) {\n          res.data.portsList.forEach((item) => {\n            let specificItem = { \"value\": item.port_name, \"label\": item.port_name + \" [\" + item.shipment_count + \"]\" };\n            portsList.push(specificItem);\n          })\n        }\n        setPortOriginDataList(portsList);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setPortOriginDataList([]);\n      });\n  }\n\n  const getPortDestinationList = (params) => {\n    isPortDestLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listforeignports`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let portsList = [];\n        if (res.data.portsList) {\n          res.data.portsList.forEach((item) => {\n            let specificItem = { \"value\": item.port_name, \"label\": item.port_name + \"[\" + item.shipment_count + \"]\" };\n            portsList.push(specificItem);\n          })\n        }\n        setPortDestinationDataList(portsList);\n        isPortDestLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setPortDestinationDataList([]);\n        isPortDestLoading(false);\n      });\n  }\n\n  const getHSCodeList = (params) => {\n    isHscodeLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": moment(params.fromDate).format(\"YYYY-MM-DD\"),\n      \"toDate\": moment(params.toDate).format(\"YYYY-MM-DD\"),\n      \"searchBy\": params.searchBy ? params.searchBy : \"HS_CODE\",\n      \"searchValue\": params.searchValue ? params.searchValue : [\"2\"],\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType ? params.matchType : \"L\",\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listhscodes`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let hsList = [];\n        if (res.data.hscodesList) {\n          res.data.hscodesList.forEach((item) => {\n            let specificItem = { \"value\": item.hscode, \"label\": item.hscode + \" [\" + item.shipment_count + \"]\" };\n            hsList.push(specificItem);\n          })\n        }\n        setHsCodeDataList(hsList);\n        isHscodeLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setHsCodeDataList([]);\n        isHscodeLoading(false);\n      });\n  }\n\n  const getHSCode4digitList = (params) => {\n    isHscodeLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listhscodes4digit`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let hsList = [];\n        if (res.data.hscodesList) {\n          res.data.hscodesList.forEach((item) => {\n            let specificItem = { \"value\": item.hscode, \"label\": item.hscode + \" [\" + item.shipment_count + \"]\" };\n            hsList.push(specificItem);\n          })\n        }\n        setHsCode4digitDataList(hsList);\n        isHscodeLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setHsCode4digitDataList([]);\n        isHscodeLoading(false);\n      });\n  }\n\n\n  const getForeignCountryList = (params) => {\n    isCoLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listforeigncountries`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let fcList = [];\n        if (res.data.countriesList) {\n          res.data.countriesList.forEach((item) => {\n            let specificItem = { \"value\": item.country_name, \"label\": item.country_name + \" [\" + item.shipment_count + \"]\" };\n            fcList.push(specificItem);\n          })\n        }\n        setCountryOriginList(fcList);\n        setTimeout(isCoLoading(false), 1000)\n          ;\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setCountryOriginList([]);\n        isCoLoading(false);\n      });\n  }\n\n  const getIndianCityList = (params) => {\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listindiancities`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let icList = [];\n        if (res.data.citiesList) {\n          res.data.citiesList.forEach((item) => {\n            let specificItem = { \"value\": item.city_name, \"label\": item.city_name + \" [\" + item.shipment_count + \"]\" };\n            icList.push(specificItem);\n          })\n        }\n        setCountryDestinationList(icList);\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setCountryDestinationList([]);\n      });\n  }\n\n  const getShipmentModeList = (params) => {\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listshipmentmode`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let icList = [];\n        if (res.data.shipmentModeList) {\n          res.data.shipmentModeList.forEach((item) => {\n            let specificItem = { \"value\": item.ship_mode, \"label\": item.ship_mode };\n            icList.push(specificItem);\n          })\n        }\n        setShipmentModeDataList(icList);\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setShipmentModeDataList([]);\n      });\n  }\n\n  const getStdUnitList = (params) => {\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/liststdunit`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let icList = [];\n        if (res.data.stdUnitList) {\n          res.data.stdUnitList.forEach((item) => {\n            let specificItem = { \"value\": item.std_unit, \"label\": item.std_unit };\n            icList.push(specificItem);\n          })\n        }\n        setStdUnitDataList(icList);\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setStdUnitDataList([]);\n      });\n  }\n\n  const resetFilter = (data) => {\n    setPreviousTotalRecordCount(0)\n    setIsDownloaded(\"N\")\n    updateFilter(data)\n  }\n\n  const updateFilter = (data) => {\n\n    if (data.portOriginList) {\n      setPortOriginList(data.portOriginList);\n    }\n    if (data.portDestinationList) {\n      setPortDestinationList(data.portDestinationList);\n    }\n    if (data.hsCodeList) {\n      setHsCodeList(data.hsCodeList);\n    }\n    if (data.hsCode4DigitList) {\n      setHsCode4digitList(data.hsCode4DigitList);\n    }\n    if (data.importerList) {\n      setImporterList(data.importerList);\n    }\n    if (data.exporterList) {\n      setExporterList(data.exporterList);\n    }\n    if (data.cityOriginList) {\n      setCityOriginList(data.cityOriginList);\n    }\n    if (data.cityDestinationList) {\n      setCityDestinationList(data.cityDestinationList);\n    }\n    if (data.shipmentModeList) {\n      setShipmentModeList(data.shipmentModeList);\n    }\n    if (data.stdUnitList) {\n      setStdUnitList(data.stdUnitList);\n    }\n    if (data.returnSearchId) {\n      setReturnSearchId(data.returnSearchId);\n    }\n    if (data.consumptionTypeList) {\n      setConsumptionType(data.consumptionTypeList);\n    }\n    if (data.incotermList) {\n      setIncotermList(data.incotermList);\n    }\n    if (data.notifyPartyList) {\n      setNotifyPartyList(data.notifyPartyList);\n    }\n\n\n    if (searchParams && searchParams.tradeType) {\n      let params = searchParams;\n      params.searchType = \"ADVANCE\";\n      params.portOriginList = data.portOriginList;\n      params.portDestinationList = data.portDestinationList;\n      params.hsCodeList = data.hsCodeList;\n      params.importerList = data.importerList;\n      params.exporterList = data.exporterList;\n      params.cityOriginList = data.cityOriginList;\n      params.cityDestinationList = data.cityDestinationList;\n      params.hsCode4DigitList = data.hsCode4DigitList;\n      params.shipmentModeList = data.shipmentModeList;\n      params.stdUnitList = data.stdUnitList;\n      params.searchFlag = false\n\n      // getIndividualRecordCount(params)\n\n      if (data.portOriginList) {\n        // setPortOriginList(data.portOriginList);\n        params[\"portOriginList\"] = data.portOriginList;\n      }\n      if (data.portDestinationList) {\n        // setPortDestinationList(data.portDestinationList);\n        params[\"portDestinationList\"] = data.portDestinationList;\n      }\n      if (data.hsCodeList) {\n        // setHsCodeList(data.hsCodeList);\n        params[\"hsCodeList\"] = data.hsCodeList;\n      }\n      if (data.hsCode4DigitList) {\n        // setHsCode4digitList(data.hsCode4DigitList);\n        params[\"hsCode4DigitList\"] = data.hsCode4DigitList;\n      }\n      if (data.importerList) {\n        // setImporterList(data.importerList);\n        params[\"importerList\"] = data.importerList;\n      }\n      if (data.exporterList) {\n        // setExporterList(data.exporterList);\n        params[\"exporterList\"] = data.exporterList;\n      }\n      if (data.cityOriginList) {\n        // setCityOriginList(data.cityOriginList);\n        params[\"cityOriginList\"] = data.cityOriginList;\n      }\n      if (data.cityDestinationList) {\n        // setCityDestinationList(data.cityDestinationList);\n        params[\"cityDestinationList\"] = data.cityDestinationList;\n      }\n      if (data.shipmentModeList) {\n        // setShipmentModeList(data.shipmentModeList);\n        params[\"shipModeList\"] = data.shipmentModeList;\n      }\n      if (data.stdUnitList) {\n        // setStdUnitList(data.stdUnitList);\n        params[\"stdUnitList\"] = data.stdUnitList;\n      }\n      if (data.minQuantity) {\n        params[\"rangeQuantityStart\"] = data.minQuantity;\n      }\n      if (data.maxQuantity) {\n        params[\"rangeQuantityEnd\"] = data.maxQuantity;\n      }\n      if (data.minValue) {\n        params[\"rangeValueUsdStart\"] = data.minValue;\n      }\n      if (data.maxValue) {\n        params[\"rangeValueUsdEnd\"] = data.maxValue;\n      }\n      if (data.minUnitPrice) {\n        params[\"rangeUnitPriceUsdStart\"] = data.minUnitPrice;\n      }\n      if (data.maxUnitPrice) {\n        params[\"rangeUnitPriceUsdEnd\"] = data.maxUnitPrice;\n      }\n      if (data.consumptionTypeList) {\n        params[\"consumptionType\"] = data.consumptionTypeList;\n      }\n      if (data.incotermList) {\n        params[\"incoterm\"] = data.incotermList;\n      }\n      if (data.notifyPartyList) {\n        params[\"notifyParty\"] = data.notifyPartyList;\n      }\n      if (data.descriptionList) {\n        params[\"conditionProductDesc\"] = data.conditionProductDescription;\n        params[\"productDesc\"] = data.descriptionList;\n      }\n      if (data.returnSearchId) {\n        params[\"returnSearchId\"] = data.returnSearchId;\n      }\n      setSearchParams(params);\n      getSearchData(params);\n\n      // commented 05.04.2024\n\n      //  getImporterList(params);\n      //  getExporterList(params);\n      //  getPortOriginList(params);\n      //  getPortDestinationList(params);\n      //  getHSCodeList(params);\n      //  getIndianCityList(params);\n      //  getForeignCountryList(params);\n      //  getHSCode4digitList(params);\n      // //  getIndividualRecordCount(params)\n      //  getShipmentModeList(params);\n      //  getStdUnitList(params);\n\n\n    }\n    setToggle(false);\n  }\n\n  const getNewWorkspaceId = () => {\n    if (workspaceRef.current.value && workspaceRef.current.value == \"newWorkspace\") {\n      if (!workspaceRef.current.value || !sWorkspaceRef.current.value || !sTitleRef.current.value || !sDescRef.current.value) {\n        if (!workspaceRef.current.value) {\n          isWsError(\"Please select workspace name\");\n        } else isWsError(\"\")\n\n        if (!sWorkspaceRef.current.value) {\n          isNewWsError(\"Please enter workspace name\");\n        } else isNewWsError(\"\")\n\n        if (!sTitleRef.current.value) {\n          isSTitleError(\"Please enter title\");\n        } else isSTitleError(\"\")\n\n        if (!sDescRef.current.value) {\n          isSDescError(\"Please enter description\");\n        } else isSDescError(\"\");\n      }\n      else {\n        const postData = {\n          \"name\": sWorkspaceRef.current.value,\n          \"is_active\": \"Y\",\n        }\n        AxiosACT({\n          method: \"POST\",\n          url: `/activity-management/workspace`,\n          data: JSON.stringify(postData),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        })\n          .then(res => {\n            handleSaveSearch(res.data)\n          })\n          .catch(err => {\n            console.log(\"Err\", err);\n          });\n      }\n    }\n    else {\n      if (!workspaceRef.current.value || !sTitleRef.current.value || !sDescRef.current.value) {\n        if (!workspaceRef.current.value || workspaceRef.current.value == \"--select--\") {\n          isWsError(\"Please enter workspace name\");\n        } else isWsError(\"\")\n\n        if (!sTitleRef.current.value) {\n          isSTitleError(\"Please enter title\");\n        } else isSTitleError(\"\")\n\n        if (!sDescRef.current.value) {\n          isSDescError(\"Please enter description\");\n        } else isSDescError(\"\");\n      }\n      else {\n        handleSaveSearch()\n      }\n    }\n  }\n\n  const handleSaveSearch = (id) => {\n    const postData = {\n      \"workspace_id\": workspaceRef.current.value == \"newWorkspace\" ? id : parseInt(workspaceRef.current.value),\n      \"search_id\": searchId,\n      \"name\": sTitleRef.current.value,\n      \"description\": sDescRef.current.value,\n      \"is_active\": \"Y\",\n    }\n    AxiosACT({\n      method: \"POST\",\n      url: `/activity-management/workspace/savesearch`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        props.updateSubscriptionCount({\n          download_count: props.download_count,\n          subscriptionId: props.subscriptionId,\n          dataAccess_count: props.dataAccess_count,\n          totalWorkspace: props.totalWorkspace - 1,\n          subUserCount: props.subUserCount,\n          queryPerDay: props.queryPerDay\n        })\n        UpdateSubscription({ \"totalWorkspace\": props.totalWorkspace - 1 })\n        Swal.fire({\n          title: 'Success',\n          text: \"Search query saved successfully\",\n          icon: 'success',\n        })\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n        if (err.data.errorMsg) {\n          errorMsg = err.data.errorMsg;\n        }\n        Swal.fire({\n          title: 'Oops!',\n          text: errorMsg,\n          icon: 'error',\n        })\n      });\n    toggleModal();\n\n  }\n\n  const getWorkspaceList = () => {\n\n    AxiosACT({\n      method: \"GET\",\n      url: `/activity-management/workspace/list?userId=${userId}`\n    })\n      .then(res => {\n        setWorkspaceList(res.data.workspaceList);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n      });\n  }\n\n  useEffect(() => {\n    getWorkspaceList();\n    fetchSearchQuery();\n  }, [])\n\n\n  const getSuggestionList = (value, innitialParams, index) => {\n    if (value && value.length >= 2) {\n      let newSuggestionList = []\n      let QueryBuilderNewSuggestionList = [[], [], []]\n      const postData = {\n        \"tradeType\": innitialParams.tradeType,\n        \"fromDate\": innitialParams.fromDate,\n        \"toDate\": innitialParams.toDate,\n        \"searchBy\": index == \"\" ? innitialParams.searchBy : innitialParams.queryBuilder[index - 1].searchBy,\n        \"searchValue\": value,\n        \"countryCode\": innitialParams.countryCode,\n        \"matchType\": index == \"\" ? innitialParams.matchType : innitialParams.queryBuilder[index - 1].matchType,\n      }\n      Axios({\n        method: \"POST\",\n        url: `/search-management/suggestionlist`,\n        data: JSON.stringify(postData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          if (res.data.suggestionList) {\n            res.data.suggestionList.map((item) => {\n              let specificItem = { \"value\": item.listSuggestion, \"label\": item.listSuggestion };\n              newSuggestionList.push(specificItem);\n            })\n            if (index == \"\") {\n              setSuggestions(newSuggestionList)\n            }\n            else {\n              QueryBuilderNewSuggestionList[index - 1] = newSuggestionList\n              console.log(\"query builder ========== \", QueryBuilderNewSuggestionList)\n              setQueryBuilderSuggestions(QueryBuilderNewSuggestionList)\n            }\n\n          }\n        })\n        .catch(err => {\n          // let newValue =  { \"listSuggestion\": newVal, \"shipmentCount\": 0}    \n          // setSuggestions(newValue)\n        });\n    }\n\n  }\n\n\n  const addnewOption = () => { }\n  const SelectMenuButton = (props) => {\n    return (\n      <components.MenuList  {...props}>\n        {props.children}\n        {/* <button onClick={()=> addnewOption()}>Add new element</button> */}\n      </components.MenuList >\n    )\n  }\n\n  const getTradingCountryList = (params) => {\n    setTradeType(params)\n\n    AxiosMaster({\n      method: \"GET\",\n      url: `masterdata-management/countrylistbytrade/${params}`,\n    })\n      .then(res => {\n        let countryList = [],\n          multiCountryList = [];\n        if (res.data.countryList) {\n          res.data.countryList.forEach((item) => {\n            multiCountryList.push({\n              \"value\": item.shortcode,\n              \"label\": item.name,\n              \"iso2code\": item.image,\n              \"weightagePoints\": params == \"E\" ? item.exportPointWeightage : item.importPointWeightage,\n            });\n            let specificItem = Object.assign(item, { hasChild: false })\n            countryList.push(specificItem);\n          })\n          // }\n          countryList = res.data.countryList.length > 0 && props.countryList.length > 0 && res.data.countryList.filter((item) => {\n            return props.countryList.includes(item.shortcode)\n          })\n\n          setTradeCountryList(countryList);\n          setMultiTradeCountryList(multiCountryList);\n          console.log(\"Multiselect Trade cuntry list >>>> \", multiCountryList);\n        }\n      })\n      .catch(err => {\n        setTradeCountryList([])\n      });\n  }\n\n  const fetchSearchQuery = () => {\n    console.log(\"=====================2\")\n    if (search_id) {\n      let newSuggestionList = []\n      let queryBuilderSuggestionList = []\n      Axios({\n        method: \"GET\",\n        url: `/search-management/search/details`,\n        params: { searchId: search_id }\n      })\n        .then(res => {\n          if (res.data.queryList) {\n            let sParams = res.data.queryList[0].userSearchQuery;\n            initialValues = {\n              ...initialValues,\n              tradeType: sParams.tradeType,\n              matchType: sParams.matchType,\n              searchBy: sParams.searchBy,\n              searchValue: sParams.searchValue,\n              countryCode: sParams.countryCode,\n              fromDate: sParams.fromDate ? new Date(sParams.fromDate) : \"\",\n              toDate: sParams.toDate ? new Date(sParams.toDate) : \"\",\n              dateRange: search_id ? \"6\" : \"\",\n              queryBuilder: sParams.queryBuilder ? sParams.queryBuilder : [],\n              cityDestinationList: sParams.cityDestinationList,\n              cityOriginList: sParams.cityOriginList,\n              exporterList: sParams.exporterList,\n              hsCode4DigitList: sParams.hsCode4DigitList,\n              hsCodeList: sParams.hsCodeList,\n              importerList: sParams.importerList,\n              portDestinationList: sParams.portDestinationList,\n              portOriginList: sParams.portOriginList,\n              shipmentModeList: sParams.shipModeList ? sParams.shipModeList : [],\n              stdUnitList: sParams.stdUnitList ? sParams.stdUnitList : [],\n              minQuantity: sParams.rangeQuantityStart ? sParams.rangeQuantityStart : null,\n              maxQuantity: sParams.rangeQuantityEnd ? sParams.rangeQuantityEnd : null,\n              consumptionTypeList: sParams.consumptionType ? sParams.consumptionType : [],\n              minValue: sParams.rangeValueUsdStart ? sParams.rangeValueUsdStart : null,\n              maxValue: sParams.rangeValueUsdEnd ? sParams.rangeValueUsdEnd : null,\n              minUnitPrice: sParams.rangeUnitPriceUsdStart ? sParams.rangeUnitPriceUsdStart : null,\n              maxUnitPrice: sParams.rangeUnitPriceUsdEnd ? sParams.rangeUnitPriceUsdEnd : null,\n              incotermList: sParams.incoterm ? sParams.incoterm : [],\n              notifyPartyList: sParams.notifyParty ? sParams.notifyParty : []\n            };\n            setCountryCode(sParams.countryCode)\n\n            sParams.searchValue.map((item, index) => {\n              let specificItem = { \"value\": item, \"label\": item };\n              newSuggestionList.push(specificItem);\n            })\n            setSearchValue(newSuggestionList)\n            if (sParams.queryBuilder && sParams.queryBuilder.length > 0) {\n\n              sParams.queryBuilder.map((newitem, newindex) => {\n                let tempArray = []\n                newitem.searchValue.map((item, index) => {\n                  let specificItem = { \"value\": item, \"label\": item };\n                  tempArray.push(specificItem);\n                })\n                queryBuilderSuggestionList[newindex] = tempArray\n              })\n            }\n            setQueryBuilderSearchValue(queryBuilderSuggestionList)\n            console.log(\"initialValues Start ======= \", initialValues)\n\n            setIsDownloaded(res.data.queryList[0].isDownloaded)\n            setPreviousTotalRecordCount(res.data.queryList[0].totalRecords)\n            sParams.tradeType == \"IMPORT\" ? fetchTradingCountryListOnInnitialize(\"I\", sParams.countryCode, sParams.tradeType, initialValues) : fetchTradingCountryListOnInnitialize(\"E\", sParams.countryCode, sParams.tradeType, initialValues)\n          }\n        })\n        .catch(err => {\n          console.log(\"Err\", err);\n        });\n    }\n  }\n\n  const fetchTradingCountryListOnInnitialize = (params, countryCode, tradeType, initialValues) => {\n    setTradeType(params)\n    AxiosMaster({\n      method: \"GET\",\n      url: `masterdata-management/countrylistbytrade/${params}`,\n    })\n      .then(res => {\n        let countryList = [],\n          multiCountryList = [],\n          selectedCountryList = [];\n        if (res.data.countryList) {\n          res.data.countryList.forEach((item) => {\n            multiCountryList.push({\n              \"value\": item.shortcode,\n              \"label\": item.name,\n              \"iso2code\": item.image,\n              \"weightagePoints\": params == \"E\" ? item.exportPointWeightage : item.importPointWeightage,\n            });\n            let specificItem = Object.assign(item, { hasChild: false })\n            countryList.push(specificItem);\n          })\n\n          countryList = res.data.countryList.length > 0 && props.countryList.length > 0 && res.data.countryList.filter((item) => {\n            return props.countryList.includes(item.shortcode)\n          });\n\n\n          setTradeCountryList(countryList);\n          setMultiTradeCountryList(multiCountryList);\n          console.log(\"Multi Country List Trade >>>>> \", multiCountryList)\n\n          // let tempRow = countryList && countryList.filter((item) => item.shortcode.toLowerCase().includes(countryCode.toLowerCase()))\n          const tempRow = countryList.filter((item) =>\n            countryCode.some((code) => item.shortcode.toLowerCase() === code.toLowerCase())\n          );\n\n          tempRow.forEach((item) => {\n            selectedCountryList.push({ \"value\": item.shortcode, \"label\": item.name });\n          })\n          setSelectedTradeCountry(selectedCountryList);\n\n          console.log(\"selectedCountryList >>>>>>>>>>>>>>>>>>\", selectedCountryList)\n\n\n          setImporterForExport(tempRow[0].importerForExport)\n          setExporterForImport(tempRow[0].exporterForImport)\n\n          setDate(countryCode, tradeType, res.data.countryList);\n          if (searchTypeValue !== \"\") {\n            handleSearch(initialValues, countryList, searchTypeValue);\n          } else {\n            handleSearch(initialValues, countryList);\n          }\n\n        }\n      }\n      )\n      .catch(err => {\n        setTradeCountryList([])\n      });\n  }\n\n  // function setDate(text, tradeType, tradeCountryList) {\n  //   // isLoading(true)\n  //   let tempRow = tradeCountryList && tradeCountryList.filter((item) => item.shortcode.toLowerCase().includes(text.toLowerCase()));\n  //   console.log(\"Temp Row On setDate >>> \", tempRow)\n  //   let fromDate = \"\"\n  //   let toDate = \"\"\n\n  //   if (tradeType == \"I\") {\n  //     fromDate = moment(tempRow[0].importFrom).format('MM-DD-YYYY')\n  //     toDate = moment(tempRow[0].importUpto).format('MM-DD-YYYY')\n  //   }\n  //   else {\n  //     fromDate = moment(tempRow[0].exportFrom).format('MM-DD-YYYY')\n  //     toDate = moment(tempRow[0].exportUpto).format('MM-DD-YYYY')\n  //   }\n\n  //   setMinDate(new Date(fromDate))\n  //   setMaxDate(new Date(toDate))\n\n  //   return new Date(toDate)\n  // }\n\n  function setDate(text, tradeType, tradeCountryList) {\n    // text is now an array like [\"Ind\", \"Afg\"]\n    const tempRow = tradeCountryList.filter((item) =>\n      text.some((code) => item.shortcode.toLowerCase() === code.toLowerCase())\n    );\n    console.log(\"Temp Row On setDate >>> \", tempRow);\n\n    if (!tempRow.length) return;\n\n    let fromDate = \"\";\n    let toDate = \"\";\n\n    if (tradeType === \"I\") {\n      fromDate = moment(tempRow[0].importFrom).format(\"MM-DD-YYYY\");\n      toDate = moment(tempRow[0].importUpto).format(\"MM-DD-YYYY\");\n    } else {\n      fromDate = moment(tempRow[0].exportFrom).format(\"MM-DD-YYYY\");\n      toDate = moment(tempRow[0].exportUpto).format(\"MM-DD-YYYY\");\n    }\n\n    setMinDate(new Date(fromDate));\n    setMaxDate(new Date(toDate));\n\n    return new Date(toDate);\n  }\n\n\n\n  // function setMaxMinDate(text) {\n  //   // isLoading(true)\n  //   let tempRow = tradeCountryList && tradeCountryList.filter((item) => item.shortcode.toLowerCase().includes(text.toLowerCase()))\n  //   let fromDate = \"\"\n  //   let toDate = \"\"\n  //   let countrywiseFromDate = \"\"\n  //   console.log(\"tradeType === \", tradeType)\n  //   try {\n  //     if (tradeType == \"I\") {\n  //       countrywiseFromDate = moment(tempRow[0].importFrom).format('MM-DD-YYYY')\n  //       fromDate = moment(tempRow[0].importFrom).format('MM-DD-YYYY')\n  //       toDate = moment(tempRow[0].importUpto).format('MM-DD-YYYY')\n  //     }\n  //     else {\n  //       countrywiseFromDate = moment(tempRow[0].exportFrom).format('MM-DD-YYYY')\n  //       fromDate = moment(tempRow[0].exportFrom).format('MM-DD-YYYY')\n  //       toDate = moment(tempRow[0].exportUpto).format('MM-DD-YYYY')\n  //     }\n\n  //     setMinDate(new Date(fromDate))\n  //     setMaxDate(new Date(toDate))\n\n  //     return new Date(toDate)\n  //   }\n  //   catch {\n  //     props.loadingStop()\n  //     Swal.fire({\n  //       title: 'Error !',\n  //       text: \"Please select country\",\n  //       icon: 'error',\n  //       dangerMode: true,\n  //       confirmButtonColor: '#3085d6',\n  //     })\n  //     return \"\"\n  //   }\n\n  // }\n\n  function setMaxMinDate(selectedCountries, tradeType) {\n    if (!selectedCountries || selectedCountries.length === 0) {\n      Swal.fire({\n        title: 'Error !',\n        text: \"Please select at least one country\",\n        icon: 'error',\n        confirmButtonColor: '#3085d6',\n      });\n      return;\n    }\n\n    let fromDates = [];\n    let toDates = [];\n\n    selectedCountries.forEach(country => {\n      let tempRow = tradeCountryList.find(item => item.shortcode.toLowerCase() === country.value.toLowerCase());\n\n      if (tempRow) {\n        if (tradeType === \"I\") {\n          fromDates.push(moment(tempRow.importFrom).toDate());\n          toDates.push(moment(tempRow.importUpto).toDate());\n        } else {\n          fromDates.push(moment(tempRow.exportFrom).toDate());\n          toDates.push(moment(tempRow.exportUpto).toDate());\n        }\n      }\n    });\n\n    if (fromDates.length > 0 && toDates.length > 0) {\n      let minDate = new Date(Math.min(...fromDates));\n      let maxDate = new Date(Math.max(...toDates));\n\n      console.log(\"Min Date >>>>\", minDate);\n      console.log(\"Max Date >>> \", maxDate);\n\n      setMinDate(minDate);\n      setMaxDate(maxDate);\n\n      return maxDate;\n    }\n  }\n\n  function setExporterImporter(text, setFieldValue) {\n\n    let tempRow = tradeCountryList && tradeCountryList.filter((item) => item.shortcode.toLowerCase().includes(text.toLowerCase()))\n\n    setFieldValue(\"importerForExport\", tempRow[0].importerForExport)\n    setFieldValue(\"exporterForImport\", tempRow[0].exporterForImport)\n    setImporterForExport(tempRow[0].importerForExport)\n    setExporterForImport(tempRow[0].exporterForImport)\n  }\n\n  useEffect(() => {\n    return () => {\n      localStorage.removeItem(\"searchParam\")\n    }\n  }, []);\n\n  async function getConsumptionTypeDataList(searchQuery) {\n    try {\n      const tempTradeType = searchQuery.tradeType.toLowerCase();\n      let columnKey = tempTradeType == \"export\" ? `export_purpose` : `import_purpose`;\n      searchQuery[\"columnName\"] = columnKey;\n\n      // console.log(\"Check colum filter request >>> \", updatedPayload)\n      Axios({\n        method: \"POST\",\n        url: `/search-management/listdistinctcolumnvalue`,\n        data: JSON.stringify(searchQuery),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          // console.log(\"Column value >>> \", res.data.distinctColumnValuesList);\n          let apiResponse = res.data.distinctColumnValuesList;\n          let formattedOptions = apiResponse.map(({ column_name, records_count }) => ({\n            label: `${column_name} (${records_count})`,\n            value: column_name\n          }));\n\n          setConsumptionTypeDataList(formattedOptions);\n        })\n    } catch (e) {\n      console.log(e);\n      setConsumptionTypeDataList([]);\n    }\n  }\n\n  async function getIncotermListDataList(searchQuery) {\n    try {\n      searchQuery[\"columnName\"] = 'incoterm';\n\n      // console.log(\"Check colum filter request >>> \", updatedPayload)\n      Axios({\n        method: \"POST\",\n        url: `/search-management/listdistinctcolumnvalue`,\n        data: JSON.stringify(searchQuery),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          // console.log(\"Column value >>> \", res.data.distinctColumnValuesList);\n          let apiResponse = res.data.distinctColumnValuesList;\n          if (apiResponse && apiResponse.length > 0) {\n            let formattedOptions = apiResponse.map(({ column_name, records_count }) => ({\n              label: `${column_name} (${records_count})`,\n              value: column_name\n            }));\n\n            setIncotermListData(formattedOptions);\n          } else {\n            setIncotermListData([]);\n          }\n        })\n    } catch (e) {\n      console.log(e);\n      setIncotermListData([]);\n    }\n  }\n\n  async function getNotifyPartyListDataList(searchQuery) {\n    try {\n      searchQuery[\"columnName\"] = 'notify_party_name';\n\n      // console.log(\"Check colum filter request >>> \", updatedPayload)\n      Axios({\n        method: \"POST\",\n        url: `/search-management/listdistinctcolumnvalue`,\n        data: JSON.stringify(searchQuery),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          // console.log(\"Column value >>> \", res.data.distinctColumnValuesList);\n          let apiResponse = res.data.distinctColumnValuesList;\n          let formattedOptions = apiResponse.map(({ column_name, records_count }) => ({\n            label: `${column_name} (${records_count})`,\n            value: column_name\n          }));\n\n          setNotifyPartyListData(formattedOptions);\n        })\n    } catch (e) {\n      console.log(e);\n      setNotifyPartyListData([]);\n    }\n  }\n\n\n  const queryBuilder = (values, errors, touched, setFieldTouched, setFieldValue, Fragment) => {\n    return (\n      <FieldArray\n        name=\"queryBuilder\"\n        render={arrayHelpers => (\n          <>\n            {values.queryBuilder && values.queryBuilder.length > 0 ? (\n              values.queryBuilder.map((data, index) => (\n                <Fragment key={index}>\n                  <div className=\"col-md-2 pr-0 pb-2\">\n                    <div className=\"input-search\">\n                      <Field\n                        name={`queryBuilder[${index}].relation`}\n                        component=\"select\"\n                        className={`hero__form-input form-control custom-select ${touched.matchType && errors.matchType ? \"is-invalid\" : \"\"}`}\n                        autoComplete=\"off\"\n                        onChange={event => {\n                          if (props.queryPerDay > 0) {\n                            setFieldValue(`queryBuilder[${index}].relation`, event.target.value);\n                            setIsSearchClicked(false)\n                          }\n                          else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                            swalResponse()\n                          }\n                        }}\n                      >\n                        <option value=\"\">Select Relation</option>\n                        <option value=\"AND\">AND</option>\n                        {/* <option value=\"OR\">OR</option>\n                   <option value=\"NOT\">NOT</option> */}\n                      </Field>\n                    </div>\n                  </div>\n                  <div className=\"col-md-2 pr-0 pb-2\">\n\n                    <div className=\"input-search\">\n                      <Field\n                        name={`queryBuilder[${index}].searchBy`}\n                        component=\"select\"\n                        className={`hero__form-input form-control custom-select ${touched.searchBy && errors.searchBy ? \"is-invalid\" : \"\"}`}\n                        autoComplete=\"off\"\n                        onChange={event => {\n                          if (props.queryPerDay > 0) {\n                            event.target.value == \"PRODUCT\" ? setFieldValue(`queryBuilder[${index}].matchType`, \"C\") : setFieldValue(`queryBuilder[${index}].matchType`, \"L\");\n                            setFieldValue(`queryBuilder[${index}].searchBy`, event.target.value);\n                            setIsSearchClicked(false)\n                            queryBuilderSearchValue.length = 1\n                          }\n                          else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                            swalResponse()\n                          }\n                        }}\n                      >\n                        <option value=\"\">Select Type</option>\n                        <option value=\"HS_CODE\">HS Code</option>\n                        <option value=\"PRODUCT\">Product</option>\n                        {(values.tradeType == \"EXPORT\" && importerForExport == \"Y\") || values.tradeType == \"IMPORT\" ? <option value=\"IMPORTER\">Importer</option> : null}\n                        {(values.tradeType == \"IMPORT\" && exporterForImport == \"Y\" || values.tradeType == \"EXPORT\") ? <option value=\"EXPORTER\">Exporter</option> : null}\n                      </Field>\n                    </div>\n                  </div>\n                  <div className=\"col-md-2 pr-0 pb-2\">\n                    <div className=\"input-search\">\n                      <Field\n                        name={`queryBuilder[${index}].matchType`}\n                        component=\"select\"\n                        className={`hero__form-input form-control custom-select ${touched.matchType && errors.matchType ? \"is-invalid\" : \"\"}`}\n                        autoComplete=\"off\"\n                        onChange={event => {\n                          if (props.queryPerDay > 0) {\n                            setFieldValue(`queryBuilder[${index}].matchType`, event.target.value);\n                            queryBuilderSearchValue.length = 1\n                            setIsSearchClicked(false)\n                          }\n                          else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                            swalResponse()\n                          }\n                        }}\n                      >\n                        <option value=\"\">Select</option>\n                        {values.queryBuilder && values.queryBuilder.length > 0 && values.queryBuilder[index].hasOwnProperty(\"searchBy\") && values.queryBuilder[index].searchBy == \"PRODUCT\" ? <><option value=\"C\">Contains</option><option value=\"D\">Does Not Contains</option> </> : null}\n                        <option value=\"L\">Like</option>\n                      </Field>\n                    </div>\n                  </div>\n                  {queryBuilderSearchValue && queryBuilderSearchValue.length > 0 ?\n                    <div className=\"col-md-4 pr-0 pb-3\">\n                      <div className=\"input-search\" >\n                        <FormGroup >\n                          <Creatable\n                            placeholder=\"Select an individual\"\n                            name={`queryBuilder[${index}].searchValue`}\n                            options={queryBuilderSuggestions[index]}\n                            isMulti\n                            isOptionDisabled={() => values.queryBuilder[index].searchValue && values.queryBuilder[index].searchValue.length >= 10}\n                            noOptionsMessage={() => \"name not found\"}\n                            components={{ MenuList: SelectMenuButton }}\n                            onInputChange={(newValue) => props.queryPerDay > 0 ? getSuggestionList(newValue, values, index + 1) : null}\n                            onChange={(selectedOption) => {\n                              if (props.queryPerDay > 0) {\n                                let itemList = [];\n                                setIsSearchClicked(false)\n                                selectedOption.forEach((item) => {\n                                  itemList.push(item.value);\n                                });\n                                setFieldValue(`queryBuilder[${index}].searchValue`, itemList);\n                              }\n                              else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                swalResponse()\n                              }\n                            }}\n                            defaultValue={queryBuilderSearchValue[index]}\n                          />\n\n                          {errors.searchValue && touched.searchValue ? (\n                            <span className=\"errorMsg\">{errors.searchValue}</span>\n                          ) : null}\n                        </FormGroup>\n                      </div>\n                    </div> : null\n                  }\n                  {/* {console.log(\"values --- \", values)} */}\n                  <div className=\"col-md-2 pr-0 pb-2\">\n                    {values.searchBy != \"HS_CODE_2\" ?\n                      (<button\n                        type=\"button\" className=\"btn btn-warning\"\n                        onClick={() => arrayHelpers.remove(index)}\n                      >\n                        -\n                      </button>)\n                      :\n                      values.queryBuilder.length > 1 ?\n                        (<button\n                          type=\"button\" className=\"btn btn-warning\"\n                          onClick={() => arrayHelpers.remove(index)}\n                        >\n                          -\n                        </button>)\n                        : null\n                    }\n                    &nbsp;&nbsp;\n                    {values.queryBuilder.length < 3 ?\n                      <button\n                        type=\"button\" className=\"btn btn-warning\"\n                        onClick={() => arrayHelpers.push({ relation: \"\", searchBy: \"\", matchType: \"\", searchValue: \"\" })}\n                      >\n                        +\n                      </button> : null}\n                  </div>\n                </Fragment>\n              ))\n            ) : (\n              <div className=\"col-md-2 pr-0 pb-3\">\n                {workspace_id ? null :\n                  <button type=\"reset\" className=\"btn btn-warning\"\n                    onClick={() => arrayHelpers.push({ relation: \"\", searchBy: \"\", matchType: \"\", searchValue: \"\" })}>ADD</button>\n                }\n              </div>\n            )}\n\n          </>\n        )}\n      />\n    )\n  }\n\n  const swalResponse = () => {\n    Swal.fire({\n      title: 'Search !',\n      text: \"Your Search Limit Exhausted\",\n      icon: 'error',\n      dangerMode: true,\n      confirmButtonColor: '#3085d6',\n    })\n  }\n\n  return (\n    <>\n      <div className=\"container-fluid\" >\n        <div className=\"row\">\n          <div className=\"col-md-12 list-page mt-3\">\n            <div className=\"search-top\">\n              <h5>\n                Select Search Parameters\n              </h5>\n              <Formik\n                enableReinitialize={true}\n                initialValues={initialValues}\n                validationSchema={validateForm}\n                onSubmit={mainSearch}\n                resetForm\n              >\n                {({ values, errors, setFieldValue, setFieldError, touched, isValid, handleSubmit, submitForm, setFieldTouched, resetForm }) => {\n\n                  return (\n                    <Form>\n\n                      <div className=\"row\">\n                        <div className=\"col-md-3 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <Field\n                              name=\"tradeType\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.tradeType && errors.tradeType ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.tradeType}\n                              onChange={event => {\n                                if (props.queryPerDay > 0) {\n                                  setFieldValue(\"tradeType\", event.target.value);\n                                  setFieldValue(\"countryCode\", \"\");\n                                  setFieldValue(\"fromDate\", \"\");\n                                  setFieldValue(\"toDate\", \"\");\n                                  setFieldValue(\"dateRange\", \"\");\n                                  setIsSearchClicked(false)\n                                  setSearchResult([])\n                                  setFilteredColumn([])\n                                  setOrderByColumn(\"\")\n                                  setOrderByMode(\"desc\")\n                                  getTradingCountryList(event.target.value == \"IMPORT\" ? 'I' : 'E')\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                            >\n                              <option value=\"\">Select Trade</option>\n                              <option value=\"IMPORT\">Import</option>\n                              <option value=\"EXPORT\">Export</option>\n                            </Field>\n                            {errors.tradeType && touched.tradeType ? (\n                              <span className=\"errorMsg\">{errors.tradeType}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        {/* <div className=\"col-md-3 pr-0 pb-3\" >\n                          <div className=\"dropdown bootstrap-select hero__form-input  form-control custom-select-multi\" >\n                          <Field\n                              name=\"countryCode\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.countryCode && errors.countryCode ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.countryCode}\n                              isMulti\n                              \n                              onChange={event => {\n                                if(props.queryPerDay > 0 ){       \n                                  setFieldValue(\"countryCode\", event.target.value);\n                                  setFieldValue(\"fromDate\", \"\") ;\n                                  setFieldValue(\"toDate\", \"\") ;\n                                  setFieldValue(\"dateRange\", \"\") ;\n                                  setMaxMinDate(event.target.value, values.tradeType)\n                                  setIsSearchClicked(false)\n                                  setSearchResult([])\n                                  setFilteredColumn([])\n                                  setOrderByColumn(\"\")\n                                  setOrderByMode(\"desc\")\n                                  setCountryCode(event.target.value)\n                                  setExporterImporter(event.target.value, setFieldValue)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }                                \n                              }}\n                            >\n                              <option value = \"\" >Select Country</option>\n                              {Object.keys(tradeCountryList).map((item,index) => (                          \n                                <option key = {index} value={tradeCountryList[item].shortcode}>{tradeCountryList[item].name}</option>\n                              ))}\n                            </Field>\n                            {errors.countryCode && touched.countryCode ? (\n                                  <span className=\"errorMsg\">{errors.countryCode}</span>\n                            ) : null}\n                          <Select\n                              defaultValue={defaultCountry}\n                              isMulti\n                              placeholder = 'Select Country'\n                              name=\"countryCode\"\n                              options={  Object.keys(tradeCountryList).map((item,index) => (      \n                                 { label: tradeCountryList[item].name, value: tradeCountryList[item].shortcode }                                                 \n                              ))}\n                              className={`dropdown bootstrap-select hero__form-input ${touched.countryCode && errors.countryCode ? \"is-invalid\" : \"\"}`}\n                              classNamePrefix=\"select\"\n                              onChange={(selectedOption) => {\n                                let itemList = [];\n                                selectedOption.forEach((item)=>{\n                                  itemList.push(item.value);\n                                });\n                                setFieldValue(\"countryCode\", itemList);\n                              }}\n                            />\n\n                          <DropDownTreeComponent id=\"dropdowntree\"\n                            fields={ { \n                                      dataSource: tradeCountryList,\n                                      value: 'shortcode',\n                                      text: 'name',\n                                      parentValue: \"pid\",\n                                      hasChildren: 'hasChild'           \n                                    }} \n                            showCheckBox={true} \n                            treeSettings={treeSettings} \n                            showSelectAll={true}\n                            selectAllText={\"Check All\"} \n                            unSelectAllText={\"UnCheck All\"}       \n                            value = {countryCode}\n                            change={(selectedOption) => {                            \n                              setFieldValue(\"countryCode\", selectedOption.value);\n                            }}\n                            />\n                          <MultiSelect\n                            options={multiTradeCountryList}\n                            value={selectedTradeCountry}\n                            onChange={(selectedOption) => {\n                              setSelectedTradeCountry(selectedOption);\n                              const selectedValues = selectedOption.map(option => option.value);\n                              console.log(\"selectedValues >>> \", selectedValues)\n                              setFieldValue(\"countryCode\", selectedValues);\n                              setFieldValue(\"fromDate\", \"\");\n                              setFieldValue(\"toDate\", \"\");\n                              setFieldValue(\"dateRange\", \"\");\n                              setMaxMinDate(selectedOption, values.tradeType);\n                            }}\n                            labelledBy=\"Select\"\n                          />\n\n\n\n\n                          {errors.countryCode && touched.countryCode ? (\n                            <span className=\"errorMsg\">{errors.countryCode}</span>\n                          ) : null}\n                          </div>\n                        </div> */}\n\n                        <div className=\"col-md-3 pr-0 pb-3\" >\n\n\n                          <CountrySelector\n                            multiTradeCountryList={multiTradeCountryList}\n                            selectedTradeCountry={selectedTradeCountry}\n                            setFieldValue={setFieldValue}\n                            values={values}\n                            setSelectedTradeCountry={setSelectedTradeCountry}\n                            setMaxMinDate={setMaxMinDate}\n                          />\n\n\n                          {errors.countryCode && touched.countryCode ? (\n                            <span className=\"errorMsg\">{errors.countryCode}</span>\n                          ) : null}\n                          {/* </div> */}\n                        </div>\n                        <div className=\"col-md-2 pr-0 pb-3\">\n                          <div className=\"dropdown bootstrap-select hero__form-input\">\n                            <Field\n                              name=\"dateRange\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.dateRange && errors.dateRange ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.dateRange}\n                              onChange={event => {\n\n                                if (props.queryPerDay > 0) {\n                                  props.loadingStart()\n                                  setIsSearchClicked(false)\n                                  setFieldValue(\"dateRange\", event.target.value);\n                                  let tempmaxMin = setMaxMinDate(selectedTradeCountry, values.tradeType);\n                                  let tempMaxDate = moment(tempmaxMin).diff(moment(props.dataAccessUpto), 'days') > 0 ? props.dataAccessUpto : tempmaxMin\n                                  let newMaxDate = \"\"\n\n                                  if (values.countryCode.includes(\"IND\") || values.countryCode.includes(\"SEZ\")) {\n                                    const newDate = moment().diff(moment(tempMaxDate), 'days') > 0 ? tempMaxDate : new Date();\n                                    const d = new Date(newDate);\n                                    d.setDate(1);\n                                    newMaxDate = moment(d).subtract(1, 'days');\n                                  } else {\n                                    newMaxDate = moment().diff(moment(tempMaxDate), 'days') > 0 ? tempMaxDate : new Date();\n                                  }\n\n\n\n                                  let fromdate = \"\"\n                                  let dateDiff = \"\"\n                                  let tempFromdate = \"\"\n\n                                  if (newMaxDate != \"\") {\n                                    switch (event.target.value) {\n                                      case \"1\":\n\n                                        fromdate = new Date(newMaxDate);\n                                        fromdate.setDate(1)\n\n\n\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days')\n                                        if (dateDiff >= 0) {\n                                          setFieldValue(\"fromDate\", new Date(fromdate))\n                                        }\n                                        else {\n                                          setFieldValue(\"fromDate\", new Date(props.dataAccessInMonth))\n                                        }\n                                        setFieldValue(\"toDate\", new Date(newMaxDate))\n                                        props.loadingStop()\n                                        break;\n                                      case \"2\":\n\n                                        tempFromdate = moment(newMaxDate).subtract(3, 'months').add(5, \"days\").format(\"YYYY-MM-DD\")\n                                        fromdate = new Date(tempFromdate);\n                                        fromdate.setDate(1)\n\n\n\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days')\n                                        if (dateDiff >= 0) {\n                                          setFieldValue(\"fromDate\", new Date(fromdate))\n                                        }\n                                        else {\n                                          setFieldValue(\"fromDate\", new Date(props.dataAccessInMonth))\n                                        }\n                                        setFieldValue(\"toDate\", new Date(newMaxDate))\n                                        props.loadingStop()\n                                        break;\n\n                                      case \"3\":\n\n                                        tempFromdate = moment(newMaxDate).subtract(6, 'months').add(5, \"days\").format(\"YYYY-MM-DD\")\n                                        fromdate = new Date(tempFromdate);\n                                        fromdate.setDate(1)\n\n\n\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days')\n                                        if (dateDiff >= 0) {\n                                          setFieldValue(\"fromDate\", new Date(fromdate))\n                                        }\n                                        else {\n                                          setFieldValue(\"fromDate\", new Date(props.dataAccessInMonth))\n                                        }\n                                        setFieldValue(\"toDate\", new Date(newMaxDate))\n                                        props.loadingStop()\n                                        break;\n                                      case \"4\":\n                                        tempFromdate = moment(newMaxDate).subtract(12, 'months').add(5, \"days\").format(\"YYYY-MM-DD\")\n                                        fromdate = new Date(tempFromdate);\n                                        fromdate.setDate(1)\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days')\n                                        if (dateDiff >= 0) {\n                                          setFieldValue(\"fromDate\", new Date(fromdate))\n                                        }\n                                        else {\n                                          setFieldValue(\"fromDate\", new Date(props.dataAccessInMonth))\n                                        }\n                                        setFieldValue(\"toDate\", new Date(newMaxDate))\n                                        props.loadingStop()\n                                        break;\n                                      default:\n                                        setFieldValue(\"toDate\", \"\")\n                                        setFieldValue(\"fromDate\", \"\")\n                                        props.loadingStop()\n                                    }\n                                  }\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                            >\n                              <option value=\"\"> Choose Month Range</option>\n                              <option value=\"1\">LAST 1 MONTH</option>\n                              <option value=\"2\">LAST 3 MONTHS</option>\n                              <option value=\"3\">LAST 6 MONTHS</option>\n                              <option value=\"4\">LAST 1 YEAR</option>\n                              <option value=\"6\">CUSTOM</option>\n                            </Field>\n                            {errors.dateRange && touched.dateRange ? (\n                              <span className=\"errorMsg\">{errors.dateRange}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        <div className=\"col-md-2 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <DatePicker\n                              name=\"fromDate\"\n                              dateFormat=\"yyyy MMM dd  \"\n                              placeholderText=\"From\"\n                              peekPreviousMonth\n                              peekPreviousYear\n                              showMonthDropdown\n                              showYearDropdown\n                              minDate={moment(minDate).diff(moment(props.dataAccessInMonth), 'days') > 0 ? new Date(minDate) : new Date(props.dataAccessInMonth)}\n                              // maxDate={new Date(maxDate)}\n                              maxDate={(props.dataAccessUpto == null || props.dataAccessUpto == \"\") ? new Date(maxDate) : moment(props.dataAccessUpto).diff(moment(maxDate), 'days') > 0 ? new Date(maxDate) : new Date(props.dataAccessUpto)}\n                              className=\"form-control\"\n                              dropdownMode=\"select\"\n                              onChange={(value) => {\n                                if (props.queryPerDay > 0) {\n                                  setFieldValue(\"fromDate\", value);\n                                  setFieldTouched(\"fromDate\");\n                                  setFieldValue(\"dateRange\", 6)\n                                  setIsSearchClicked(false)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                              selected={values.fromDate}\n                            />\n                            {errors.fromDate && touched.fromDate ? (\n                              <span className=\"errorMsg\">{errors.fromDate}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        <div className=\"col-md-2 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <DatePicker\n                              name=\"toDate\"\n                              dateFormat=\"yyyy MMM dd  \"\n                              placeholderText=\"To\"\n                              peekPreviousMonth\n                              peekPreviousYear\n                              showMonthDropdown\n                              showYearDropdown\n                              //  minDate= {moment(minDate)} \n                              minDate={moment(minDate).diff(moment(props.dataAccessInMonth), 'days') > 0 ? new Date(minDate) : new Date(props.dataAccessInMonth)}\n                              maxDate={(props.dataAccessUpto == null || props.dataAccessUpto == \"\") ? new Date(maxDate) : moment(props.dataAccessUpto).diff(moment(maxDate), 'days') > 0 ? new Date(maxDate) : new Date(props.dataAccessUpto)}\n                              className=\"form-control\"\n                              dropdownMode=\"select\"\n                              onChange={(value) => {\n                                if (props.queryPerDay > 0) {\n                                  setFieldValue(\"toDate\", value);\n                                  setFieldTouched(\"toDate\");\n                                  setFieldValue(\"dateRange\", 6)\n                                  setIsSearchClicked(false)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                              selected={values.toDate}\n                            />\n                            {errors.toDate && touched.toDate ? (\n                              <span className=\"errorMsg\">{errors.toDate}</span>\n                            ) : null}\n                          </div>\n                        </div>\n\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"col-md-3 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <Field\n                              name=\"searchBy\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.searchBy && errors.searchBy ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.searchBy}\n                              onChange={event => {\n                                if (props.queryPerDay > 0) {\n                                  event.target.value == \"PRODUCT\" ? setFieldValue(\"matchType\", \"C\") : setFieldValue(\"matchType\", \"L\");\n                                  searchValue.length = 1\n                                  setFieldValue(\"searchBy\", event.target.value);\n                                  setIsSearchClicked(false)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                            >\n                              <option value=\"\">Select Type</option>\n                              <option value=\"HS_CODE_2\">HS Code 2 digit</option>\n                              <option value=\"HS_CODE\">HS Code</option>\n                              <option value=\"PRODUCT\">Product</option>\n                              {(values.tradeType == \"EXPORT\" && importerForExport == \"Y\") || values.tradeType == \"IMPORT\" ? <option value=\"IMPORTER\">Importer</option> : null}\n                              {(values.tradeType == \"IMPORT\" && exporterForImport == \"Y\" || values.tradeType == \"EXPORT\") ? <option value=\"EXPORTER\">Exporter</option> : null}\n                            </Field>\n                            {errors.searchBy && touched.searchBy ? (\n                              <span className=\"errorMsg\">{errors.searchBy}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        <div className=\"col-md-3 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <Field\n                              name=\"matchType\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.matchType && errors.matchType ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.matchType}\n                              onChange={event => {\n                                if (props.queryPerDay > 0) {\n                                  setFieldValue(\"matchType\", event.target.value);\n                                  searchValue.length = 1\n                                  setIsSearchClicked(false)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                            >\n                              <option value=\"\">Select</option>\n                              {values.searchBy == \"PRODUCT\" ? <><option value=\"C\">Contains</option><option value=\"D\">Does Not Contains</option> </> : null}\n                              <option value=\"L\">Like</option>\n                            </Field>\n                            {errors.matchType && touched.matchType ? (\n                              <span className=\"errorMsg\">{errors.matchType}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        {searchValue && searchValue.length > 0 ?\n                          <div className=\"col-md-4 pr-0 pb-3\">\n                            <div className=\"input-search\" >\n                              <FormGroup >\n                                <Creatable\n                                  placeholder={values.searchBy == \"HS_CODE\" ? \"Enter min 4 digit\" : \"Enter min 2 chars\"}\n                                  name=\"searchValue\"\n                                  options={suggestions}\n                                  isMulti\n                                  isOptionDisabled={() => values.searchValue && values.searchValue.length >= 10}\n                                  noOptionsMessage={() => \"name not found\"}\n                                  components={{ MenuList: SelectMenuButton }}\n                                  onInputChange={(newValue) => props.queryPerDay > 0 ? getSuggestionList(newValue, values, \"\") : null}\n                                  onChange={(selectedOption) => {\n\n                                    if (props.queryPerDay > 0) {\n                                      let itemList = [];\n                                      let newQuery = []\n                                      let isQueryBuilder = false\n                                      setIsSearchClicked(false)\n                                      selectedOption.forEach((item) => {\n                                        itemList.push(item.value);\n                                        if (values.searchBy == \"HS_CODE_2\") {\n                                          isQueryBuilder = true\n                                        }\n                                      });\n                                      if (isQueryBuilder == true) {\n                                        newQuery[0] = { relation: \"\", searchBy: \"\", matchType: \"\", searchValue: \"\" }\n                                        setFieldValue(\"queryBuilder\", newQuery)\n                                      }\n                                      setFieldValue(\"searchValue\", itemList);\n                                    }\n                                    else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                      swalResponse()\n                                    }\n                                  }}\n                                  defaultValue={searchValue}\n                                />\n\n                                {errors.searchValue && touched.searchValue ? (\n                                  <span className=\"errorMsg\">{errors.searchValue}</span>\n                                ) : null}\n                              </FormGroup>\n                            </div>\n                          </div> : null\n                        }\n\n                      </div>\n\n                      <div className=\"row\">\n                        {queryBuilder(values, errors, touched, setFieldTouched, setFieldValue, Fragment)}\n                      </div>\n\n                      {workspace_id ? null :\n                        <div className=\"row\">\n                          <div className=\"col-md-2 pr-0 pb-3\">\n                            <button type=\"reset\" className=\"btn btn-warning\"\n                              onClick={(event) => {\n                                resetSearch(setFieldValue, values);\n                              }}>Reset</button> &nbsp;\n                            <button type=\"submit\"\n                              disabled={isSearchClicked}\n                              onClick={(event) => {\n                                event.preventDefault();\n                                setSearchId(\"\");\n                                setFieldValue(\"searchFlag\", true);\n                                handleSubmit();\n                              }} className=\"btn btn-primary\">Search</button>\n                          </div>\n                        </div>\n                      }\n                    </Form>\n                  )\n                }\n                }\n              </Formik>\n            </div>\n\n            {searchParams && searchParams.tradeType && searchResult.length > 0 ? (\n              <div className=\"row searchCountBlk\">\n                <div className=\"col-md-12 text-center\">\n\n                  <h3>Search Result of {searchParams.tradeType.toLowerCase()} data from&nbsp;\n                    {moment(searchParams.fromDate).format(\"DD-MMM-YYYY\")} to {moment(searchParams.toDate).format('DD-MMM-YYYY')}</h3>\n\n                </div>\n                {noDataErrorMsg == false ?\n                  <>\n                    <div className=\"col-lg-2 col-md-2 offset-md-1\">\n                      <div className=\"card\">\n                        <div className=\"card-body bg-soft-primary\">\n                          <div className=\"avatar\">\n                            <span className=\"avatar-title bg-soft-primary rounded\">\n                              <i className=\"icon ion-ios-barcode text-primary font-size-24\"></i>\n                            </span>\n                          </div>\n                          <div className=\"list-in\">\n                            <p className=\"text-muted mt-0 mb-0\">HSCODE</p>\n                            <h4 className=\"mt-0 mb-0\">{hsCodeDataList.length}</h4>\n                          </div>\n                        </div>\n                        {hscodeLoading && (\n                          <div className=\"loaderBox\">\n                            <div className=\"loader\"></div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"col-lg-2 col-md-2\">\n                      <div className=\"card\">\n                        <div className=\"card-body bg-soft-success\">\n                          <div className=\"avatar\">\n                            <span className=\"avatar-title bg-soft-success rounded\">\n                              <i className=\"icon ion-md-filing text-primary font-size-24\"></i>\n                            </span>\n                          </div>\n                          <div className=\"list-in\">\n                            <p className=\"text-muted mt-0 mb-0\">Total Shipment</p>\n                            <h4 className=\"mt-0 mb-0\">{totalRecord}</h4>\n                          </div>\n                        </div>\n                        {totalRecordLoading && (\n                          <div className=\"loaderBox\">\n                            <div className=\"loader\"></div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"col-lg-2 col-md-2\">\n                      <div className=\"card\">\n                        <div className=\"card-body bg-soft-primary\">\n                          <div className=\"avatar\">\n                            <span className=\"avatar-title bg-soft-primary rounded\">\n                              <i className=\"icon ion-md-business text-primary font-size-24\"></i>\n                            </span>\n                          </div>\n                          <div className=\"list-in\">\n                            <p className=\"text-muted mt-0 mb-0\"> {tradeType == \"E\" ? \"Country Of Destination\" : \"Country Of Origin\"}</p>\n                            <h4 className=\"mt-0 mb-0\">{countryOriginList.length}</h4>\n                          </div>\n                        </div>\n                        {portDestLoading && (\n                          <div className=\"loaderBox\">\n                            <div className=\"loader\"></div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    {(searchParams.tradeType == \"IMPORT\" && exporterForImport == \"Y\" || searchParams.tradeType == \"EXPORT\") ?\n                      <div className=\"col-lg-2 col-md-2\">\n                        <div className=\"card\">\n                          <div className=\"card-body bg-soft-success\">\n                            <div className=\"avatar\">\n                              <span className=\"avatar-title bg-soft-success rounded\">\n                                <i className=\"icon ion-md-filing text-primary font-size-24\"></i>\n                              </span>\n                            </div>\n                            <div className=\"list-in\">\n                              <p className=\"text-muted mt-0 mb-0\">Exporter</p>\n                              <h4 className=\"mt-0 mb-0\">{exporterDataList && exporterDataList.length}</h4>\n                            </div>\n                          </div>\n                          {exporterLoading && (\n                            <div className=\"loaderBox\">\n                              <div className=\"loader\"></div>\n                            </div>\n                          )}\n                        </div>\n                      </div> : null}\n                    {(searchParams.tradeType == \"EXPORT\" && importerForExport == \"Y\") || searchParams.tradeType == \"IMPORT\" ?\n                      <div className=\"col-lg-2 col-md-2\">\n                        <div className=\"card\">\n                          <div className=\"card-body bg-soft-primary\">\n                            <div className=\"avatar\">\n                              <span className=\"avatar-title bg-soft-primary rounded\">\n                                <i className=\"icon ion-ios-business text-primary font-size-24\"></i>\n                              </span>\n                            </div>\n                            <div className=\"list-in\">\n                              <p className=\"text-muted mt-0 mb-0\">Importer</p>\n                              <h4 className=\"mt-0 mb-0\">{importerDataList && importerDataList.length}</h4>\n                              {/* <h4 className=\"mt-0 mb-0\">{searchParams.tradeType = \"IMPORT\" ? importerDataList.length : exporterDataList.length}</h4> */}\n                            </div>\n                          </div>\n                          {importerLoading && (\n                            <div className=\"loaderBox\">\n                              <div className=\"loader\"></div>\n                            </div>\n                          )}\n                        </div>\n                      </div> : null}\n                  </>\n                  :\n                  <div className=\"col-lg-12 col-md-12 text-center\">\n                    <p>&nbsp;</p>\n                    <p>&nbsp;</p>\n                    <img src={require('../assets/image/Error.png').default}></img>\n                    <h4><p>Sorry we couldn't find any matches.</p></h4>\n                    <h2>Please Try Again</h2>\n                  </div>\n                }\n              </div>\n            ) : null}\n\n            <Draggable>\n              <div class=\"ad-butt\">\n                <button className=\"btn btn-primary ad-butt-button\" onClick={() => setToggle(!toggle)}><i className=\"icon ion-md-search text-light font-size-35\"></i></button>\n              </div>\n            </Draggable>\n\n\n            <div ref={gridRef}></div>\n            {/* {console.log(\"Search Result >>> \", searchResult)}\n            {console.log(\"Filtered Column >>> \", filteredColumn)}\n            {console.log(\"Trade Type >>>> \", tradeType)} */}\n            {filteredColumn.length > 0 ? (\n              tradeType === 'E' ? (\n                <DataTableExport\n                  exportToCSV={exportToCSV}\n                  searchResult={searchResult}\n                  limit={limit}\n                  page={page}\n                  setPage={setPage}\n                  handleChangeLimit={handleChangeLimit}\n                  totalRecord={totalRecord}\n                  searchLoading={searchLoading}\n                  setOrderByColumn={setOrderByColumn}\n                  setOrderByMode={setOrderByMode}\n                  orderByColumn={orderByColumn}\n                  orderByMode={orderByMode}\n                  setWorkspace={setWorkspace}\n                  showModal={showModal}\n                  filteredColumn={filteredColumn}\n                  saveQuery={saveQuery}\n                  search_id={searchId ? searchId : search_id}\n                  state={props.location.state}\n                  exportSelectedToCSV={exportSelectedToCSV}\n                  importerDataList={importerDataList}\n                  countryCode={countryCode}\n                  newColumnsKeys={props.location.state && props.location.state.columnKeys ? props.location.state.columnKeys : []}\n                  importerForExport={importerForExport}\n                  exporterForImport={exporterForImport}\n                  filterCountryList={filterCountryList}\n                />\n              ) : (\n                <DataTableImport\n                  exportToCSV={exportToCSV}\n                  searchResult={searchResult}\n                  limit={limit}\n                  page={page}\n                  setPage={setPage}\n                  handleChangeLimit={handleChangeLimit}\n                  totalRecord={totalRecord}\n                  searchLoading={searchLoading}\n                  setOrderByColumn={setOrderByColumn}\n                  setOrderByMode={setOrderByMode}\n                  orderByColumn={orderByColumn}\n                  orderByMode={orderByMode}\n                  setWorkspace={setWorkspace}\n                  showModal={showModal}\n                  filteredColumn={filteredColumn}\n                  saveQuery={saveQuery}\n                  search_id={searchId ? searchId : search_id}\n                  state={props.location.state}\n                  exportSelectedToCSV={exportSelectedToCSV}\n                  importerDataList={importerDataList}\n                  countryCode={countryCode}\n                  newColumnsKeys={props.location.state && props.location.state.columnKeys ? props.location.state.columnKeys : []}\n                  importerForExport={importerForExport}\n                  exporterForImport={exporterForImport}\n                  filterCountryList={filterCountryList}\n                />\n              )) : noDataErrorMsg ? <div><h2>No records found</h2></div> : null}\n          </div>\n        </div>\n\n        {toggle && <AdvanceSearch toggleFromChild={setToggle}\n          importerDataList={importerDataList}\n          exporterDataList={exporterDataList}\n          portOriginDataList={portOriginDataList}\n          portDestinationDataList={portDestinationDataList}\n          countryOriginList={countryOriginList}\n          countryDestinationList={countryDestinationList}\n          hsCodeDataList={hsCodeDataList}\n          shipmentModeDataList={shipmentModeDataList}\n          shipmentModeList={shipmentModeList}\n          type={searchParams.tradeType}\n          countryCode={searchParams.countryCode}\n          updateFilter={updateFilter}\n          portOriginList={portOriginList}\n          portDestinationList={portDestinationList}\n          hsCodeList={hsCodeList}\n          importerList={importerList}\n          exporterList={exporterList}\n          cityOriginList={cityOriginList}\n          cityDestinationList={cityDestinationList}\n          hsCode4digitDataList={hsCode4digitDataList}\n          hsCode4DigitList={hsCode4DigitList}\n          fetchSearchQuery={fetchSearchQuery}\n          resetFilter={resetFilter}\n          stdUnitList={stdUnitList}\n          stdUnitDataList={stdUnitDataList}\n          searchId={searchId}\n          importerForExport={importerForExport}\n          exporterForImport={exporterForImport}\n          consumptionType={consumptionType}\n          consumptionTypeDataList={consumptionTypeDataList}\n          incotermList={incotermList}\n          incotermDataList={incotermListData}\n          notifyPartyList={notifyPartyList}\n          notifyPartyDataList={notifyPartyListData}\n        />\n        }\n      </div>\n      <div id=\"reportXLS\" hidden={true}>\n        {filteredArray && filteredArray.length > 0 ? <DloadTemplateXLS filteredArray={filteredArray} tradeType={tradeType} countryCode={countryCode} /> : null}\n      </div>\n\n      <Modal\n        show={showModal}\n        onHide={toggleModal}\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Save search</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <label>Workspace:</label>\n              <select className=\"form-control\" ref={workspaceRef}\n                onChange={(e) => { handleWorkspaceChange(e) }}>\n                <option >--select--</option>\n                <option value=\"newWorkspace\">Create New Workspace</option>\n                {workspaceList.map((ws, index) => {\n                  return (\n                    <option key={index} value={ws.id}>{ws.name}</option>\n                  )\n                })}\n              </select>\n              {wsError && (<p className='error'>{wsError}</p>)}\n            </div>\n            {showNewWorkspaceInput ?\n              <div className=\"col-md-12\">\n                <label>New workspace name:</label>\n                <input type=\"text\" name=\"title\" ref={sWorkspaceRef} className=\"form-control\" />\n                {sNewWsError && (<p className='error'>{sNewWsError}</p>)}\n              </div> : null\n            }\n            <div className=\"col-md-12\">\n              <label>Title:</label>\n              <input type=\"text\" name=\"title\" ref={sTitleRef} className=\"form-control\" />\n              {sTitleError && (<p className='error'>{sTitleError}</p>)}\n            </div>\n            <div className=\"col-md-12\">\n              <label>Description:</label>\n              <input type=\"text\" name=\"title\" ref={sDescRef} className=\"form-control\" />\n              {sDescError && (<p className='error'>{sDescError}</p>)}\n            </div>\n\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={toggleModal}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={() => {\n            getNewWorkspaceId()\n          }}>Submit</Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\n\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loader.loading,\n    download_count: state.data.download_count,\n    subscriptionId: state.data.subscriptionId,\n    dataAccess_count: state.data.dataAccess_count,\n    totalWorkspace: state.data.totalWorkspace,\n    subUserCount: state.data.subUserCount,\n    queryPerDay: state.data.queryPerDay,\n    downloadArray: state.data.downloadArray,\n    countryList: state.data.countryList,\n    dataAccessInMonth: state.data.dataAccessInMonth,\n    download_count_subUser: state.data.download_count_subUser,\n    dataAccessUpto: state.data.dataAccessUpto,\n    maxDownload: state.data.maxDownload,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadingStart: () => dispatch(loaderStart()),\n    loadingStop: () => dispatch(loaderStop()),\n    updateSubscriptionCount: (data) => dispatch(updateSubscriptionCount(data)),\n    updateDownloadArrayCount: (data) => dispatch(updateDownloadArrayCount(data)),\n    setDloadCountSubuser: (data) => dispatch(setDloadCountSubuser(data)),\n    setSearchQuery: (data) => dispatch(setSearchQuery(data))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(List));\n"],"sourceRoot":""}