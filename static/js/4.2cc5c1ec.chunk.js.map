{"version":3,"sources":["assets/image/pencil-square.svg","pages/downloadlog.js"],"names":["searchBYList","cityDestinationList","cityOriginList","exporterList","hsCode4DigitList","hsCodeList","importerList","portDestinationList","portOriginList","searchValue","withRouter","connect","state","loading","loader","download_count","data","subscriptionId","dataAccess_count","totalWorkspace","subUserCount","queryPerDay","dispatch","loadingStart","loaderStart","loadingStop","loaderStop","updateSubscriptionCount","props","useHistory","userId","localStorage","getItem","userData","JSON","parse","searchList","setSearchList","useState","searchListData","setSearchListData","sortName","setSortName","undefined","sortOrder","setSortOrder","setSearchValue","isDownloaded","setIsDownloaded","filteredArray","setFilteredArray","useEffect","getSearchList","userID","uplineId","Axios","method","url","then","res","tempQueryList","queryList","length","map","item","index","jsonData","Object","keys","key","Val","subKey","subVal","item2","index2","subitem","subindex","relation","searchBy","push","console","log","catch","err","options","onSortChange","_jsx","_Fragment","children","_jsxs","className","BootstrapTable","striped","hover","pagination","search","TableHeaderColumn","width","isKey","dataField","dataFormat","indexN","cell","row","enumObject","dataSort","QueryFormat","filter","elements","periodFormat","moment","fromDate","format","toDate","searchedByFormat","downloadedByEmail","searchedOnFormat","downloadedDate","id","hidden","DloadTemplateXLS"],"mappings":"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","file":"static/js/4.2cc5c1ec.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pencil-square.75d078b5.svg\";","import React, { useEffect, useState } from 'react';\nimport Axios from \"../shared/Axios\";\nimport moment from 'moment';\nimport { useHistory } from 'react-router-dom';\nimport imagePencil from '../assets/image/pencil-square.svg';\nimport {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';\nimport { loaderStart, loaderStop } from \"../store/actions/loader\";\nimport {updateSubscriptionCount} from \"../store/actions/data\"\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router-dom';\nimport DloadTemplateXLS from '../components/DloadTemplateXLS'\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\n\n// const searchBYList = { \"HS_CODE\": \"HS Code\", \"PRODUCT\": \"Product\", \"IMPORTER\": \"Importer\", \"EXPORTER\": \"Exporter\" };\n\nconst searchBYList = {\n  cityDestinationList : \"Destination City\",\n  cityOriginList : \"City of Origin\", \n  exporterList : \"Exporter List\", \n  hsCode4DigitList : \"HS Code (4 Digit)\", \n  hsCodeList : \"HS Code (8 Digit)\", \n  importerList : \"Importer List\", \n  portDestinationList : \"Destination Port\", \n  portOriginList : \"Port of Origin\", \n  searchValue : \"Search Value\"\n  }\n\n  let initialValues = {\n    tradeType: \"\",\n    searchBy: \"\",\n    searchValue: \"\",\n    countryCode: \"\",\n    fromDate: \"\",\n    toDate: \"\",\n    matchType: \"\",\n    dateRange: \"\",\n    searchFlag: false\n  };\n\n const  DownloadLog = (props) => {\n  const history = useHistory();\n\n  const userId = localStorage.getItem(\"userToken\");\n  let userData = localStorage.getItem(\"user\");\n  userData = userData ? JSON.parse(userData) : {};\n\n  const [searchList, setSearchList] = useState([]);\n  const [searchListData, setSearchListData] = useState([]);\n  const [sortName, setSortName] = useState(undefined);\n  const [sortOrder, setSortOrder] = useState(undefined);\n  const [searchValue, setSearchValue] = useState([]);\n  const [isDownloaded, setIsDownloaded] = useState(\"\");\n  const [filteredArray, setFilteredArray] = useState([]);\n\n\n  const getSearchList = () => {\n\n    let userID = \"\"\n    userID = userData && userData.uplineId == 0 ? \"uplineId\" : \"userId\" ;\n    props.loadingStart()\n    Axios({\n      method: \"GET\",\n      url: `search-management/search/listAll?${userID}=${userId}&isDownloaded=Y`\n    })\n      .then(res => {\n        let tempQueryList = []\n        if(res.data.queryList && res.data.queryList.length > 0){      \n          res.data.queryList.map((item,index)=> {   \n            let jsonData = {} \n            Object.keys(item).map((key,Val)=>{    \n              if(key != \"userSearchQuery\"){\n                jsonData[key] = item[key] \n              }\n              else {\n                Object.keys(item[\"userSearchQuery\"]).map((subKey,subVal)=>{\n                  jsonData[subKey] = item[\"userSearchQuery\"][subKey]\n                  jsonData['querySting'] = searchBYList ? Object.keys(searchBYList).map((item2, index2) => (\n                    item2 == \"queryBuilder\" && item[\"userSearchQuery\"][item2] ? (\n                        item[\"userSearchQuery\"][item2].map((subitem, subindex) => (\n                          `<b>${searchBYList[item2]+(subindex+1)}</b>` +\" : \"+\n                          `<b>${searchBYList[\"relation\"]}</b>` +\" : \"+ subitem.relation + \" ,&nbsp \"+ `<b>${searchBYList[\"searchBy\"]}</b>` +\" : \"+ subitem.searchBy + \" ,&nbsp \"+ `<b>${searchBYList[\"searchValue\"]}</b>` +\" : \"+ subitem.searchValue\n                        ))\n                      ) : \n                      (item[\"userSearchQuery\"][item2] != \"\" && item[\"userSearchQuery\"][item2] != null ? `<b>&nbsp;${searchBYList[item2]}</b>` +\" : \"+ item[\"userSearchQuery\"][item2] : null)\n                    )) : null\n\n                })\n              }\n            })\n            tempQueryList.push(jsonData)     \n          })\n        }\n        console.log(\"tempQueryList [======= \", tempQueryList)   \n        setSearchList(tempQueryList);\n        setSearchListData(tempQueryList);\n        props.loadingStop()\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        props.loadingStop()\n      });\n  }\n\n  const fetchSearchQuery = (search_id) => {\n    if (search_id) {\n      let newSuggestionList = []\n      Axios({\n        method: \"GET\",\n        url: `/search-management/search/details`,\n        params: { searchId: search_id }\n      })\n        .then(res => {\n          if (res.data.queryList) {\n            let sParams = res.data.queryList[0].userSearchQuery;\n            initialValues = {\n              ...initialValues,\n              tradeType: sParams.tradeType,\n              matchType: sParams.matchType,\n              searchBy: sParams.searchBy,\n              searchValue: sParams.searchValue,\n              countryCode: sParams.countryCode,\n              fromDate: sParams.fromDate ? new Date(sParams.fromDate) : \"\",\n              toDate: sParams.toDate ? new Date(sParams.toDate) : \"\" ,\n              dateRange: search_id ? \"6\" : \"\",\n            };\n            \n            sParams.searchValue.map((item,index)=> {\n              let specificItem = { \"value\": item, \"label\": item };\n              newSuggestionList.push(specificItem); \n            })\n            setSearchValue(newSuggestionList)   \n            exportToCSV(sParams,search_id);    \n            setIsDownloaded(res.data.queryList[0].isDownloaded)  \n          }\n        })\n        .catch(err => {\n          console.log(\"Err\", err);\n        });\n    }\n  }\n\n  const exportToCSV = (searchParams,searchId) => {\n      const postData = {\n        \"searchType\": \"TRADE\",\n        \"tradeType\": searchParams.tradeType,\n        \"fromDate\": searchParams.fromDate,\n        \"toDate\": searchParams.toDate,\n        \"searchBy\": searchParams.searchBy,\n        \"searchValue\": searchParams.searchValue,\n        \"countryCode\": searchParams.countryCode,\n        \"pageNumber\": 0,\n        \"numberOfRecords\": 5000,\n        \"searchId\": searchId,\n        \"hsCodeList\": searchParams.hsCodeList,\n        \"exporterList\": searchParams.exporterList,\n        \"importerList\": searchParams.importerList,\n        \"cityOriginList\": searchParams.cityOriginList,\n        \"cityDestinationList\": searchParams.cityDestinationList,\n        \"portOriginList\": searchParams.portOriginList,\n        \"portDestinationList\": searchParams.portDestinationList,\n        \"orderByColumn\": \"\",\n        \"orderByMode\": \"desc\",\n        \"matchType\": searchParams.matchType,\n        \"hsCode4DigitList\": searchParams.hsCode4DigitList,\n\n      }\n      Axios({\n        method: \"POST\",\n        url: `search-management/search`,\n        data: JSON.stringify(postData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          let exportDataSet = [];\n          if (searchParams.tradeType.toLowerCase() === \"export\" && searchParams.countryCode.toUpperCase() === \"USA\") {\n            exportDataSet = res.data.expForeignList\n          } \n          else if (searchParams.tradeType.toLowerCase() === \"export\" && searchParams.countryCode.toUpperCase() === \"IND\") {\n            exportDataSet = res.data.expIndList\n          } \n          else if (searchParams.tradeType.toLowerCase() === \"import\" && searchParams.countryCode.toUpperCase() === \"USA\") {\n            exportDataSet = res.data.impForeignList\n          } \n          else if (searchParams.tradeType.toLowerCase() === \"import\" && searchParams.countryCode.toUpperCase() === \"IND\") {\n            exportDataSet = res.data.impIndList\n          }         \n          else {\n            exportDataSet = []\n          }\n\n          let filteredArray = []\n          for(let i = 0; i < exportDataSet.length; i++){\n            let filtered = {};\n              let obj = exportDataSet[i];\n              for(let key in obj){\n                  if(typeof(obj[key] == \"object\")){\n                      let item = obj[key];                    \n                      if(item != null){             \n                        filtered[key] = obj[key];                       \n                      }                 \n                  }                         \n              }   \n              filteredArray.push(filtered);\n          }    \n          setFilteredArray(filteredArray)\n          // setTimeout(downloadXLS(searchParams,totalRecord,1), 5000)\n          downloadXLS(searchParams)\n          \n          \n        })\n        .catch(err => {\n          console.log(\"Err == \", err);\n        });\n  }\n  \n  const downloadXLS = (searchParams) => {\n    const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".xlsx\";\n    const fileName = searchParams.tradeType+\"_\"+searchParams.countryCode+\"_\"+searchParams.fromDate+\"_\"+searchParams.toDate;\n    // const ws = XLSX.utils.json_to_sheet(filteredArray);\n      \n    const ws = XLSX.utils.table_to_sheet(document.getElementById(\"reportXLS\"));\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);                 \n\n  }\n\n\n  function onSortChange(sortName, sortOrder) {\n    setSortName(sortName);\n    setSortOrder(sortOrder);\n  }\n\n  useEffect(() => {\n    getSearchList();\n  }, []);\n\n  const searchTypeFormat = (cell,row) => {\n    return cell.searchType \n  }\n\n  const QueryFormat =(cell,row,enumObject, index) => {\n    \n    // let textString  =  searchBYList ? Object.keys(searchBYList).map((item, index) => (\n    //       row[item] != \"\" && row[item] != null ? `<b>${searchBYList[item]}</b>` +\" : \"+ row[item] : null\n    //     ) ) : null \n\n    let res = cell.filter(elements => {\n      return elements !== null;\n      });\n    return (res)\n\n  }\n\n  const tradeTypeFormat = (cell,row) => {\n    return cell.tradeType \n  }\n\n  const countryFormat = (cell,row) => {\n    return cell.countryCode \n  }\n\n  const periodFormat = (cell,row) => {\n    return moment(row.fromDate).format(\"MMM. DD, YYYY\") +\"-\"+\n    moment(row.toDate).format(\"MMM. DD, YYYY\")\n  }\n\n  const searchedOnFormat = (cell,row) => {\n    return moment(row.downloadedDate).format(\"MMM. DD, YYYY, h:mm:ss a\")\n  }\n\n  const searchedByFormat = (cell,row) => {\n    return cell + \" [ \" +row.downloadedByEmail+ \" ]\"\n  }\n\n\n  const actionFormatter = (cell,row) => {\n    return (<div> <button onClick={() => {\n      fetchSearchQuery(cell)\n    }} className=\"effect-btn btn btn-primary mt-2 mr-2 icon-lg\"><i className=\"icon ion-md-download\"></i></button>\n    </div>)\n  }\n\n  const options = {\n    sortName: sortName,\n    sortOrder: sortOrder,\n    onSortChange: onSortChange\n  };\n\n  const indexN = (cell,row,enumObject, index) => {\n    return  (<div>{index+1}</div>);\n  }\n\n  return (\n    <>\n      <div className=\"container-fluid\">\n\n        <div className=\"row\">\n          <div className=\"col-md-12 list-page mt-3\">\n    \n          <div className=\"row\">\n          <div className=\"col-lg-12 grid-margin stretch-card\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4 className=\"card-title\">Download History</h4>\n                <div >\n                <BootstrapTable  data={searchList} striped hover \n                    pagination={ true } search\n                    options={ options }\n                >\n                    <TableHeaderColumn width='70' isKey dataField='id' dataFormat={ indexN }>Sl No</TableHeaderColumn>\n                    <TableHeaderColumn width='100' dataField='searchType'  dataSort={ true }>Search Type</TableHeaderColumn>\n                    <TableHeaderColumn width='400' dataField='querySting' dataFormat={ QueryFormat } >Query</TableHeaderColumn>\n                    <TableHeaderColumn width='100' dataField='tradeType'  dataSort={ true }>Trade Type</TableHeaderColumn>\n                    <TableHeaderColumn width='100' dataField='countryCode' dataSort={ true }>Country</TableHeaderColumn>\n                    <TableHeaderColumn width='150' dataField='userSearchQuery' dataFormat={ periodFormat } dataSort={ true }>Period</TableHeaderColumn>\n                    <TableHeaderColumn width='100' dataField='totalRecords'  dataSort={ true }>Total Records</TableHeaderColumn>\n                   { userData && userData.uplineId == 0 ?\n                    <TableHeaderColumn width='200' dataField='downloadedByName' dataFormat={ searchedByFormat } dataSort={ true }>Download By</TableHeaderColumn> : null\n                   }\n                    <TableHeaderColumn width='200' dataField='userSearchQuery' dataFormat={ searchedOnFormat } dataSort={ true }>Download On</TableHeaderColumn>\n                    <TableHeaderColumn width='100' dataField='recordsDownloaded' dataSort={ true }>Records</TableHeaderColumn>\n                    {/* <TableHeaderColumn width='150' dataField='searchId'  dataFormat={ actionFormatter }>Action</TableHeaderColumn> */}\n                </BootstrapTable>\n\n                </div>\n              </div>\n            </div>\n          </div>\n          </div>\n\n          </div>\n        </div>\n\n        <div  id=\"reportXLS\" hidden= {true}>\n          {filteredArray && filteredArray.length > 0 ? <DloadTemplateXLS filteredArray={filteredArray}  /> : null}\n        </div>\n      </div>\n\n\n    </>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loader.loading,\n    download_count: state.data.download_count,\n    subscriptionId: state.data.subscriptionId,\n    dataAccess_count: state.data.dataAccess_count,\n    totalWorkspace: state.data.totalWorkspace,\n    subUserCount: state.data.subUserCount,\n    queryPerDay: state.data.queryPerDay,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadingStart: () => dispatch(loaderStart()),\n    loadingStop: () => dispatch(loaderStop()),\n    updateSubscriptionCount: (data) => dispatch(updateSubscriptionCount(data)), \n  };\n};\nexport default withRouter (connect( mapStateToProps, mapDispatchToProps)(DownloadLog));\n"],"sourceRoot":""}