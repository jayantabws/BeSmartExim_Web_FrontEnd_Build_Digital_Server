{"version":3,"sources":["pages/list1.js"],"names":["initialValues","tradeType","searchBy","searchValue","countryCode","fromDate","toDate","matchType","dateRange","searchFlag","queryBuilder","SearchQueryCount","isMainSearch","scrollToRef","ref","window","scrollTo","current","offsetTop","CountrySelector","_ref","multiTradeCountryList","selectedTradeCountry","setFieldValue","values","setSelectedTradeCountry","setMaxMinDate","showModal","setShowModal","useState","tempSelectedCountries","setTempSelectedCountries","selectAll","setSelectAll","checkedCountryCount","setCheckedCountryCount","countryRecords","setCountryRecords","countryPayload","setCountryPayload","groupedCountries","reduce","acc","country","continent","continentName","push","useEffect","selectedValues","map","value","length","getCountryLabelWithCount","countryLabel","record","find","item","column_name","records_count","_jsxs","_Fragment","children","_jsx","className","onClick","async","payload","moment","format","columnName","consumptionType","incoterm","notifyParty","numberOfRecords","orderByColumn","orderByMode","pageNumber","searchType","shipModeList","stdUnitList","response","Axios","method","url","data","JSON","stringify","headers","distinctColumnValuesList","error","console","label","join","Modal","show","onHide","size","Header","closeButton","Title","Body","type","checked","onChange","handleSelectAllChange","allCountryValues","updatedSelectedCountries","Object","keys","index","includes","shortcode","updatedTempSelectedCountries","filter","code","handleCheckboxChange","Flag","iso2code","style","width","height","marginRight","alt","validateForm","Yup","shape","required","test","checkGreaterStartEndTimes","this","parent","checkGreaterTimes","withRouter","connect","state","loading","loader","download_count","subscriptionId","dataAccess_count","totalWorkspace","subUserCount","queryPerDay","downloadArray","countryList","dataAccessInMonth","download_count_subUser","dataAccessUpto","maxDownload","dispatch","loadingStart","loaderStart","loadingStop","loaderStop","updateSubscriptionCount","updateDownloadArrayCount","setDloadCountSubuser","setSearchQuery","props","userId","localStorage","getItem","user","loggedUser","parse","userId_new","firstname","lastname","email","uplineId","userid","history","useHistory","search_id","location","searchTypeValue","search_type","workspace_id","workspace_name","workspace_desc","workspaceId","newSearch","gridRef","useRef","toggle","setToggle","searchResult","setSearchResult","limit","setLimit","page","setPage","totalRecord","setTotalRecord","searchLoading","setSearchLoading","searchParams","setSearchParams","importerList","setImporterList","importerDataList","setImporterDataList","exporterList","setExporterList","exporterDataList","setExporterDataList","portOriginList","setPortOriginList","portOriginDataList","setPortOriginDataList","portDestinationDataList","setPortDestinationDataList","portDestinationList","setPortDestinationList","countryOriginList","setCountryOriginList","countryDestinationList","setCountryDestinationList","hsCodeList","setHsCodeList","hsCodeDataList","setHsCodeDataList","cityOriginList","setCityOriginList","cityDestinationList","setCityDestinationList","searchId","setSearchId","setOrderByColumn","setOrderByMode","hscodeLoading","isHscodeLoading","portDestLoading","isPortDestLoading","coLoading","isCoLoading","importerLoading","isImporterLoading","exporterLoading","isExporterLoading","totalRecordLoading","isTotalRecordLoading","shipmentModeDataList","setShipmentModeDataList","shipmentModeList","setShipmentModeList","hsCode4DigitList","setHsCode4digitList","hsCode4digitDataList","setHsCode4digitDataList","filteredColumn","setFilteredColumn","suggestions","setSuggestions","queryBuilderSuggestions","setQueryBuilderSuggestions","isDownloaded","setIsDownloaded","noDataErrorMsg","setNoDataErrorMsg","isSearchClicked","setIsSearchClicked","previousTotalRecordCount","setPreviousTotalRecordCount","stdUnitDataList","setStdUnitDataList","setStdUnitList","setCountryCode","importerForExport","setImporterForExport","exporterForImport","setExporterForImport","returnSearchId","setReturnSearchId","setConsumptionType","consumptionTypeDataList","setConsumptionTypeDataList","incotermList","setIncotermList","incotermListData","setIncotermListData","notifyPartyList","setNotifyPartyList","notifyPartyListData","setNotifyPartyListData","sTitleRef","sDescRef","workspaceRef","sWorkspaceRef","setTradeType","sTitleError","isSTitleError","sDescError","isSDescError","sNewWsError","isNewWsError","wsError","isWsError","workspaceList","setWorkspaceList","tradeCountryList","setTradeCountryList","setMultiTradeCountryList","setSearchValue","queryBuilderSearchValue","setQueryBuilderSearchValue","showNewWorkspaceInput","setshowNewWorkspaceInput","minDate","setMinDate","Date","maxDate","setMaxDate","filteredArray","setFilteredArray","countryWeightage","setCountryWeightage","filterCountryList","setFilterCountryList","selectedFilterCountryList","setSelectedFilterCountryList","toggleModal","UpdateSubscription","params","AxiosUser","then","res","catch","err","LoginCheck","setWorkspace","val","Swal","fire","title","text","icon","dangerMode","showCancelButton","confirmButtonColor","cancelButtonColor","isConfirm","saveQuery","postData","AxiosACT","errorMsg","getPaginationSearchData","getTradingCountryList","handleChangeLimit","dataKey","handleSearch","arguments","undefined","minQuantity","maxQuantity","minValue","maxValue","minUnitPrice","maxUnitPrice","consumptionTypeList","descriptionList","conditionProductDescription","lp","setItem","getSearchData","exportToCSV","Math","round","exportDataSet","countryCodes","toUpperCase","tempTradeType","toLowerCase","expForeignList","impForeignList","i","filtered","obj","key","downloadXLS","log","confirmButtonText","exportSelectedToCSV","checkedRowID","subItem","subIndex","id","dloadType","prevDownloadArray","newIDArray","newValueArray","totalNewWeightage","total","match1","ctry_code","weightagePoints","totalFilteredWeightage","match","remainingDload","remainingDload_subUser","countryWeightageSummary","forEach","countryName","totalCount","totalWeightage","html","fileType","fileExtension","fileName","wb","Sheets","XLSX","table_to_sheet","document","getElementById","header","SheetNames","excelBuffer","bookType","Blob","FileSaver","saveLogPayload","saveDownloadLog","UpdateDownloadTracher","downloadSearch","apiSerachpayload","setApiSearchPayload","tempSearchResult","rangeQuantityStart","rangeQuantityEnd","rangeValueUsdStart","rangeValueUsdEnd","rangeUnitPriceUsdStart","rangeUnitPriceUsdEnd","productDesc","conditionProductDesc","getTotalCount","objColumns","x","countryRes","tempOptions","countryWiseCount","_ref2","ctry_name","shipment_count","getImporterList","getExporterList","getPortOriginList","getPortDestinationList","getHSCodeList","getIndianCityList","getForeignCountryList","getHSCode4digitList","getShipmentModeList","getStdUnitList","searchQuery","columnKey","formattedOptions","_ref3","e","getConsumptionTypeDataList","apiResponse","_ref4","getIncotermListDataList","_ref5","getNotifyPartyListDataList","searchID","updateSearchCount","setTimeout","totalRecords","totalDownloadRecords","importList","importersList","specificItem","importer_name","exportList","exportersList","exporter_name","portsList","port_name","hsList","hscodesList","hscode","fcList","countriesList","country_name","icList","citiesList","city_name","ship_mode","std_unit","updateFilter","handleSaveSearch","parseInt","fetchSearchQuery","getSuggestionList","innitialParams","newSuggestionList","QueryBuilderNewSuggestionList","suggestionList","listSuggestion","SelectMenuButton","components","MenuList","AxiosMaster","multiCountryList","continentId","name","image","exportPointWeightage","importPointWeightage","assign","hasChild","queryBuilderSuggestionList","queryList","sParams","userSearchQuery","newitem","newindex","tempArray","fetchTradingCountryListOnInnitialize","selectedCountryList","_tempRow$","_tempRow$2","tempRow","some","importFrom","importUpto","exportFrom","exportUpto","setDate","selectedCountries","fromDates","toDates","min","max","removeItem","errors","touched","setFieldTouched","Fragment","FieldArray","render","arrayHelpers","Field","component","autoComplete","event","target","swalResponse","hasOwnProperty","FormGroup","Creatable","placeholder","options","isMulti","isOptionDisabled","noOptionsMessage","onInputChange","newValue","selectedOption","itemList","defaultValue","remove","relation","Formik","enableReinitialize","validationSchema","onSubmit","checkValidErr","errMsg","subitem","resetForm","_ref6","setFieldError","isValid","handleSubmit","submitForm","Form","tempmaxMin","tempMaxDate","diff","newMaxDate","newDate","d","subtract","fromdate","dateDiff","tempFromdate","add","opt","DatePicker","dateFormat","placeholderText","peekPreviousMonth","peekPreviousYear","showMonthDropdown","showYearDropdown","dropdownMode","selected","selectedValue","resetSearch","disabled","preventDefault","src","require","default","Draggable","class","DataTableExport","newColumnsKeys","columnKeys","DataTableImport","AdvanceSearch","toggleFromChild","resetFilter","incotermDataList","notifyPartyDataList","hidden","DloadTemplateXLS","backdrop","keyboard","handleWorkspaceChange","ws","Footer","Button","variant","getNewWorkspaceId"],"mappings":"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","file":"static/js/7.15734d5f.chunk.js","sourcesContent":["import React, { useState, useRef, useCallback, useEffect, Fragment } from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\n// import { DatePicker, Space } from 'antd';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport 'react-datepicker/dist/react-datepicker-cssmodules.min.css'\nimport DropdownMultiselect from \"react-multiselect-dropdown-bootstrap\";\nimport { MultiSelect } from \"react-multi-select-component\";\n// import beData from \"../assets/data/IMP-BE2.json\";\nimport moment from 'moment';\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\nimport Axios from '../shared/Axios';\nimport { Field, Formik, Form, FieldArray } from 'formik';\nimport { Button, Modal, FormGroup } from 'react-bootstrap';\nimport * as Yup from \"yup\";\nimport DataTableImport from '../components/DataTableImport';\nimport DataTableExport from '../components/DataTableExport';\nimport AdvanceSearch from '../components/AdvanceSearch';\nimport Swal from 'sweetalert2';\nimport AxiosACT from \"../shared/AxiosACT\";\nimport AxiosMaster from \"../shared/AxiosMaster\";\nimport AxiosUser from \"../shared/AxiosUser\";\nimport Select, { components } from 'react-select';\nimport { DropDownTreeComponent, ColumnsDirective, ColumnDirective, Filter, Sort, Reorder, Inject, ITreeData } from '@syncfusion/ej2-react-dropdowns';\nimport Creatable from 'react-select/creatable';\nimport * as ReactDOM from 'react-dom';\n// import { TagsInput } from \"react-tag-input-component\";\n// import ReactTags from \"react-tag-autocomplete\";\nimport {\n  checkGreaterTimes,\n  checkGreaterStartEndTimes\n} from \"../shared/validationFunctions\";\nimport Draggable from 'react-draggable';\nimport { loaderStart, loaderStop } from \"../store/actions/loader\";\nimport { updateSubscriptionCount, updateDownloadArrayCount, setDloadCountSubuser, setSearchQuery } from \"../store/actions/data\"\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router-dom';\nimport DloadTemplateXLS from '../components/DloadTemplateXLS'\nimport { testJson } from '../shared/JSONString'\nimport LoginCheck from '../shared/LoginCheck';\nimport ReactCountryFlag from \"react-country-flag\"\nimport Flag from 'react-world-flags';\n\n\nlet initialValues = {\n  tradeType: \"\",\n  searchBy: \"\",\n  searchValue: \"\",\n  countryCode: \"\",\n  fromDate: \"\",\n  toDate: \"\",\n  matchType: \"\",\n  dateRange: \"\",\n  searchFlag: false,\n  queryBuilder: [],\n  SearchQueryCount: 0,\n  isMainSearch: false\n};\n\nlet treeSettings = { autoCheck: true };\n\nconst dateFormat = \"YYYY-MM-DD\";\nconst scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop)\n// const columnOptions = ['Date', 'HSCODE', 'Product Description', 'Value', 'Quantity', 'Unit', 'Port Of Destination', 'Foreign Country', 'Indian Company Name', 'Foreign Company Name']\n\n\n\nlet defaultCountry = []\n\n// -------country list show in modal 26.05.2025----------//\n\n\n\n\n// const CountrySelector = ({ multiTradeCountryList, selectedTradeCountry, setFieldValue, values, setSelectedTradeCountry, setMaxMinDate }) => {\n//   const [showModal, setShowModal] = useState(false);\n//   const [tempSelectedCountries, setTempSelectedCountries] = useState([]);\n//   const [selectAll, setSelectAll] = useState(false); // State to track \"Select All\" checkbox\n\n//   // Synchronize tempSelectedCountries with selectedTradeCountry when it changes\n//   useEffect(() => {\n//     const selectedValues = selectedTradeCountry.map((country) => country.value);\n//     setTempSelectedCountries(selectedValues);\n//     setSelectAll(selectedValues.length === multiTradeCountryList.length); // Update \"Select All\" checkbox state\n//   }, [selectedTradeCountry, multiTradeCountryList]);\n\n//   const handleCheckboxChange = (shortcode) => {\n//     let updatedTempSelectedCountries;\n\n//     if (tempSelectedCountries.includes(shortcode)) {\n//       // Remove the country if it's already selected\n//       updatedTempSelectedCountries = tempSelectedCountries.filter((code) => code !== shortcode);\n//     } else {\n//       // Add the country if it's not selected\n//       updatedTempSelectedCountries = [...tempSelectedCountries, shortcode];\n//     }\n\n//     // Update the state and form values\n//     setTempSelectedCountries(updatedTempSelectedCountries);\n\n//     const updatedSelectedCountries = multiTradeCountryList.filter((country) =>\n//       updatedTempSelectedCountries.includes(country.value)\n//     );\n\n//     setSelectedTradeCountry(updatedSelectedCountries);\n//     setFieldValue(\"countryCode\", updatedTempSelectedCountries);\n//     setFieldValue(\"fromDate\", \"\");\n//     setFieldValue(\"toDate\", \"\");\n//     setFieldValue(\"dateRange\", \"\");\n//     setMaxMinDate(updatedSelectedCountries, values.tradeType);\n\n//     // Update \"Select All\" checkbox state\n//     setSelectAll(updatedTempSelectedCountries.length === multiTradeCountryList.length);\n//   };\n\n//   const handleSelectAllChange = () => {\n//     if (selectAll) {\n//       // Deselect all\n//       setTempSelectedCountries([]);\n//       setSelectedTradeCountry([]);\n//       setFieldValue(\"countryCode\", []);\n//       setFieldValue(\"fromDate\", \"\");\n//       setFieldValue(\"toDate\", \"\");\n//       setFieldValue(\"dateRange\", \"\");\n//       setMaxMinDate([], values.tradeType);\n//     } else {\n//       // Select all\n//       const allCountryValues = multiTradeCountryList.map((country) => country.value);\n//       setTempSelectedCountries(allCountryValues);\n\n//       const updatedSelectedCountries = multiTradeCountryList;\n//       setSelectedTradeCountry(updatedSelectedCountries);\n//       setFieldValue(\"countryCode\", allCountryValues);\n//       setFieldValue(\"fromDate\", \"\");\n//       setFieldValue(\"toDate\", \"\");\n//       setFieldValue(\"dateRange\", \"\");\n//       setMaxMinDate(updatedSelectedCountries, values.tradeType);\n//     }\n\n//     setSelectAll(!selectAll); // Toggle \"Select All\" checkbox state\n//   };\n\n//   const getDisplayText = () => {\n//     if (selectedTradeCountry.length <= 2) {\n//       return selectedTradeCountry.map((country) => country.label).join(\", \");\n//     }\n//     return `${selectedTradeCountry[0].label}, ${selectedTradeCountry[1].label}, ...`;\n//   };\n\n//   return (\n//     <>\n//       {/* Box displaying selected countries */}\n//       <div\n//         className=\"country-box countryModal\"\n//         onClick={() => setShowModal(true)}\n//       >\n//         {selectedTradeCountry.length > 0 ? getDisplayText() : \"Select Countries\"}\n//       </div>\n\n//       {/* Modal for country selection */}\n//       <Modal show={showModal} onHide={() => setShowModal(false)} size=\"lg\">\n//         <Modal.Header closeButton>\n//           <Modal.Title>Select Countries</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <div className=\"row mb-3\">\n//             <div className=\"col-md-12\">\n//               <div className=\"d-flex align-items-center countryModal_data_div\">\n//                 <input\n//                   type=\"checkbox\"\n//                   checked={selectAll}\n//                   onChange={handleSelectAllChange}\n//                 // style={{ width: \"20px\", height: \"20px\", marginRight: \"10px\" }}\n//                 />\n//                 <label>Select All</label>\n//               </div>\n//             </div>\n//           </div>\n//           <div\n//             className=\"row countryModal_row\"\n//           >\n//             {multiTradeCountryList.map((country) => (\n//               <div key={country.value} className=\"col-md-4 mb-3\">\n//                 <div\n//                   className=\"d-flex align-items-center countryModal_data_div\"\n//                 >\n//                   <input\n//                     type=\"checkbox\"\n//                     checked={tempSelectedCountries.includes(country.value)}\n//                     onChange={() => handleCheckboxChange(country.value)}\n//                   />\n//                   <label>\n//                     <ReactCountryFlag\n//                       className=\"emojiFlag\"\n//                       countryCode={country.iso2code}\n//                       style={{\n//                         fontSize: '1.5em',\n//                         lineHeight: '2em',\n//                         paddingRight: '5px'\n//                       }}\n//                       aria-label=\"United States\"\n//                     />\n//                     {country.label}</label>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         </Modal.Body>\n\n//       </Modal>\n//     </>\n//   );\n// };\n\n// -------country list show in modal 26.05.2025----------//\n\n//---- country list show by continent @ 30.05.2025 ----//\n\n// const CountrySelector = ({ multiTradeCountryList, selectedTradeCountry, setFieldValue, values, setSelectedTradeCountry, setMaxMinDate }) => {\n//   const [showModal, setShowModal] = useState(false);\n//   const [tempSelectedCountries, setTempSelectedCountries] = useState([]);\n//   const [selectAll, setSelectAll] = useState(false); // State to track \"Select All\" checkbox\n\n//   console.log(\"multiTradeCountryList\", multiTradeCountryList)\n\n//   // Group countries by continent\n//   const groupedCountries = multiTradeCountryList.reduce((acc, country) => {\n//     const continent = country.continentName || \"Unknown\";\n//     if (!acc[continent]) {\n//       acc[continent] = [];\n//     }\n//     acc[continent].push(country);\n//     return acc;\n//   }, {});\n\n//   // Synchronize tempSelectedCountries with selectedTradeCountry when it changes\n//   useEffect(() => {\n//     const selectedValues = selectedTradeCountry.map((country) => country.value);\n//     setTempSelectedCountries(selectedValues);\n//     setSelectAll(selectedValues.length === multiTradeCountryList.length); // Update \"Select All\" checkbox state\n//   }, [selectedTradeCountry, multiTradeCountryList]);\n\n//   const handleCheckboxChange = (shortcode) => {\n//     let updatedTempSelectedCountries;\n\n//     if (tempSelectedCountries.includes(shortcode)) {\n//       // Remove the country if it's already selected\n//       updatedTempSelectedCountries = tempSelectedCountries.filter((code) => code !== shortcode);\n//     } else {\n//       // Add the country if it's not selected\n//       updatedTempSelectedCountries = [...tempSelectedCountries, shortcode];\n//     }\n\n//     // Update the state and form values\n//     setTempSelectedCountries(updatedTempSelectedCountries);\n\n//     const updatedSelectedCountries = multiTradeCountryList.filter((country) =>\n//       updatedTempSelectedCountries.includes(country.value)\n//     );\n\n//     setSelectedTradeCountry(updatedSelectedCountries);\n//     setFieldValue(\"countryCode\", updatedTempSelectedCountries);\n//     setFieldValue(\"fromDate\", \"\");\n//     setFieldValue(\"toDate\", \"\");\n//     setFieldValue(\"dateRange\", \"\");\n//     setMaxMinDate(updatedSelectedCountries, values.tradeType);\n\n//     // Update \"Select All\" checkbox state\n//     setSelectAll(updatedTempSelectedCountries.length === multiTradeCountryList.length);\n//   };\n\n//   const handleSelectAllChange = () => {\n//     if (selectAll) {\n//       // Deselect all\n//       setTempSelectedCountries([]);\n//       setSelectedTradeCountry([]);\n//       setFieldValue(\"countryCode\", []);\n//       setFieldValue(\"fromDate\", \"\");\n//       setFieldValue(\"toDate\", \"\");\n//       setFieldValue(\"dateRange\", \"\");\n//       setMaxMinDate([], values.tradeType);\n//     } else {\n//       // Select all\n//       const allCountryValues = multiTradeCountryList.map((country) => country.value);\n//       setTempSelectedCountries(allCountryValues);\n\n//       const updatedSelectedCountries = multiTradeCountryList;\n//       setSelectedTradeCountry(updatedSelectedCountries);\n//       setFieldValue(\"countryCode\", allCountryValues);\n//       setFieldValue(\"fromDate\", \"\");\n//       setFieldValue(\"toDate\", \"\");\n//       setFieldValue(\"dateRange\", \"\");\n//       setMaxMinDate(updatedSelectedCountries, values.tradeType);\n//     }\n\n//     setSelectAll(!selectAll); // Toggle \"Select All\" checkbox state\n//   };\n\n//   const getDisplayText = () => {\n//     if (selectedTradeCountry.length <= 2) {\n//       return selectedTradeCountry.map((country) => country.label).join(\", \");\n//     }\n//     return `${selectedTradeCountry[0].label}, ${selectedTradeCountry[1].label}, ...`;\n//   };\n\n//   console.log(\"selectedTradeCountry >>>>>>>>>>>>\", selectedTradeCountry.length)\n\n//   return (\n//     <>\n//       {/* Box displaying selected countries */}\n//       <div\n//         className=\"country-box countryModal\"\n//         onClick={() => setShowModal(true)}\n//       >\n//         {selectedTradeCountry.length > 0 ? getDisplayText() : \"Select Countries\"}\n//       </div>\n\n//       {/* Modal for country selection */}\n//       <Modal show={showModal} onHide={() => setShowModal(false)} size=\"lg\">\n//         <Modal.Header closeButton>\n//           <Modal.Title>Select Countries</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <div className=\"row mb-3\">\n//             <div className=\"col-md-12\">\n//               <div className=\"d-flex align-items-center countryModal_data_div\">\n//                 <input\n//                   type=\"checkbox\"\n//                   checked={selectAll}\n//                   onChange={handleSelectAllChange}\n//                 />\n//                 <label>Select All</label>\n//               </div>\n//             </div>\n//           </div>\n//           {/* Grouped countries by continent */}\n//           <div className='countryModalData'>\n//             {Object.keys(groupedCountries).map((continent, index) => (\n//               <div key={index} className=\"continent-section countryModal_contentSection\" >\n//                 <h5>{continent}</h5>\n//                 <div className=\"row countryModal_row\">\n//                   {groupedCountries[continent].map((country) => (\n//                     <div key={country.value} className=\"col-md-4\">\n//                       <div className=\"d-flex align-items-center countryModal_data_div\">\n//                         <input\n//                           type=\"checkbox\"\n//                           checked={tempSelectedCountries.includes(country.value)}\n//                           onChange={() => handleCheckboxChange(country.value)}\n//                         />\n//                         <label>\n//                           {/* <ReactCountryFlag\n//                             className=\"emojiFlag\"\n//                             countryCode={country.iso2code}\n//                             style={{\n//                               fontSize: '1.5em',\n//                               lineHeight: '2em',\n//                               paddingRight: '5px'\n//                             }}\n//                             aria-label={country.label}\n//                           /> */}\n\n//                           <Flag\n//                             code={country.iso2code}\n//                             style={{ width: '2em', height: '1.5em', marginRight: '5px' }}\n//                             alt={country.label}\n//                           />\n\n//                           {country.label}\n//                         </label>\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n\n//         </Modal.Body>\n//       </Modal>\n//     </>\n//   );\n// };\n\n//---- country list show by continent @ 30.05.2025 ----//\n\n\n// --- country modal modification with count @sarbojitghosh22 3-5-2025 --- //\nconst CountrySelector = ({ multiTradeCountryList, selectedTradeCountry, setFieldValue, values, setSelectedTradeCountry, setMaxMinDate }) => {\n\n  const [showModal, setShowModal] = useState(false);\n  const [tempSelectedCountries, setTempSelectedCountries] = useState([]);\n  const [selectAll, setSelectAll] = useState(false); // State to track \"Select All\" checkbox\n  const [checkedCountryCount, setCheckedCountryCount] = useState(null); // State to store the count of checked countries\n  const [countryRecords, setCountryRecords] = useState([]); // State to store records_count data\n  const [countryPayload, setCountryPayload] = useState({})\n\n\n  // Group countries by continent\n  const groupedCountries = multiTradeCountryList.reduce((acc, country) => {\n    const continent = country.continentName || \"Unknown\";\n    if (!acc[continent]) {\n      acc[continent] = [];\n    }\n    acc[continent].push(country);\n    return acc;\n  }, {});\n\n  // Synchronize tempSelectedCountries with selectedTradeCountry when it changes\n  useEffect(() => {\n    const selectedValues = selectedTradeCountry.map((country) => country.value);\n    setTempSelectedCountries(selectedValues);\n    setSelectAll(selectedValues.length === multiTradeCountryList.length); // Update \"Select All\" checkbox state\n  }, [selectedTradeCountry, multiTradeCountryList]);\n\n  const handleCheckboxChange = (shortcode) => {\n    let updatedTempSelectedCountries;\n\n    if (tempSelectedCountries.includes(shortcode)) {\n      // Remove the country if it's already selected\n      updatedTempSelectedCountries = tempSelectedCountries.filter((code) => code !== shortcode);\n    } else {\n      // Add the country if it's not selected\n      updatedTempSelectedCountries = [...tempSelectedCountries, shortcode];\n    }\n\n    // Update the state and form values\n    setTempSelectedCountries(updatedTempSelectedCountries);\n\n    const updatedSelectedCountries = multiTradeCountryList.filter((country) =>\n      updatedTempSelectedCountries.includes(country.value)\n    );\n\n    setSelectedTradeCountry(updatedSelectedCountries);\n    setFieldValue(\"countryCode\", updatedTempSelectedCountries);\n    setFieldValue(\"fromDate\", \"\");\n    setFieldValue(\"toDate\", \"\");\n    setFieldValue(\"dateRange\", \"\");\n    setMaxMinDate(updatedSelectedCountries, values.tradeType);\n\n    // Update \"Select All\" checkbox state\n    setSelectAll(updatedTempSelectedCountries.length === multiTradeCountryList.length);\n\n    // Reset the count if manually checked/unchecked\n    setCheckedCountryCount(null);\n  };\n\n  const handleSelectAllChange = () => {\n    if (selectAll) {\n      // Deselect all\n      setTempSelectedCountries([]);\n      setSelectedTradeCountry([]);\n      setFieldValue(\"countryCode\", []);\n      setFieldValue(\"fromDate\", \"\");\n      setFieldValue(\"toDate\", \"\");\n      setFieldValue(\"dateRange\", \"\");\n      setMaxMinDate([], values.tradeType);\n    } else {\n      // Select all\n      const allCountryValues = multiTradeCountryList.map((country) => country.value);\n      setTempSelectedCountries(allCountryValues);\n\n      const updatedSelectedCountries = multiTradeCountryList;\n      setSelectedTradeCountry(updatedSelectedCountries);\n      setFieldValue(\"countryCode\", allCountryValues);\n      setFieldValue(\"fromDate\", \"\");\n      setFieldValue(\"toDate\", \"\");\n      setFieldValue(\"dateRange\", \"\");\n      setMaxMinDate(updatedSelectedCountries, values.tradeType);\n    }\n\n    setSelectAll(!selectAll); // Toggle \"Select All\" checkbox state\n\n    // Reset the count if manually checked/unchecked\n    setCheckedCountryCount(null);\n  };\n\n  const handleOpenModal = async () => {\n    setShowModal(true);\n\n    // Make the API call only if there are selected countries\n    if (selectedTradeCountry.length > 0) {\n      const payload = {\n        tradeType: values.tradeType,\n        searchBy: values.searchBy,\n        searchValue: values.searchValue,\n        countryCode: values.countryCode,\n        fromDate: moment(values.fromDate).format(\"YYYY-MM-DD\"),\n        toDate: moment(values.toDate).format(\"YYYY-MM-DD\"),\n        matchType: values.matchType,\n        queryBuilder: values.queryBuilder,\n        columnName: \"ctry_name\",\n        consumptionType: [],\n        incoterm: [],\n        notifyParty: [],\n        numberOfRecords: 20,\n        orderByColumn: \"\",\n        orderByMode: \"desc\",\n        pageNumber: 0,\n        searchType: \"HISTORY\",\n        shipModeList: [],\n        stdUnitList: [],\n      };\n\n      try {\n        const response = await Axios({\n          method: \"POST\",\n          url: `/search-management/listdistinctcolumnvalue`,\n          data: JSON.stringify(payload),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n\n        // Update the country records based on the API response\n        if (response.data && response.data.distinctColumnValuesList) {\n          setCountryRecords(response.data.distinctColumnValuesList);\n        }\n      } catch (error) {\n        console.error(\"Error fetching country data:\", error);\n      }\n    }\n  };\n\n  const getDisplayText = () => {\n    if (selectedTradeCountry.length <= 2) {\n      return selectedTradeCountry.map((country) => country.label).join(\", \");\n    }\n    return `${selectedTradeCountry[0].label}, ${selectedTradeCountry[1].label}, ...`;\n  };\n\n  const getCountryLabelWithCount = (countryLabel) => {\n    const record = countryRecords.find((item) => item.column_name === countryLabel);\n    return record ? `${countryLabel} (${record.records_count})` : `${countryLabel} (0)`;\n  };\n\n  return (\n    <>\n      {/* Box displaying selected countries */}\n      <div\n        className=\"country-box countryModal\"\n        onClick={handleOpenModal}\n      >\n        {selectedTradeCountry.length > 0 ? getDisplayText() : \"Select Countries\"}\n      </div>\n\n      {/* Modal for country selection */}\n      <Modal show={showModal} onHide={() => setShowModal(false)} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Select Countries</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row mb-3\">\n            <div className=\"col-md-12\">\n              <div className=\"d-flex align-items-center countryModal_data_div\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectAll}\n                  onChange={handleSelectAllChange}\n                />\n                <label>Select All</label>\n              </div>\n            </div>\n          </div>\n          {/* Display count of checked countries */}\n          {checkedCountryCount !== null && (\n            <div className=\"row mb-3\">\n              <div className=\"col-md-12\">\n                <p>Checked Countries: {checkedCountryCount}</p>\n              </div>\n            </div>\n          )}\n          {/* Grouped countries by continent */}\n          <div className=\"countryModalData\">\n            {Object.keys(groupedCountries).map((continent, index) => (\n              <div key={index} className=\"continent-section countryModal_contentSection\">\n                <h5>{continent}</h5>\n                <div className=\"row countryModal_row\">\n                  {groupedCountries[continent].map((country) => (\n                    <div key={country.value} className=\"col-md-4\">\n                      <div className=\"d-flex align-items-center countryModal_data_div\">\n                        <input\n                          type=\"checkbox\"\n                          checked={tempSelectedCountries.includes(country.value)}\n                          onChange={() => handleCheckboxChange(country.value)}\n                        />\n                        <label>\n                          <Flag\n                            code={country.iso2code}\n                            style={{ width: \"2em\", height: \"1.5em\", marginRight: \"5px\" }}\n                            alt={country.label}\n                          />\n                          {getCountryLabelWithCount(country.label)}\n                        </label>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\n\n\n// --- country modal modification with count @sarbojitghosh22 3-5-2025 --- //\n\n\nconst validateForm = Yup.object().shape({\n  tradeType: Yup.string().required(\"Please select trade type\"),\n  searchBy: Yup.string().required(\"This field is required\"),\n  matchType: Yup.string().required(\"This field is required\"),\n  dateRange: Yup.string().required(\"This field is required\"),\n\n  //   searchValue: Yup.mixed().when(['searchBy'], {\n  //     is: (searchBy) => (searchBy == 'HS_CODE'),\n  //     then: Yup.array().of(Yup.string()\n  //     .matches(/^[0-9]*$/, function() {\n  //       return \"Enter valid number\"\n  //     }))\n  //     .required('Required'),\n  //     otherwise: Yup.array().of(Yup.string().matches(/^[A-Za-z0-9-_\\s]*$/, function() {\n  //       return \"Enter valid input\"\n  //     })).required('Required')\n  // }),\n  // countryCode: Yup.array().of(Yup.string().required(\"This field is required\")),    \n  fromDate: Yup.date().required(\"This field is required\")\n    .test(\n      \"checkGreaterStartEndTimes\",\n      \"From date should be less than To date\",\n      function (value) {\n        if (value) {\n          return checkGreaterStartEndTimes(value, this.parent.toDate);\n        }\n        return true;\n      }\n    ),\n  toDate: Yup.date().required(\"This field is required\")\n    .test(\n      \"checkGreaterStartEndTimes\",\n      \"To date should be greater than From date\",\n      function (value) {\n        if (value) {\n          return checkGreaterStartEndTimes(this.parent.fromDate, value);\n        }\n        return true;\n      }\n    )\n    .test(\n      \"checkGreaterTimes\",\n      \"To date should be less than 3 years\",\n      function (value) {\n        if (value) {\n          return checkGreaterTimes(this.parent.fromDate, value);\n        }\n        return true;\n      }\n    ),\n});\n\nconst tempOptions = [\n  { label: \"Option 1\", value: \"1\" },\n  { label: \"Option 2\", value: \"2\" },\n  { label: \"Option 3\", value: \"3\" },\n];\n\n\nconst List = (props) => {\n\n  const userId = localStorage.getItem(\"userToken\");\n  const user = localStorage.getItem(\"user\");\n  const loggedUser = user ? JSON.parse(user) : {};\n  const userName = `${loggedUser.firstname} ${loggedUser.lastname}`;\n  const userEmail = loggedUser.email;\n  const userId_new = loggedUser.uplineId > 0 ? loggedUser.uplineId : loggedUser.userid\n\n  const history = useHistory();\n  const search_id = props.location.state ? props.location.state.search_id : null;\n\n  // console.log(\"props ==== \", props)\n  const searchTypeValue = props.location.state && props.location.state.search_type ? props.location.state.search_type : \"\";\n  const workspace_id = props.location.state && props.location.state.workspace_id ? props.location.state.workspace_id : \"\";\n  const workspace_name = props.location.state ? props.location.state.workspace_name : \"\";\n  const workspace_desc = props.location.state ? props.location.state.workspace_desc : \"\";\n  const workspaceId = props.location.state ? props.location.state.workspaceId : \"\";\n  const newSearch = [{ \"value\": props && props.location.state && props.location.state.searchValue, \"label\": props && props.location.state && props.location.state.searchValue }];\n\n\n  const gridRef = useRef();\n\n  const [toggle, setToggle] = useState(false);\n  const [searchResult, setSearchResult] = useState([]);\n  const [limit, setLimit] = useState(20);\n  const [page, setPage] = useState(1);\n  const [totalRecord, setTotalRecord] = useState(0);\n  const [searchLoading, setSearchLoading] = useState(false);\n  const [searchParams, setSearchParams] = useState(initialValues.searchValue);\n  const [importerList, setImporterList] = useState([]);\n  const [importerDataList, setImporterDataList] = useState([]);\n  const [exporterList, setExporterList] = useState([]);\n  const [exporterDataList, setExporterDataList] = useState([]);\n  const [portOriginList, setPortOriginList] = useState([]);\n  const [portOriginDataList, setPortOriginDataList] = useState([]);\n  const [portDestinationDataList, setPortDestinationDataList] = useState([]);\n  const [portDestinationList, setPortDestinationList] = useState([]);\n  const [countryOriginList, setCountryOriginList] = useState([]);\n  const [countryDestinationList, setCountryDestinationList] = useState([]);\n  const [hsCodeList, setHsCodeList] = useState([]);\n  const [hsCodeDataList, setHsCodeDataList] = useState([]);\n  const [cityOriginList, setCityOriginList] = useState([]);\n  const [cityDestinationList, setCityDestinationList] = useState([]);\n  const [searchId, setSearchId] = useState();\n  const [orderByColumn, setOrderByColumn] = useState(\"\");\n  const [orderByMode, setOrderByMode] = useState(\"desc\");\n  const [hscodeLoading, isHscodeLoading] = useState(false);\n  const [portDestLoading, isPortDestLoading] = useState(false);\n  const [coLoading, isCoLoading] = useState(false);\n  const [importerLoading, isImporterLoading] = useState(false);\n  const [exporterLoading, isExporterLoading] = useState(false);\n  const [totalRecordLoading, isTotalRecordLoading] = useState(false);\n\n  const [shipmentModeDataList, setShipmentModeDataList] = useState([]);\n  const [shipmentModeList, setShipmentModeList] = useState([]);\n  const [hsCode4DigitList, setHsCode4digitList] = useState([])\n  const [hsCode4digitDataList, setHsCode4digitDataList] = useState([])\n  const [filteredColumn, setFilteredColumn] = useState([])\n  const [suggestions, setSuggestions] = useState([])\n  const [queryBuilderSuggestions, setQueryBuilderSuggestions] = useState([])\n  const [isDownloaded, setIsDownloaded] = useState(\"\");\n  const [noDataErrorMsg, setNoDataErrorMsg] = useState(false);\n  const [isSearchClicked, setIsSearchClicked] = useState(true);\n  const [previousTotalRecordCount, setPreviousTotalRecordCount] = useState(0);\n  const [stdUnitDataList, setStdUnitDataList] = useState([]);\n  const [stdUnitList, setStdUnitList] = useState([]);\n  const [countryCode, setCountryCode] = useState(\"\");\n  const [importerForExport, setImporterForExport] = useState(\"\");\n  const [exporterForImport, setExporterForImport] = useState(\"\");\n  const [returnSearchId, setReturnSearchId] = useState([]);\n\n  const [consumptionType, setConsumptionType] = useState([]);\n  const [consumptionTypeDataList, setConsumptionTypeDataList] = useState([]);\n  const [incotermList, setIncotermList] = useState([]);\n  const [incotermListData, setIncotermListData] = useState([]);\n  const [notifyPartyList, setNotifyPartyList] = useState([]);\n  const [notifyPartyListData, setNotifyPartyListData] = useState([]);\n  // const [fieldArray , setFieldArray] = useState([])\n\n\n\n  const sTitleRef = useRef();\n  const sDescRef = useRef();\n  const workspaceRef = useRef();\n  const sWorkspaceRef = useRef();\n  const [showModal, setShowModal] = useState(false);\n  const [tradeType, setTradeType] = useState(\"\");\n  const [sTitleError, isSTitleError] = useState(\"\");\n  const [sDescError, isSDescError] = useState(\"\");\n  const [sNewWsError, isNewWsError] = useState(\"\");\n  const [wsError, isWsError] = useState(\"\");\n  const [workspaceList, setWorkspaceList] = useState([]);\n  const [tradeCountryList, setTradeCountryList] = useState([]);\n  const [multiTradeCountryList, setMultiTradeCountryList] = useState([]);\n  const [selectedTradeCountry, setSelectedTradeCountry] = useState([])\n  const [searchValue, setSearchValue] = useState([]);\n  const [queryBuilderSearchValue, setQueryBuilderSearchValue] = useState([]);\n  const [showNewWorkspaceInput, setshowNewWorkspaceInput] = useState(false);\n  const [minDate, setMinDate] = useState(new Date());\n  const [maxDate, setMaxDate] = useState(new Date());\n  const [filteredArray, setFilteredArray] = useState([]);\n  const [countryWeightage, setCountryWeightage] = useState(1);\n\n  /* For country filter array after search */\n  const [filterCountryList, setFilterCountryList] = useState([]);\n  const [selectedFilterCountryList, setSelectedFilterCountryList] = useState([]);\n\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n    isSTitleError(\"\");\n    isSDescError(\"\");\n    isNewWsError(\"\");\n    isWsError(\"\")\n  }\n\n\n\n  const UpdateSubscription = (params) => {\n\n    AxiosUser({\n      method: \"PUT\",\n      url: `user-management/user-subscription/update/${props.subscriptionId}`,\n      data: JSON.stringify(params),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n      })\n      .catch(err => {\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n      });\n\n  }\n\n  useEffect(() => {\n    LoginCheck(history)\n  }, [props.loading, searchValue, workspaceList, searchLoading])\n\n  const UpdateUser = (params) => {\n\n    AxiosUser({\n      method: \"PUT\",\n      url: `user-management/user/${userId}`,\n      data: JSON.stringify(params),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n      })\n      .catch(err => {\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n      });\n\n  }\n\n  const UpdateDownloadTracher = (prevDownloadArray) => {\n\n    let DownloadArray = props.downloadArray\n\n    const params = {\n      \"userId\": userId_new,\n      \"downloadedRecords\": prevDownloadArray\n    }\n\n    AxiosACT({\n      method: \"POST\",\n      url: \"/activity-management/download-tracker/update\",\n      data: JSON.stringify(params),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"user\", res.data);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n      });\n\n  }\n\n  const setWorkspace = (val) => {\n    if (props.totalWorkspace > 0) {\n      Swal.fire({\n        title: 'Create Workspace !',\n        text: `Available Limit ${props.totalWorkspace}. \\n Are you sure you want to Create New Workspace ?`,\n        icon: 'warning',\n        dangerMode: true,\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n      }).then((isConfirm) => {\n        if (isConfirm.value) {\n          setShowModal(val)\n        }\n      })\n    }\n    else {\n      Swal.fire({\n        title: 'Create Workspace !',\n        text: \"Your Workspace Limit Exhausted\",\n        icon: 'error',\n        dangerMode: true,\n        confirmButtonColor: '#3085d6',\n      }).then((isConfirm) => { })\n    }\n  }\n\n\n  const saveQuery = () => {\n    const postData = {\n      \"workspace_id\": workspace_id,\n      \"search_id\": searchId,\n      \"name\": workspace_name,\n      \"description\": workspace_desc,\n      \"is_active\": \"Y\",\n      \"id\": workspaceId\n    }\n    AxiosACT({\n      method: \"POST\",\n      url: `/activity-management/workspace/savesearch`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        Swal.fire({\n          title: 'Success',\n          text: \"Search query saved successfully\",\n          icon: 'success',\n        })\n      })\n      .catch(err => {\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n        if (err.data.errorMsg) {\n          errorMsg = err.data.errorMsg;\n        }\n        Swal.fire({\n          title: 'Oops!',\n          text: errorMsg,\n          icon: 'error',\n        })\n      });\n  }\n\n  const handleWorkspaceChange = (e) => {\n    if (e.target.value == \"newWorkspace\") {\n      setshowNewWorkspaceInput(true)\n    }\n    else setshowNewWorkspaceInput(false)\n  }\n\n  useEffect(() => {\n    return () => {\n      initialValues = {}\n    }\n  }, [])\n\n  useEffect(() => {\n\n    if (searchParams && searchParams.tradeType) {\n      getPaginationSearchData(searchParams);\n    }\n    if (props && props.location.state && props.location.state.searchValue) {\n      setSearchValue(newSearch)\n    };\n\n    initialValues = {\n      ...initialValues,\n      tradeType: props && props.location.state && props.location.state.tradeType ? props.location.state.tradeType : \"\",\n      matchType: \"\",\n      searchBy: props && props.location.state && props.location.state.searchType ? props.location.state.searchType : \"\",\n      searchValue: props && props.location.state && props.location.state.searchType,\n      countryCode: props && props.location.state && props.location.state.countryCode,\n      fromDate: \"\",\n      toDate: \"\",\n      dateRange: \"\",\n      queryBuilder: []\n    };\n    if (props && props.location.state && props.location.state.tradeType) {\n      getTradingCountryList(props && props.location.state && props.location.state.tradeType == \"IMPORT\" ? \"I\" : \"E\")\n    }\n\n  }, [page, limit, orderByColumn, orderByMode])\n\n\n  const handleChangeLimit = dataKey => {\n    setPage(1);\n    setLimit(dataKey);\n  };\n\n\n\n  const mainSearch = (values) => {\n\n    console.log(\"values.searchValue >>>>>>>>>>>>>>>>>>>>>>>\", values.searchValue)\n    console.log(\"values >>>>>>>>>>>>>>>>>>>>>>>\", values)\n\n    if (values.searchValue && values.searchValue.length > 0) {\n      setIsSearchClicked(true)\n      setPortOriginList([])\n      setPortDestinationList([])\n      setHsCodeList([])\n      setHsCode4digitList([])\n      setImporterList([])\n      setExporterList([])\n      setCityOriginList([])\n      setCityDestinationList([])\n      setShipmentModeList([])\n      setStdUnitList([])\n      values.isMainSearch = true\n      // console.log(\"Submit values ==== \", values)\n      let checkValidErr = false\n      let errMsg = \"\"\n      if (values.searchBy == \"HS_CODE\") {\n        values.searchValue.map((item, index) => {\n          if (item.length < 2) {\n            checkValidErr = true\n            errMsg = \"Search Values should be greater than or equal to 2 digits\"\n          }\n        })\n      }\n      else {\n        values.searchValue.map((item, index) => {\n          if (item.length < 2) {\n            checkValidErr = true\n            errMsg = \"Search Values should be greater than or equal to 2 digits\"\n          }\n        })\n      }\n\n      if (values.queryBuilder.length > 0) {\n        values.queryBuilder.map((item, index) => {\n          if (item.searchBy == \"HS_CODE\") {\n            item.searchValue.length > 0 && item.searchValue.map((subitem, index) => {\n              if (subitem.length < 4) {\n                checkValidErr = true\n                errMsg = \"Search Values should be greater than or equal to 4 digits\"\n              }\n            })\n          }\n          else {\n            item.searchValue.length > 0 && item.searchValue.map((subitem, index) => {\n              if (subitem.length < 2) {\n                checkValidErr = true\n                errMsg = \"Search Values should be greater than or equal to 2 digits\"\n              }\n            })\n          }\n        })\n      }\n\n      if (checkValidErr == true) {\n        Swal.fire({\n          title: 'Alert !',\n          text: errMsg,\n          icon: 'error',\n          dangerMode: true,\n          confirmButtonColor: '#3085d6',\n        })\n      }\n      else {\n        props.loadingStart()\n        handleSearch(values)\n      }\n\n    }\n    else {\n      Swal.fire({\n        title: 'Alert !',\n        text: \"Enter Search Values\",\n        icon: 'error',\n        dangerMode: true,\n        confirmButtonColor: '#3085d6',\n      })\n    }\n\n  }\n\n  const handleSearch = (values, countryList = [], searchType = \"TRADE\") => {\n    setIsDownloaded(\"N\")\n\n    props.loadingStart()\n    var params = [];\n    params[\"searchType\"] = searchType;\n    params[\"tradeType\"] = values.tradeType;\n    params[\"searchBy\"] = values.searchBy;\n    params[\"searchValue\"] = values.searchValue;\n    params[\"countryCode\"] = values.countryCode;;\n    params[\"fromDate\"] = moment(values.fromDate).format(\"YYYY-MM-DD\");\n    params[\"toDate\"] = moment(values.toDate).format(\"YYYY-MM-DD\");\n    params[\"matchType\"] = values.matchType;\n    params[\"searchFlag\"] = values.searchFlag;\n    params[\"queryBuilder\"] = values.queryBuilder\n\n    if (values.portOriginList) {\n      setPortOriginList(values.portOriginList);\n      params[\"portOriginList\"] = values.portOriginList;\n    }\n    if (values.portDestinationList) {\n      setPortDestinationList(values.portDestinationList);\n      params[\"portDestinationList\"] = values.portDestinationList;\n    }\n    if (values.hsCodeList) {\n      setHsCodeList(values.hsCodeList);\n      params[\"hsCodeList\"] = values.hsCodeList;\n    }\n    if (values.hsCode4DigitList) {\n      setHsCode4digitList(values.hsCode4DigitList);\n      params[\"hsCode4DigitList\"] = values.hsCode4DigitList;\n    }\n    if (values.importerList) {\n      setImporterList(values.importerList);\n      params[\"importerList\"] = values.importerList;\n    }\n    if (values.exporterList) {\n      setExporterList(values.exporterList);\n      params[\"exporterList\"] = values.exporterList;\n    }\n    if (values.cityOriginList) {\n      setCityOriginList(values.cityOriginList);\n      params[\"cityOriginList\"] = values.cityOriginList;\n    }\n    if (values.cityDestinationList) {\n      setCityDestinationList(values.cityDestinationList);\n      params[\"cityDestinationList\"] = values.cityDestinationList;\n    }\n    if (values.shipmentModeList) {\n      setShipmentModeList(values.shipmentModeList);\n      params[\"shipmentModeList\"] = values.shipmentModeList;\n    }\n    if (values.stdUnitList) {\n      setStdUnitList(values.stdUnitList);\n      params[\"stdUnitList\"] = values.stdUnitList;\n    }\n\n    /* code add start on 23-04-2025 */\n\n    if (values.minQuantity) {\n      params[\"rangeQuantityStart\"] = values.minQuantity;\n    }\n    if (values.maxQuantity) {\n      params[\"rangeQuantityEnd\"] = values.maxQuantity;\n    }\n    if (values.minValue) {\n      params[\"rangeValueUsdStart\"] = values.minValue;\n    }\n    if (values.maxValue) {\n      params[\"rangeValueUsdEnd\"] = values.maxValue;\n    }\n    if (values.minUnitPrice) {\n      params[\"rangeUnitPriceUsdStart\"] = values.minUnitPrice;\n    }\n    if (values.maxUnitPrice) {\n      params[\"rangeUnitPriceUsdEnd\"] = values.maxUnitPrice;\n    }\n    if (values.consumptionTypeList) {\n      setConsumptionType(values.consumptionTypeList);\n      params[\"consumptionType\"] = values.consumptionTypeList;\n    }\n    if (values.incotermList) {\n      setIncotermList(values.incotermList);\n      params[\"incoterm\"] = values.incotermList;\n    }\n    if (values.notifyPartyList) {\n      setNotifyPartyList(values.notifyPartyList);\n      params[\"notifyParty\"] = values.notifyPartyList;\n    }\n    if (values.descriptionList) {\n      params[\"conditionProductDesc\"] = values.conditionProductDescription;\n      params[\"productDesc\"] = values.descriptionList;\n    }\n\n    /* code end on 23-04-2025 */\n\n    params[\"isMainSearch\"] = values.isMainSearch;\n\n    setSearchParams(params);\n    let lp = {\n      \"tradeType\": values.tradeType, \"searchBy\": values.searchBy, \"searchValue\": values.searchValue, \"countryCode\": values.countryCode,\n      \"fromDate\": moment(values.fromDate).format(\"YYYY-MM-DD\"), \"toDate\": moment(values.toDate).format(\"YYYY-MM-DD\"), \"matchType\": values.matchType\n    }\n    localStorage.setItem(\"searchParam\", JSON.stringify(lp));\n\n    if (searchId != \"\") {\n      setFilteredColumn([])\n      getSearchData(params, countryList);\n\n      // commented 05.04.2024\n\n      // getImporterList(params);\n      // getExporterList(params);\n      // getPortOriginList(params);\n      // getPortDestinationList(params);\n      // getHSCodeList(params);\n      // getIndianCityList(params);\n      // getForeignCountryList(params);\n      // getHSCode4digitList(params);\n      // getShipmentModeList(params);\n      // getStdUnitList(params);\n    }\n    else {\n      if (props.queryPerDay > 0) {\n        getSearchData(params);\n\n        // commented 05.04.2024\n\n        // getImporterList(params);\n        // getExporterList(params);\n        // getPortOriginList(params);\n        // getPortDestinationList(params);\n        // getHSCodeList(params);\n        // getIndianCityList(params);\n        // getForeignCountryList(params);\n        // getHSCode4digitList(params);\n        // getShipmentModeList(params);\n        // getStdUnitList(params);\n      }\n      else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n        props.loadingStop()\n        Swal.fire({\n          title: 'Search !',\n          text: \"Your Search Limit Exhausted\",\n          icon: 'error',\n          dangerMode: true,\n          confirmButtonColor: '#3085d6',\n        }).then((isConfirm) => {\n          // getImporterList(params);\n          // getExporterList(params);\n          // getPortOriginList(params);\n          // getPortDestinationList(params);\n          // getHSCodeList(params);\n          // getIndianCityList(params);\n          // getForeignCountryList(params);\n          // getHSCode4digitList(params);\n          // getShipmentModeList(params);\n        })\n      }\n    }\n\n  }\n\n\n  const resetSearch = (setFieldValue, values) => {\n    setSearchParams([]);\n    setSearchResult([]);\n    setSearchValue([]);\n    setQueryBuilderSearchValue([])\n    setFieldValue(\"fromDate\", \"\")\n    setFieldValue(\"toDate\", \"\")\n    setFieldValue(\"searchValue\", []);\n    setFieldValue(\"countryCode\", \"\");\n    setFieldValue(\"matchType\", \"\");\n    setFieldValue(\"searchBy\", \"\");\n    setFieldValue(\"tradeType\", \"\");\n    setFieldValue(\"dateRange\", \"\");\n    setFilteredColumn([]);\n    setTotalRecord(0);\n    values.tradeType = \"\"\n    values.searchBy = \"\"\n    values.matchType = \"\"\n    values.countryCode = \"\"\n    values.searchValue = \"\"\n    values.toDate = \"\"\n    values.fromDate = \"\"\n    values.dateRange = \"\"\n\n    setImporterDataList([]);\n    setExporterDataList([]);\n    setPortOriginDataList([]);\n    setPortDestinationDataList([]);\n    setHsCodeDataList([]);\n    setHsCode4digitDataList([]);\n    setCountryOriginList([]);\n    setCountryDestinationList([]);\n    setShipmentModeDataList([]);\n    setStdUnitDataList([]);\n\n    localStorage.removeItem(\"searchParam\");\n    setSearchId(\"\");\n    setCountryCode(\"\")\n    console.log(\"values === \", values)\n    //  window.resetFilter()\n  }\n\n\n  const exportToCSV = () => {\n    if (totalRecord * countryWeightage <= props.maxDownload) {\n      if (searchParams && searchParams.tradeType) {\n        const postData = {\n          \"searchType\": \"TRADE\",\n          \"tradeType\": searchParams.tradeType,\n          \"fromDate\": searchParams.fromDate,\n          \"toDate\": searchParams.toDate,\n          \"searchBy\": searchParams.searchBy,\n          \"searchValue\": searchParams.searchValue,\n          \"countryCode\": searchParams.countryCode,\n          \"pageNumber\": 0,\n          \"numberOfRecords\": Math.round(props.maxDownload / countryWeightage),\n          \"searchId\": \"\",\n          \"hsCodeList\": hsCodeList,\n          \"exporterList\": exporterList,\n          \"importerList\": importerList,\n          \"cityOriginList\": cityOriginList,\n          \"cityDestinationList\": cityDestinationList,\n          \"portOriginList\": portOriginList,\n          \"portDestinationList\": portDestinationList,\n          \"orderByColumn\": orderByColumn,\n          \"orderByMode\": orderByMode,\n          \"matchType\": searchParams.matchType,\n          \"hsCode4DigitList\": hsCode4DigitList,\n          \"queryBuilder\": searchParams.queryBuilder,\n          \"shipModeList\": shipmentModeList,\n          \"stdUnitList\": stdUnitList\n\n        }\n        Axios({\n          method: \"POST\",\n          url: `search-management/search`,\n          data: JSON.stringify(postData),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        })\n          .then(res => {\n            let exportDataSet = [];\n            // if (searchParams.tradeType.toLowerCase() === \"export\" && searchParams.countryCode.toUpperCase() != \"IND\" && searchParams.countryCode.toUpperCase() != \"SEZ\") {\n            //   exportDataSet = res.data.expForeignList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"export\" && searchParams.countryCode.toUpperCase() === \"IND\") {\n            //   exportDataSet = res.data.expIndList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"import\" && searchParams.countryCode.toUpperCase() != \"IND\" && searchParams.countryCode.toUpperCase() != \"SEZ\") {\n            //   exportDataSet = res.data.impForeignList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"import\" && searchParams.countryCode.toUpperCase() === \"IND\") {\n            //   exportDataSet = res.data.impIndList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"import\" && searchParams.countryCode.toUpperCase() === \"SEZ\") {\n            //   exportDataSet = res.data.impIndList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"export\" && searchParams.countryCode.toUpperCase() === \"SEZ\") {\n            //   exportDataSet = res.data.expIndList\n            // }\n            const countryCodes = searchParams.countryCode.map(code => code.toUpperCase());\n            const isIND = countryCodes.includes(\"IND\");\n            const isSEZ = countryCodes.includes(\"SEZ\");\n            const isForeign = !isIND && !isSEZ;\n\n            const tempTradeType = searchParams.tradeType.toLowerCase();\n\n            // if (tempTradeType === \"export\" && isForeign) {\n            //   exportDataSet = res.data.expForeignList;\n            // } else if (tempTradeType === \"export\" && isIND) {\n            //   exportDataSet = res.data.expIndList;\n            // } else if (tempTradeType === \"export\" && isSEZ) {\n            //   exportDataSet = res.data.expIndList;\n            // } else if (tempTradeType === \"import\" && isForeign) {\n            //   exportDataSet = res.data.impForeignList;\n            // } else if (tempTradeType === \"import\" && isIND) {\n            //   exportDataSet = res.data.impIndList;\n            // } else if (tempTradeType === \"import\" && isSEZ) {\n            //   exportDataSet = res.data.impIndList;\n            // }\n            // else {\n            //   exportDataSet = []\n            // }\n\n            /* change on 24-04-2025 */\n            if (tempTradeType === \"export\") {\n              exportDataSet = res.data.expForeignList;\n            } else if (tempTradeType === \"import\") {\n              exportDataSet = res.data.impForeignList;\n            } else {\n              exportDataSet = []\n            }\n            /* change on 24-04-2025 */\n\n            let filteredArray = []\n            const d = new Date();\n            for (let i = 0; i < exportDataSet.length; i++) {\n              let filtered = {};\n              let obj = exportDataSet[i];\n              // if(testJson.includes(obj[\"id\"])){\n              for (let key in obj) {\n                if (typeof (obj[key] == \"object\")) {\n                  let item = obj[key];\n                  if (item != null) {\n                    filtered[key] = obj[key];\n                  }\n                }\n              }\n              // }\n              // else{ console.log(\"Download values Not found ========= \", obj[\"id\"])}\n\n              filteredArray.push(filtered);\n            }\n            setFilteredArray(filteredArray)\n            // setTimeout(downloadXLS(searchParams,totalRecord,1), 5000)\n            downloadXLS(searchParams, 1, filteredArray)\n\n\n          })\n          .catch(err => {\n            console.log(\"Err == \", err);\n            setSearchLoading(false);\n          });\n      } else {\n        Swal.fire({\n          title: 'Alert!',\n          text: 'Please Search data first, then export',\n          icon: 'error',\n          confirmButtonText: 'OK'\n        })\n      }\n    }\n    else {\n      Swal.fire({\n        title: 'Alert!',\n        text: `You cannot download more than ${Math.round(props.maxDownload / countryWeightage)} records in a single search. Please refine your search criteria.`,\n        icon: 'error',\n        confirmButtonText: 'OK'\n      })\n    }\n  };\n\n  const exportSelectedToCSV = (checkedRowID) => {\n    let remainingDload = props.download_count - checkedRowID.length\n    let exportDataSet = [];\n    let filteredArray = []\n\n    searchResult.map((item, index) => {\n      checkedRowID.map((subItem, subIndex) => {\n        if (item.id == subItem) {\n          exportDataSet.push(item)\n        }\n      })\n    })\n\n    for (let i = 0; i < exportDataSet.length; i++) {\n      let filtered = {};\n      let obj = exportDataSet[i];\n      for (let key in obj) {\n        if (typeof (obj[key] == \"object\")) {\n          let item = obj[key];\n          if (item != null) {\n            filtered[key] = obj[key];\n          }\n        }\n      }\n      filteredArray.push(filtered);\n    }\n    setFilteredArray(filteredArray)\n    downloadXLS(searchParams, 2, filteredArray)\n\n  };\n\n  const downloadXLS = (searchParams, dloadType, filteredArray) => {\n\n    // console.log(\"Search Id >>> \", searchId)\n\n    let prevDownloadArray = []\n    let newIDArray = []\n    let newValueArray = []; /* add on 12-05-2025 */\n    prevDownloadArray = JSON.parse(JSON.stringify(props.downloadArray));\n    console.log(\"prevDownloadArray >>>>>>>>>>\", prevDownloadArray);\n\n\n    for (let i = 0; i < filteredArray.length; i++) {\n\n      let obj = filteredArray[i];\n      if (!prevDownloadArray.includes(obj[\"id\"])) {\n        newIDArray.push(obj[\"id\"]);\n        prevDownloadArray.push(obj[\"id\"]);\n        newValueArray.push(obj); /* add on 12-05-2025 */\n      }\n      else { console.log(\"Download values found ========= \", obj[\"id\"]) }\n    }\n\n    const totalNewWeightage = newValueArray.reduce((total, item) => {\n      const match1 = multiTradeCountryList.find(country => country.value === item.ctry_code);\n      return match1 ? total + match1.weightagePoints : total;\n    }, 0);\n\n    const totalFilteredWeightage = filteredArray.reduce((total, item) => {\n      const match = multiTradeCountryList.find(country => country.value === item.ctry_code);\n      return match ? total + match.weightagePoints : total;\n    }, 0);\n\n    // console.log(\">>> totalNewWeightage >>>\", totalNewWeightage);\n    // console.log(\">>> totalFilteredWeightage >>>\", totalFilteredWeightage)\n\n    // let remainingDload = props.download_count - newIDArray.length * countryWeightage\n    // let remainingDload_subUser = props.download_count_subUser - filteredArray.length * countryWeightage\n    let remainingDload = props.download_count - totalNewWeightage;\n    let remainingDload_subUser = props.download_count_subUser - totalFilteredWeightage;\n    // console.log(\"remainingDload ======= \", remainingDload);\n\n    /* Save Download log into database (19-05-2025) --start*/\n    const countryWeightageSummary = [];\n\n    multiTradeCountryList.forEach((country) => {\n      const countryCode = country.value;\n      const countryName = country.label;\n      const weightagePoints = country.weightagePoints;\n\n      const countryData = filteredArray.filter(item => item.ctry_code === countryCode);\n      const totalCount = countryData.length;\n      const totalWeightage = totalCount * weightagePoints;\n\n      if (totalCount > 0) {\n        countryWeightageSummary.push({\n          countryName,\n          weightagePoints,\n          totalCount,\n          totalWeightage\n        });\n      }\n    });\n\n    // console.log(\"countryWeightageSummary>>> \", countryWeightageSummary);\n    /* Save Download log into database (19-05-2025) --End*/\n\n    if (remainingDload > 0) {\n      if ((loggedUser.uplineId > 0 && remainingDload_subUser > 0) || (loggedUser.uplineId == 0)) {\n        Swal.fire({\n          title: 'Download!',\n          html: `Available Download <b>${loggedUser.uplineId > 0 ? props.download_count_subUser : props.download_count}</b>. <br> Total Record to Download <b>${loggedUser.uplineId > 0 ? filteredArray.length : newIDArray.length}</b>. \n        <br> Total Points to deduct <b>${loggedUser.uplineId > 0 ? totalFilteredWeightage : totalNewWeightage}</b>.<br> Remaining Download <b>${loggedUser.uplineId > 0 ? remainingDload_subUser : remainingDload}</b>. <br> Are you sure you want to Download ?`,\n          icon: 'warning',\n          dangerMode: true,\n          showCancelButton: true,\n          confirmButtonColor: '#3085d6',\n          cancelButtonColor: '#d33',\n        }).then((isConfirm) => {\n          if (isConfirm.value) {\n\n            const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n            const fileExtension = \".xlsx\";\n            const fileName = searchParams.tradeType + \"_\" + searchParams.countryCode + \"_\" + searchParams.fromDate + \"_\" + searchParams.toDate;\n            // const ws = XLSX.utils.json_to_sheet(filteredArray);\n\n            const ws = XLSX.utils.table_to_sheet(document.getElementById(\"reportXLS\"), { header: 1 });\n\n            const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n            const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n            const data = new Blob([excelBuffer], { type: fileType });\n            FileSaver.saveAs(data, fileName + fileExtension);\n            setSearchLoading(false);\n\n            /* Save API Download log into database (19-05-2025) --Start*/\n            let saveLogPayload = {\n              \"searchId\": searchId,\n              \"downloadJson\": JSON.stringify(countryWeightageSummary),\n              \"recordsDownloaded\": loggedUser.uplineId > 0 ? filteredArray.length : newIDArray.length,\n              \"initialCredit\": loggedUser.uplineId > 0 ? props.download_count_subUser : props.download_count,\n              \"remainingCredit\": loggedUser.uplineId > 0 ? remainingDload_subUser : remainingDload\n            }\n            saveDownloadLog(saveLogPayload);\n            /* Save API Download log into database (19-05-2025) --End*/\n\n            loggedUser.uplineId > 0 ?\n              props.setDloadCountSubuser({ download_count_subUser: remainingDload_subUser }) :\n              props.updateSubscriptionCount({\n                download_count: remainingDload,\n                subscriptionId: props.subscriptionId,\n                dataAccess_count: props.dataAccess_count,\n                subUserCount: props.subUserCount,\n                totalWorkspace: props.totalWorkspace,\n                queryPerDay: props.queryPerDay\n              })\n\n            if (newIDArray.length > 0) {\n              props.updateDownloadArrayCount(\n                {\n                  downloadArray: prevDownloadArray\n                })\n            }\n\n            UpdateSubscription({ \"downloadLimit\": remainingDload })\n            if (loggedUser.uplineId > 0) {\n              UpdateUser({ \"downloadLimit\": remainingDload_subUser })\n            }\n            UpdateDownloadTracher(prevDownloadArray)\n            downloadSearch(searchId, filteredArray.length)\n          }\n\n        })\n      }\n      else {\n        Swal.fire({\n          title: 'Download!',\n          text: \"Your Download Limit Exhausted\",\n          icon: 'error',\n          dangerMode: true,\n          confirmButtonColor: '#3085d6',\n        }).then((isConfirm) => { })\n      }\n    }\n    else {\n      Swal.fire({\n        title: 'Download!',\n        text: \"Your Download Limit Exhausted\",\n        icon: 'error',\n        dangerMode: true,\n        confirmButtonColor: '#3085d6',\n      }).then((isConfirm) => { })\n    }\n\n\n  }\n\n  const saveDownloadLog = (params) => {\n    // console.log(\"Download Log request params ---------- \", params)\n    AxiosUser({\n      method: \"PUT\",\n      url: `download-log/save`,\n      data: JSON.stringify(params),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"Download log res >>>\", res.data);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n      });\n  }\n\n  const [apiSerachpayload, setApiSearchPayload] = useState({})\n\n  const getSearchData = (params, countryList = []) => {\n    console.log(\"params ---------- \", params)\n    scrollToRef(gridRef);\n    setSearchLoading(true);\n    isTotalRecordLoading(true)\n    // let updatedCountryList = tradeCountryList && tradeCountryList.length == 0 ? countryList : tradeCountryList\n    // let selectedCountry = updatedCountryList.filter((item) => item.shortcode ==  (countryCode ? countryCode : params.countryCode))\n    //  console.log(\"params ======= \", countryCode)\n\n    params[\"tradeType\"] == \"E\" || params[\"tradeType\"] == \"EXPORT\" ? setCountryWeightage(1) : setCountryWeightage(1)\n\n    let tempSearchResult = []\n    // \"searchId\": searchId,\n    const postData = {\n      \"searchType\": params.searchType,\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      //\"pageNumber\": page - 1,\n      \"pageNumber\": 0,\n      \"numberOfRecords\": limit,\n      \"hsCodeList\": params.hsCodeList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"orderByColumn\": orderByColumn,\n      \"orderByMode\": orderByMode,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"matchType\": params.matchType,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n\n    }\n    console.log(\"params.returnSearchId === \", workspace_id)\n    if (params.returnSearchId) {\n      postData[\"searchId\"] = params.returnSearchId\n    }\n    if (search_id && (workspace_id == undefined || workspace_id == \"\")) {\n      if (!params.isMainSearch) {\n        postData[\"searchId\"] = search_id\n      }\n    }\n\n    setApiSearchPayload(postData)\n\n    Axios({\n      method: \"POST\",\n      url: `search-management/search`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(async (res) => {\n        props.setSearchQuery(postData);\n        // if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() != \"IND\" && params.countryCode.toUpperCase() != \"SEZ\") {\n        //   tempSearchResult = res.data.expForeignList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() === \"IND\") {\n        //   tempSearchResult = res.data.expIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() != \"IND\" && params.countryCode.toUpperCase() != \"SEZ\") {\n        //   tempSearchResult = res.data.impForeignList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() === \"IND\") {\n        //   tempSearchResult = res.data.impIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() === \"SEZ\") {\n        //   tempSearchResult = res.data.expIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() === \"SEZ\") {\n        //   tempSearchResult = res.data.impIndList\n        // }\n        const countryCodes = params.countryCode.map(code => code.toUpperCase());\n        const isIND = countryCodes.includes(\"IND\");\n        const isSEZ = countryCodes.includes(\"SEZ\");\n        const isForeign = !isIND && !isSEZ;\n\n        const tempTradeType = params.tradeType.toLowerCase();\n\n        // if (tempTradeType === \"export\" && isForeign) {\n        //   tempSearchResult = res.data.expForeignList;\n        // } else if (tempTradeType === \"export\" && isIND) {\n        //   tempSearchResult = res.data.expIndList;\n        // } else if (tempTradeType === \"export\" && isSEZ) {\n        //   tempSearchResult = res.data.expIndList;\n        // } else if (tempTradeType === \"import\" && isForeign) {\n        //   tempSearchResult = res.data.impForeignList;\n        // } else if (tempTradeType === \"import\" && isIND) {\n        //   tempSearchResult = res.data.impIndList;\n        // } else if (tempTradeType === \"import\" && isSEZ) {\n        //   tempSearchResult = res.data.impIndList;\n        // } else {\n        //   tempSearchResult = []\n        // }\n\n        /* change on 24-04-2025 */\n        if (tempTradeType === \"export\") {\n          tempSearchResult = res.data.expForeignList;\n        } else if (tempTradeType === \"import\") {\n          tempSearchResult = res.data.impForeignList;\n        } else {\n          tempSearchResult = []\n        }\n        /* change on 24-04-2025 */\n\n        if (tempSearchResult && tempSearchResult.length > 0) {\n\n          console.log(\"===========22222222222==================\", tempSearchResult)\n\n          setSearchResult(tempSearchResult);\n          setNoDataErrorMsg(false)\n          getTotalCount(params, res.data.searchId);\n          // console.log(\"props.location.state.columnKeys\", props.location.state)\n          let filteredColumn = []\n          let objColumns = Object.keys(tempSearchResult[0]);\n          for (var x in objColumns) {\n            //  console.log(\"objColumns ==== \", objColumns)\n            if (tempSearchResult[0][objColumns[x]] != null) {\n              filteredColumn.push(objColumns[x]);\n            }\n          }\n          setFilteredColumn(filteredColumn)\n\n          setSearchId(res.data.searchId)\n          if (params.searchFlag == true && orderByColumn == \"\") {\n            props.updateSubscriptionCount({\n              download_count: props.download_count,\n              subscriptionId: props.subscriptionId,\n              dataAccess_count: props.dataAccess_count,\n              totalWorkspace: props.totalWorkspace,\n              subUserCount: props.subUserCount,\n              queryPerDay: props.queryPerDay - 1\n            })\n            UpdateSubscription({ \"queryPerDay\": props.queryPerDay - 1 })\n          }\n\n\n          /* After search set country Filter array */\n          Axios({\n            method: \"POST\",\n            url: `search-management/countrywisecount`,\n            data: JSON.stringify(postData),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          })\n            .then(countryRes => {\n              let tempdata = countryRes.data;\n              let tempOptions = tempdata.countryWiseCount.map(({ ctry_code, ctry_name, shipment_count }) => ({\n                label: `${ctry_name} (${shipment_count})`,\n                value: ctry_code\n              }));\n              // console.log(\"Country Res data , >>>>>>>>>>> \", tempOptions);\n              setFilterCountryList(tempOptions);\n            })\n\n\n          //Added here on 18.04.2024\n\n          getImporterList(params);\n          getExporterList(params);\n          getPortOriginList(params);\n          getPortDestinationList(params);\n          getHSCodeList(params);\n          getIndianCityList(params);\n          getForeignCountryList(params);\n          getHSCode4digitList(params);\n          getShipmentModeList(params);\n          getStdUnitList(params);\n          setSearchLoading(false);\n\n          /* After search set consumptionType Data array for advance search*/\n          await getConsumptionTypeDataList(postData);\n          /* After search set Incoterm list Data array for advance search*/\n          await getIncotermListDataList(postData);\n          /* After search set Notify Party list Data array for advance search*/\n          await getNotifyPartyListDataList(postData);\n        }\n        else {\n          setSearchResult([]);\n          setSearchLoading(false);\n          setTotalRecord(0)\n          setFilteredColumn([])\n          setNoDataErrorMsg(true)\n        }\n        props.loadingStop()\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setSearchId(\"\")\n        setSearchResult([]);\n        setSearchLoading(false);\n        setFilteredColumn([])\n        props.loadingStop()\n      });\n  }\n\n  const getPaginationSearchData = (params) => {\n    // console.log(\"params ---------- \", params)\n    scrollToRef(gridRef);\n    setSearchLoading(true);\n    isTotalRecordLoading(true)\n    let tempSearchResult = []\n    // \"searchId\": searchId,\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"searchId\": searchId,\n      \"hsCodeList\": params.hsCodeList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"orderByColumn\": orderByColumn,\n      \"orderByMode\": orderByMode,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"matchType\": params.matchType,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n\n    }\n\n    Axios({\n      method: \"POST\",\n      url: `search-management/search`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        // if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() != \"IND\" && params.countryCode.toUpperCase() != \"SEZ\") {\n        //   tempSearchResult = res.data.expForeignList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() === \"IND\") {\n        //   tempSearchResult = res.data.expIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() != \"IND\" && params.countryCode.toUpperCase() != \"SEZ\") {\n        //   tempSearchResult = res.data.impForeignList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() === \"IND\") {\n        //   tempSearchResult = res.data.impIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() === \"SEZ\") {\n        //   tempSearchResult = res.data.expIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() === \"SEZ\") {\n        //   tempSearchResult = res.data.impIndList\n        // }\n        const countryCodes = params.countryCode.map(code => code.toUpperCase());\n        const isIND = countryCodes.includes(\"IND\");\n        const isSEZ = countryCodes.includes(\"SEZ\");\n        const isForeign = !isIND && !isSEZ;\n\n        const tempTradeType = params.tradeType.toLowerCase();\n\n        // if (tempTradeType === \"export\" && isForeign) {\n        //   tempSearchResult = res.data.expForeignList;\n        // } else if (tempTradeType === \"export\" && isIND) {\n        //   tempSearchResult = res.data.expIndList;\n        // } else if (tempTradeType === \"export\" && isSEZ) {\n        //   tempSearchResult = res.data.expIndList;\n        // } else if (tempTradeType === \"import\" && isForeign) {\n        //   tempSearchResult = res.data.impForeignList;\n        // } else if (tempTradeType === \"import\" && isIND) {\n        //   tempSearchResult = res.data.impIndList;\n        // } else if (tempTradeType === \"import\" && isSEZ) {\n        //   tempSearchResult = res.data.impIndList;\n        // }\n        // else {\n        //   tempSearchResult = []\n        // }\n\n        /* change on 24-04-2025 */\n        if (tempTradeType === \"export\") {\n          tempSearchResult = res.data.expForeignList;\n        } else if (tempTradeType === \"import\") {\n          tempSearchResult = res.data.impForeignList;\n        } else {\n          tempSearchResult = []\n        }\n        /* change on 24-04-2025 */\n\n        if (tempSearchResult && tempSearchResult.length > 0) {\n          console.log(\"======================================================\", tempSearchResult)\n\n          setSearchResult(tempSearchResult);\n          setNoDataErrorMsg(false)\n          getTotalCount(params, res.data.searchId);\n          let filteredColumn = []\n          let objColumns = Object.keys(tempSearchResult[0]);\n          for (var x in objColumns) {\n            if (tempSearchResult[0][objColumns[x]] != null) {\n              filteredColumn.push(objColumns[x]);\n            }\n          }\n          setFilteredColumn(filteredColumn)\n          setSearchId(res.data.searchId)\n          // if(params.searchFlag == true && orderByColumn == \"\"){\n          //   props.updateSubscriptionCount({\n          //     download_count: props.download_count,\n          //     subscriptionId: props.subscriptionId,\n          //     dataAccess_count: props.dataAccess_count,\n          //     totalWorkspace: props.totalWorkspace,\n          //     subUserCount: props.subUserCount,\n          //     queryPerDay: props.queryPerDay - 1\n          //   })\n          //   UpdateSubscription({\"queryPerDay\": props.queryPerDay - 1})\n          // }\n          setSearchLoading(false);\n        }\n        else {\n          setSearchResult([]);\n          setSearchLoading(false);\n          setTotalRecord(0)\n          setFilteredColumn([])\n          setNoDataErrorMsg(true)\n        }\n        props.loadingStop()\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setSearchId(\"\")\n        setSearchResult([]);\n        setSearchLoading(false);\n        setFilteredColumn([])\n        props.loadingStop()\n      });\n  }\n\n\n  const getTotalCount = (params, searchID) => {\n    // console.log(\"params 2---------- \", params)\n    isTotalRecordLoading(true)\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"searchId\": searchID,\n      \"hsCodeList\": params.hsCodeList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"matchType\": params.matchType,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    console.log(\"111111111111111111111\")\n    Axios({\n      method: \"POST\",\n      url: `/search-management/searchcount`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        setTotalRecord(res.data);\n        updateSearchCount(res.data, searchID)\n        setTimeout(isTotalRecordLoading(false), 1000)\n\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setTotalRecord(0);\n        setNoDataErrorMsg(true)\n      });\n  }\n\n  const updateSearchCount = (totalRecords, searchID) => {\n    // console.log(\"params 2---------- \", params)\n    const postData = {\n      \"totalRecords\": totalRecords,\n    }\n    Axios({\n      method: \"PUT\",\n      url: `/search-management/updatesearchcount/${searchID}`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"Res\", res.data)\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setTotalRecord(0);\n      });\n  }\n\n  const downloadSearch = (searchID, totalDownloadRecords) => {\n    // if(isDownloaded != \"Y\") {\n    Axios({\n      method: \"PUT\",\n      url: `/search-management/downloadsearch?searchId=${searchID}&recordsDownloaded=${totalDownloadRecords}`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"Res\", res.data)\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n      });\n\n    // if(search_id){\n    //   Axios({\n    //     method: \"PUT\",\n    //     url: `/search-management/downloadsearch?searchId=${search_id}`,\n    //     headers: {\n    //       \"Content-Type\": \"application/json\"\n    //     }\n    //   })\n    //     .then(res => {\n    //       console.log(\"Res\", res.data)\n    //     })\n    //     .catch(err => {\n    //       console.log(\"Err\", err);\n    //     });\n    // }\n    // } \n\n  }\n\n\n  const getImporterList = (params) => {\n    isImporterLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listimporters`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let importList = [];\n        if (res.data.importersList) {\n          res.data.importersList.forEach((item) => {\n            let specificItem = { \"value\": item.importer_name, \"label\": item.importer_name + \" [\" + item.shipment_count + \"]\" };\n            importList.push(specificItem);\n          })\n        }\n        setImporterDataList(importList);\n        isImporterLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setImporterDataList([]);\n        isImporterLoading(false);\n      });\n  }\n\n  const getExporterList = (params) => {\n    isExporterLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listexporters`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let exportList = [];\n        if (res.data.exportersList) {\n          res.data.exportersList.forEach((item) => {\n            let specificItem = { \"value\": item.exporter_name, \"label\": item.exporter_name + \" [\" + item.shipment_count + \"]\" };\n            exportList.push(specificItem);\n          })\n        }\n        setExporterDataList(exportList);\n        isExporterLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setExporterDataList([]);\n        isExporterLoading(false);\n      });\n  }\n\n  const getPortOriginList = (params) => {\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n\n\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listindianports`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let portsList = [];\n        if (res.data.portsList) {\n          res.data.portsList.forEach((item) => {\n            let specificItem = { \"value\": item.port_name, \"label\": item.port_name + \" [\" + item.shipment_count + \"]\" };\n            portsList.push(specificItem);\n          })\n        }\n        setPortOriginDataList(portsList);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setPortOriginDataList([]);\n      });\n  }\n\n  const getPortDestinationList = (params) => {\n    isPortDestLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listforeignports`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let portsList = [];\n        if (res.data.portsList) {\n          res.data.portsList.forEach((item) => {\n            let specificItem = { \"value\": item.port_name, \"label\": item.port_name + \"[\" + item.shipment_count + \"]\" };\n            portsList.push(specificItem);\n          })\n        }\n        setPortDestinationDataList(portsList);\n        isPortDestLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setPortDestinationDataList([]);\n        isPortDestLoading(false);\n      });\n  }\n\n  const getHSCodeList = (params) => {\n    isHscodeLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": moment(params.fromDate).format(\"YYYY-MM-DD\"),\n      \"toDate\": moment(params.toDate).format(\"YYYY-MM-DD\"),\n      \"searchBy\": params.searchBy ? params.searchBy : \"HS_CODE\",\n      \"searchValue\": params.searchValue ? params.searchValue : [\"2\"],\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType ? params.matchType : \"L\",\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listhscodes`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let hsList = [];\n        if (res.data.hscodesList) {\n          res.data.hscodesList.forEach((item) => {\n            let specificItem = { \"value\": item.hscode, \"label\": item.hscode + \" [\" + item.shipment_count + \"]\" };\n            hsList.push(specificItem);\n          })\n        }\n        setHsCodeDataList(hsList);\n        isHscodeLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setHsCodeDataList([]);\n        isHscodeLoading(false);\n      });\n  }\n\n  const getHSCode4digitList = (params) => {\n    isHscodeLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listhscodes4digit`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let hsList = [];\n        if (res.data.hscodesList) {\n          res.data.hscodesList.forEach((item) => {\n            let specificItem = { \"value\": item.hscode, \"label\": item.hscode + \" [\" + item.shipment_count + \"]\" };\n            hsList.push(specificItem);\n          })\n        }\n        setHsCode4digitDataList(hsList);\n        isHscodeLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setHsCode4digitDataList([]);\n        isHscodeLoading(false);\n      });\n  }\n\n\n  const getForeignCountryList = (params) => {\n    isCoLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listforeigncountries`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let fcList = [];\n        if (res.data.countriesList) {\n          res.data.countriesList.forEach((item) => {\n            let specificItem = { \"value\": item.country_name, \"label\": item.country_name + \" [\" + item.shipment_count + \"]\" };\n            fcList.push(specificItem);\n          })\n        }\n        setCountryOriginList(fcList);\n        setTimeout(isCoLoading(false), 1000)\n          ;\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setCountryOriginList([]);\n        isCoLoading(false);\n      });\n  }\n\n  const getIndianCityList = (params) => {\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listindiancities`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let icList = [];\n        if (res.data.citiesList) {\n          res.data.citiesList.forEach((item) => {\n            let specificItem = { \"value\": item.city_name, \"label\": item.city_name + \" [\" + item.shipment_count + \"]\" };\n            icList.push(specificItem);\n          })\n        }\n        setCountryDestinationList(icList);\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setCountryDestinationList([]);\n      });\n  }\n\n  const getShipmentModeList = (params) => {\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listshipmentmode`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let icList = [];\n        if (res.data.shipmentModeList) {\n          res.data.shipmentModeList.forEach((item) => {\n            let specificItem = { \"value\": item.ship_mode, \"label\": item.ship_mode };\n            icList.push(specificItem);\n          })\n        }\n        setShipmentModeDataList(icList);\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setShipmentModeDataList([]);\n      });\n  }\n\n  const getStdUnitList = (params) => {\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/liststdunit`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let icList = [];\n        if (res.data.stdUnitList) {\n          res.data.stdUnitList.forEach((item) => {\n            let specificItem = { \"value\": item.std_unit, \"label\": item.std_unit };\n            icList.push(specificItem);\n          })\n        }\n        setStdUnitDataList(icList);\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setStdUnitDataList([]);\n      });\n  }\n\n  const resetFilter = (data) => {\n    setPreviousTotalRecordCount(0)\n    setIsDownloaded(\"N\")\n    updateFilter(data)\n  }\n\n  const updateFilter = (data) => {\n\n    if (data.portOriginList) {\n      setPortOriginList(data.portOriginList);\n    }\n    if (data.portDestinationList) {\n      setPortDestinationList(data.portDestinationList);\n    }\n    if (data.hsCodeList) {\n      setHsCodeList(data.hsCodeList);\n    }\n    if (data.hsCode4DigitList) {\n      setHsCode4digitList(data.hsCode4DigitList);\n    }\n    if (data.importerList) {\n      setImporterList(data.importerList);\n    }\n    if (data.exporterList) {\n      setExporterList(data.exporterList);\n    }\n    if (data.cityOriginList) {\n      setCityOriginList(data.cityOriginList);\n    }\n    if (data.cityDestinationList) {\n      setCityDestinationList(data.cityDestinationList);\n    }\n    if (data.shipmentModeList) {\n      setShipmentModeList(data.shipmentModeList);\n    }\n    if (data.stdUnitList) {\n      setStdUnitList(data.stdUnitList);\n    }\n    if (data.returnSearchId) {\n      setReturnSearchId(data.returnSearchId);\n    }\n    if (data.consumptionTypeList) {\n      setConsumptionType(data.consumptionTypeList);\n    }\n    if (data.incotermList) {\n      setIncotermList(data.incotermList);\n    }\n    if (data.notifyPartyList) {\n      setNotifyPartyList(data.notifyPartyList);\n    }\n\n\n    if (searchParams && searchParams.tradeType) {\n      let params = searchParams;\n      params.searchType = \"ADVANCE\";\n      params.portOriginList = data.portOriginList;\n      params.portDestinationList = data.portDestinationList;\n      params.hsCodeList = data.hsCodeList;\n      params.importerList = data.importerList;\n      params.exporterList = data.exporterList;\n      params.cityOriginList = data.cityOriginList;\n      params.cityDestinationList = data.cityDestinationList;\n      params.hsCode4DigitList = data.hsCode4DigitList;\n      params.shipmentModeList = data.shipmentModeList;\n      params.stdUnitList = data.stdUnitList;\n      params.searchFlag = false\n\n      // getIndividualRecordCount(params)\n\n      if (data.portOriginList) {\n        // setPortOriginList(data.portOriginList);\n        params[\"portOriginList\"] = data.portOriginList;\n      }\n      if (data.portDestinationList) {\n        // setPortDestinationList(data.portDestinationList);\n        params[\"portDestinationList\"] = data.portDestinationList;\n      }\n      if (data.hsCodeList) {\n        // setHsCodeList(data.hsCodeList);\n        params[\"hsCodeList\"] = data.hsCodeList;\n      }\n      if (data.hsCode4DigitList) {\n        // setHsCode4digitList(data.hsCode4DigitList);\n        params[\"hsCode4DigitList\"] = data.hsCode4DigitList;\n      }\n      if (data.importerList) {\n        // setImporterList(data.importerList);\n        params[\"importerList\"] = data.importerList;\n      }\n      if (data.exporterList) {\n        // setExporterList(data.exporterList);\n        params[\"exporterList\"] = data.exporterList;\n      }\n      if (data.cityOriginList) {\n        // setCityOriginList(data.cityOriginList);\n        params[\"cityOriginList\"] = data.cityOriginList;\n      }\n      if (data.cityDestinationList) {\n        // setCityDestinationList(data.cityDestinationList);\n        params[\"cityDestinationList\"] = data.cityDestinationList;\n      }\n      if (data.shipmentModeList) {\n        // setShipmentModeList(data.shipmentModeList);\n        params[\"shipModeList\"] = data.shipmentModeList;\n      }\n      if (data.stdUnitList) {\n        // setStdUnitList(data.stdUnitList);\n        params[\"stdUnitList\"] = data.stdUnitList;\n      }\n      if (data.minQuantity) {\n        params[\"rangeQuantityStart\"] = data.minQuantity;\n      }\n      if (data.maxQuantity) {\n        params[\"rangeQuantityEnd\"] = data.maxQuantity;\n      }\n      if (data.minValue) {\n        params[\"rangeValueUsdStart\"] = data.minValue;\n      }\n      if (data.maxValue) {\n        params[\"rangeValueUsdEnd\"] = data.maxValue;\n      }\n      if (data.minUnitPrice) {\n        params[\"rangeUnitPriceUsdStart\"] = data.minUnitPrice;\n      }\n      if (data.maxUnitPrice) {\n        params[\"rangeUnitPriceUsdEnd\"] = data.maxUnitPrice;\n      }\n      if (data.consumptionTypeList) {\n        params[\"consumptionType\"] = data.consumptionTypeList;\n      }\n      if (data.incotermList) {\n        params[\"incoterm\"] = data.incotermList;\n      }\n      if (data.notifyPartyList) {\n        params[\"notifyParty\"] = data.notifyPartyList;\n      }\n      if (data.descriptionList) {\n        params[\"conditionProductDesc\"] = data.conditionProductDescription;\n        params[\"productDesc\"] = data.descriptionList;\n      }\n      if (data.returnSearchId) {\n        params[\"returnSearchId\"] = data.returnSearchId;\n      }\n      setSearchParams(params);\n      getSearchData(params);\n\n      // commented 05.04.2024\n\n      //  getImporterList(params);\n      //  getExporterList(params);\n      //  getPortOriginList(params);\n      //  getPortDestinationList(params);\n      //  getHSCodeList(params);\n      //  getIndianCityList(params);\n      //  getForeignCountryList(params);\n      //  getHSCode4digitList(params);\n      // //  getIndividualRecordCount(params)\n      //  getShipmentModeList(params);\n      //  getStdUnitList(params);\n\n\n    }\n    setToggle(false);\n  }\n\n  const getNewWorkspaceId = () => {\n    if (workspaceRef.current.value && workspaceRef.current.value == \"newWorkspace\") {\n      if (!workspaceRef.current.value || !sWorkspaceRef.current.value || !sTitleRef.current.value || !sDescRef.current.value) {\n        if (!workspaceRef.current.value) {\n          isWsError(\"Please select workspace name\");\n        } else isWsError(\"\")\n\n        if (!sWorkspaceRef.current.value) {\n          isNewWsError(\"Please enter workspace name\");\n        } else isNewWsError(\"\")\n\n        if (!sTitleRef.current.value) {\n          isSTitleError(\"Please enter title\");\n        } else isSTitleError(\"\")\n\n        if (!sDescRef.current.value) {\n          isSDescError(\"Please enter description\");\n        } else isSDescError(\"\");\n      }\n      else {\n        const postData = {\n          \"name\": sWorkspaceRef.current.value,\n          \"is_active\": \"Y\",\n        }\n        AxiosACT({\n          method: \"POST\",\n          url: `/activity-management/workspace`,\n          data: JSON.stringify(postData),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        })\n          .then(res => {\n            handleSaveSearch(res.data)\n          })\n          .catch(err => {\n            console.log(\"Err\", err);\n          });\n      }\n    }\n    else {\n      if (!workspaceRef.current.value || !sTitleRef.current.value || !sDescRef.current.value) {\n        if (!workspaceRef.current.value || workspaceRef.current.value == \"--select--\") {\n          isWsError(\"Please enter workspace name\");\n        } else isWsError(\"\")\n\n        if (!sTitleRef.current.value) {\n          isSTitleError(\"Please enter title\");\n        } else isSTitleError(\"\")\n\n        if (!sDescRef.current.value) {\n          isSDescError(\"Please enter description\");\n        } else isSDescError(\"\");\n      }\n      else {\n        handleSaveSearch()\n      }\n    }\n  }\n\n  const handleSaveSearch = (id) => {\n    const postData = {\n      \"workspace_id\": workspaceRef.current.value == \"newWorkspace\" ? id : parseInt(workspaceRef.current.value),\n      \"search_id\": searchId,\n      \"name\": sTitleRef.current.value,\n      \"description\": sDescRef.current.value,\n      \"is_active\": \"Y\",\n    }\n    AxiosACT({\n      method: \"POST\",\n      url: `/activity-management/workspace/savesearch`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        props.updateSubscriptionCount({\n          download_count: props.download_count,\n          subscriptionId: props.subscriptionId,\n          dataAccess_count: props.dataAccess_count,\n          totalWorkspace: props.totalWorkspace - 1,\n          subUserCount: props.subUserCount,\n          queryPerDay: props.queryPerDay\n        })\n        UpdateSubscription({ \"totalWorkspace\": props.totalWorkspace - 1 })\n        Swal.fire({\n          title: 'Success',\n          text: \"Search query saved successfully\",\n          icon: 'success',\n        })\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n        if (err.data.errorMsg) {\n          errorMsg = err.data.errorMsg;\n        }\n        Swal.fire({\n          title: 'Oops!',\n          text: errorMsg,\n          icon: 'error',\n        })\n      });\n    toggleModal();\n\n  }\n\n  const getWorkspaceList = () => {\n\n    AxiosACT({\n      method: \"GET\",\n      url: `/activity-management/workspace/list?userId=${userId}`\n    })\n      .then(res => {\n        setWorkspaceList(res.data.workspaceList);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n      });\n  }\n\n  useEffect(() => {\n    getWorkspaceList();\n    fetchSearchQuery();\n  }, [])\n\n\n  const getSuggestionList = (value, innitialParams, index) => {\n    if (value && value.length >= 2) {\n      let newSuggestionList = []\n      let QueryBuilderNewSuggestionList = [[], [], []]\n      const postData = {\n        \"tradeType\": innitialParams.tradeType,\n        \"fromDate\": innitialParams.fromDate,\n        \"toDate\": innitialParams.toDate,\n        \"searchBy\": index == \"\" ? innitialParams.searchBy : innitialParams.queryBuilder[index - 1].searchBy,\n        \"searchValue\": value,\n        \"countryCode\": innitialParams.countryCode,\n        \"matchType\": index == \"\" ? innitialParams.matchType : innitialParams.queryBuilder[index - 1].matchType,\n      }\n      Axios({\n        method: \"POST\",\n        url: `/search-management/suggestionlist`,\n        data: JSON.stringify(postData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          if (res.data.suggestionList) {\n            res.data.suggestionList.map((item) => {\n              let specificItem = { \"value\": item.listSuggestion, \"label\": item.listSuggestion };\n              newSuggestionList.push(specificItem);\n            })\n            if (index == \"\") {\n              setSuggestions(newSuggestionList)\n            }\n            else {\n              QueryBuilderNewSuggestionList[index - 1] = newSuggestionList\n              console.log(\"query builder ========== \", QueryBuilderNewSuggestionList)\n              setQueryBuilderSuggestions(QueryBuilderNewSuggestionList)\n            }\n\n          }\n        })\n        .catch(err => {\n          // let newValue =  { \"listSuggestion\": newVal, \"shipmentCount\": 0}    \n          // setSuggestions(newValue)\n        });\n    }\n\n  }\n\n\n  const addnewOption = () => { }\n  const SelectMenuButton = (props) => {\n    return (\n      <components.MenuList  {...props}>\n        {props.children}\n        {/* <button onClick={()=> addnewOption()}>Add new element</button> */}\n      </components.MenuList >\n    )\n  }\n\n  // ------ work for country by continent @ 30.05.2025 -------//\n\n  // const getTradingCountryList = (params) => {\n  //   setTradeType(params)\n  //   console.log(\"params >>>>>>>\",params)\n  //   AxiosMaster({\n  //     method: \"GET\",\n  //     url: `masterdata-management/countrylistbytrade/${params}`,\n\n\n  //   })\n  //     .then(res => {\n  //       let countryList = [],\n  //         multiCountryList = [];\n  //       if (res.data.countryList) {\n  //         res.data.countryList.forEach((item) => {\n  //           multiCountryList.push({\n  //             \"value\": item.shortcode,\n  //             \"label\": item.name,\n  //             \"iso2code\": item.image,\n  //             \"weightagePoints\": params == \"E\" ? item.exportPointWeightage : item.importPointWeightage,\n  //           });\n  //           let specificItem = Object.assign(item, { hasChild: false })\n  //           countryList.push(specificItem);\n  //         })\n  //         // }\n  //         countryList = res.data.countryList.length > 0 && props.countryList.length > 0 && res.data.countryList.filter((item) => {\n  //           return props.countryList.includes(item.shortcode)\n  //         })\n\n  //         setTradeCountryList(countryList);\n  //         setMultiTradeCountryList(multiCountryList);\n  //         console.log(\"Multiselect Trade cuntry list >>>> \", multiCountryList);\n  //       }\n  //     })\n  //     .catch(err => {\n  //       setTradeCountryList([])\n  //     });\n  // }\n\n\n\n  const getTradingCountryList = (params) => {\n    setTradeType(params);\n\n    AxiosMaster({\n      method: \"GET\",\n      url: `/masterdata-management/countrylistbycontinent/${params}`,\n    })\n      .then(res => {\n        let countryList = [];\n        let multiCountryList = [];\n\n        if (res.data && res.data.length > 0) {\n          // Process the response to group countries by continent\n          res.data.forEach(continent => {\n            const continentName = continent.continentName || \"Unknown\";\n            const continentId = continent.continentId;\n\n            // Filter countries that belong to the current continent\n            const filteredCountries = continent.countryList.filter(\n              country => country.continentId === continentId\n            );\n\n            filteredCountries.forEach(country => {\n              multiCountryList.push({\n                value: country.shortcode,\n                label: country.name,\n                iso2code: country.image,\n                weightagePoints: params === \"E\" ? country.exportPointWeightage : country.importPointWeightage,\n                continentName: continentName, // Add continent name for grouping\n                continentId: continentId, // Add continent ID for filtering\n              });\n\n              let specificItem = Object.assign(country, { hasChild: false });\n              countryList.push(specificItem);\n            });\n          });\n\n          // Filter countryList based on props.countryList\n          countryList = countryList.length > 0 && props.countryList.length > 0\n            ? countryList.filter(item => props.countryList.includes(item.shortcode))\n            : countryList;\n\n          setTradeCountryList(countryList);\n          setMultiTradeCountryList(multiCountryList);\n          console.log(\"Grouped MultiTradeCountryList >>>> \", multiCountryList);\n        }\n      })\n      .catch(err => {\n        setTradeCountryList([]);\n      });\n  };\n\n  // ------ work for country by continent @ 30.05.2025 -------//\n\n\n  const fetchSearchQuery = () => {\n    if (search_id) {\n      let newSuggestionList = []\n      let queryBuilderSuggestionList = []\n      Axios({\n        method: \"GET\",\n        url: `/search-management/search/details`,\n        params: { searchId: search_id }\n      })\n        .then(res => {\n          if (res.data.queryList) {\n            let sParams = res.data.queryList[0].userSearchQuery;\n            initialValues = {\n              ...initialValues,\n              tradeType: sParams.tradeType,\n              matchType: sParams.matchType,\n              searchBy: sParams.searchBy,\n              searchValue: sParams.searchValue,\n              countryCode: sParams.countryCode,\n              fromDate: sParams.fromDate ? new Date(sParams.fromDate) : \"\",\n              toDate: sParams.toDate ? new Date(sParams.toDate) : \"\",\n              dateRange: search_id ? \"6\" : \"\",\n              queryBuilder: sParams.queryBuilder ? sParams.queryBuilder : [],\n              cityDestinationList: sParams.cityDestinationList,\n              cityOriginList: sParams.cityOriginList,\n              exporterList: sParams.exporterList,\n              hsCode4DigitList: sParams.hsCode4DigitList,\n              hsCodeList: sParams.hsCodeList,\n              importerList: sParams.importerList,\n              portDestinationList: sParams.portDestinationList,\n              portOriginList: sParams.portOriginList,\n              shipmentModeList: sParams.shipModeList ? sParams.shipModeList : [],\n              stdUnitList: sParams.stdUnitList ? sParams.stdUnitList : [],\n              minQuantity: sParams.rangeQuantityStart ? sParams.rangeQuantityStart : null,\n              maxQuantity: sParams.rangeQuantityEnd ? sParams.rangeQuantityEnd : null,\n              consumptionTypeList: sParams.consumptionType ? sParams.consumptionType : [],\n              minValue: sParams.rangeValueUsdStart ? sParams.rangeValueUsdStart : null,\n              maxValue: sParams.rangeValueUsdEnd ? sParams.rangeValueUsdEnd : null,\n              minUnitPrice: sParams.rangeUnitPriceUsdStart ? sParams.rangeUnitPriceUsdStart : null,\n              maxUnitPrice: sParams.rangeUnitPriceUsdEnd ? sParams.rangeUnitPriceUsdEnd : null,\n              incotermList: sParams.incoterm ? sParams.incoterm : [],\n              notifyPartyList: sParams.notifyParty ? sParams.notifyParty : []\n            };\n            setCountryCode(sParams.countryCode)\n\n            sParams.searchValue.map((item, index) => {\n              let specificItem = { \"value\": item, \"label\": item };\n              newSuggestionList.push(specificItem);\n            })\n            setSearchValue(newSuggestionList)\n            if (sParams.queryBuilder && sParams.queryBuilder.length > 0) {\n\n              sParams.queryBuilder.map((newitem, newindex) => {\n                let tempArray = []\n                newitem.searchValue.map((item, index) => {\n                  let specificItem = { \"value\": item, \"label\": item };\n                  tempArray.push(specificItem);\n                })\n                queryBuilderSuggestionList[newindex] = tempArray\n              })\n            }\n            setQueryBuilderSearchValue(queryBuilderSuggestionList)\n            console.log(\"initialValues Start ======= \", initialValues)\n\n            setIsDownloaded(res.data.queryList[0].isDownloaded)\n            setPreviousTotalRecordCount(res.data.queryList[0].totalRecords)\n            sParams.tradeType == \"IMPORT\" ? fetchTradingCountryListOnInnitialize(\"I\", sParams.countryCode, sParams.tradeType, initialValues) : fetchTradingCountryListOnInnitialize(\"E\", sParams.countryCode, sParams.tradeType, initialValues)\n          }\n        })\n        .catch(err => {\n          console.log(\"Err\", err);\n        });\n    }\n  }\n\n  //--- get country by continent @30.05.2025 ---//\n\n  // const fetchTradingCountryListOnInnitialize = (params, countryCode, tradeType, initialValues) => {\n  //   setTradeType(params)\n  //   AxiosMaster({\n  //     method: \"GET\",\n  //     url: `masterdata-management/countrylistbytrade/${params}`,\n  //   })\n  //     .then(res => {\n  //       let countryList = [],\n  //         multiCountryList = [],\n  //         selectedCountryList = [];\n  //       if (res.data.countryList) {\n  //         res.data.countryList.forEach((item) => {\n  //           multiCountryList.push({\n  //             \"value\": item.shortcode,\n  //             \"label\": item.name,\n  //             \"iso2code\": item.image,\n  //             \"weightagePoints\": params == \"E\" ? item.exportPointWeightage : item.importPointWeightage,\n  //           });\n  //           let specificItem = Object.assign(item, { hasChild: false })\n  //           countryList.push(specificItem);\n  //         })\n\n  //         countryList = res.data.countryList.length > 0 && props.countryList.length > 0 && res.data.countryList.filter((item) => {\n  //           return props.countryList.includes(item.shortcode)\n  //         });\n\n\n  //         setTradeCountryList(countryList);\n  //         setMultiTradeCountryList(multiCountryList);\n  //         console.log(\"Multi Country List Trade >>>>> \", multiCountryList)\n\n  //         // let tempRow = countryList && countryList.filter((item) => item.shortcode.toLowerCase().includes(countryCode.toLowerCase()))\n  //         const tempRow = countryList.filter((item) =>\n  //           countryCode.some((code) => item.shortcode.toLowerCase() === code.toLowerCase())\n  //         );\n\n  //         tempRow.forEach((item) => {\n  //           selectedCountryList.push({ \"value\": item.shortcode, \"label\": item.name });\n  //         })\n  //         setSelectedTradeCountry(selectedCountryList);\n\n  //         console.log(\"selectedCountryList >>>>>>>>>>>>>>>>>>\", selectedCountryList)\n\n\n  //         setImporterForExport(tempRow[0].importerForExport)\n  //         setExporterForImport(tempRow[0].exporterForImport)\n\n  //         setDate(countryCode, tradeType, res.data.countryList);\n  //         if (searchTypeValue !== \"\") {\n  //           handleSearch(initialValues, countryList, searchTypeValue);\n  //         } else {\n  //           handleSearch(initialValues, countryList);\n  //         }\n\n  //       }\n  //     }\n  //     )\n  //     .catch(err => {\n  //       setTradeCountryList([])\n  //     });\n  // }\n\n  // function setDate(text, tradeType, tradeCountryList) {\n  //   // isLoading(true)\n  //   let tempRow = tradeCountryList && tradeCountryList.filter((item) => item.shortcode.toLowerCase().includes(text.toLowerCase()));\n  //   console.log(\"Temp Row On setDate >>> \", tempRow)\n  //   let fromDate = \"\"\n  //   let toDate = \"\"\n\n  //   if (tradeType == \"I\") {\n  //     fromDate = moment(tempRow[0].importFrom).format('MM-DD-YYYY')\n  //     toDate = moment(tempRow[0].importUpto).format('MM-DD-YYYY')\n  //   }\n  //   else {\n  //     fromDate = moment(tempRow[0].exportFrom).format('MM-DD-YYYY')\n  //     toDate = moment(tempRow[0].exportUpto).format('MM-DD-YYYY')\n  //   }\n\n  //   setMinDate(new Date(fromDate))\n  //   setMaxDate(new Date(toDate))\n\n  //   return new Date(toDate)\n  // }\n\n  const fetchTradingCountryListOnInnitialize = (params, countryCode, tradeType, initialValues) => {\n    setTradeType(params);\n\n    AxiosMaster({\n      method: \"GET\",\n      url: `/masterdata-management/countrylistbycontinent/${params}`,\n    })\n      .then(res => {\n        let countryList = [];\n        let multiCountryList = [];\n        let selectedCountryList = [];\n\n        if (res.data && res.data.length > 0) {\n          // Process the response to group countries by continent\n          res.data.forEach(continent => {\n            const continentName = continent.continentName || \"Unknown\";\n            const continentId = continent.continentId;\n\n            // Filter countries that belong to the current continent\n            const filteredCountries = continent.countryList.filter(\n              country => country.continentId === continentId\n            );\n\n            filteredCountries.forEach(country => {\n              multiCountryList.push({\n                value: country.shortcode,\n                label: country.name,\n                iso2code: country.image,\n                weightagePoints: params === \"E\" ? country.exportPointWeightage : country.importPointWeightage,\n                continentName: continentName, // Add continent name for grouping\n                continentId: continentId, // Add continent ID for filtering\n              });\n\n              let specificItem = Object.assign(country, { hasChild: false });\n              countryList.push(specificItem);\n            });\n          });\n\n          // Filter countryList based on props.countryList\n          countryList = countryList.length > 0 && props.countryList.length > 0\n            ? countryList.filter(item => props.countryList.includes(item.shortcode))\n            : countryList;\n\n          setTradeCountryList(countryList);\n          setMultiTradeCountryList(multiCountryList);\n\n          // Automatically select the first country and set related data\n          const tempRow = countryList.filter((item) =>\n            countryCode.some((code) => item.shortcode.toLowerCase() === code.toLowerCase())\n          );\n\n          tempRow.forEach((item) => {\n            selectedCountryList.push({ value: item.shortcode, label: item.name });\n          });\n\n          setSelectedTradeCountry(selectedCountryList);\n\n          setImporterForExport(tempRow[0]?.importerForExport || \"\");\n          setExporterForImport(tempRow[0]?.exporterForImport || \"\");\n\n          setDate(countryCode, tradeType, countryList);\n\n          if (searchTypeValue !== \"\") {\n            handleSearch(initialValues, countryList, searchTypeValue);\n          } else {\n            handleSearch(initialValues, countryList);\n          }\n        }\n      })\n      .catch(err => {\n        setTradeCountryList([]);\n      });\n  };\n\n  //--- get country by continent @30.05.2025 ---//\n\n\n  function setDate(text, tradeType, tradeCountryList) {\n    // text is now an array like [\"Ind\", \"Afg\"]\n    const tempRow = tradeCountryList.filter((item) =>\n      text.some((code) => item.shortcode.toLowerCase() === code.toLowerCase())\n    );\n    console.log(\"Temp Row On setDate >>> \", tempRow);\n\n    if (!tempRow.length) return;\n\n    let fromDate = \"\";\n    let toDate = \"\";\n\n    if (tradeType === \"I\") {\n      fromDate = moment(tempRow[0].importFrom).format(\"MM-DD-YYYY\");\n      toDate = moment(tempRow[0].importUpto).format(\"MM-DD-YYYY\");\n    } else {\n      fromDate = moment(tempRow[0].exportFrom).format(\"MM-DD-YYYY\");\n      toDate = moment(tempRow[0].exportUpto).format(\"MM-DD-YYYY\");\n    }\n\n    setMinDate(new Date(fromDate));\n    setMaxDate(new Date(toDate));\n\n    return new Date(toDate);\n  }\n\n\n\n  // function setMaxMinDate(text) {\n  //   // isLoading(true)\n  //   let tempRow = tradeCountryList && tradeCountryList.filter((item) => item.shortcode.toLowerCase().includes(text.toLowerCase()))\n  //   let fromDate = \"\"\n  //   let toDate = \"\"\n  //   let countrywiseFromDate = \"\"\n  //   console.log(\"tradeType === \", tradeType)\n  //   try {\n  //     if (tradeType == \"I\") {\n  //       countrywiseFromDate = moment(tempRow[0].importFrom).format('MM-DD-YYYY')\n  //       fromDate = moment(tempRow[0].importFrom).format('MM-DD-YYYY')\n  //       toDate = moment(tempRow[0].importUpto).format('MM-DD-YYYY')\n  //     }\n  //     else {\n  //       countrywiseFromDate = moment(tempRow[0].exportFrom).format('MM-DD-YYYY')\n  //       fromDate = moment(tempRow[0].exportFrom).format('MM-DD-YYYY')\n  //       toDate = moment(tempRow[0].exportUpto).format('MM-DD-YYYY')\n  //     }\n\n  //     setMinDate(new Date(fromDate))\n  //     setMaxDate(new Date(toDate))\n\n  //     return new Date(toDate)\n  //   }\n  //   catch {\n  //     props.loadingStop()\n  //     Swal.fire({\n  //       title: 'Error !',\n  //       text: \"Please select country\",\n  //       icon: 'error',\n  //       dangerMode: true,\n  //       confirmButtonColor: '#3085d6',\n  //     })\n  //     return \"\"\n  //   }\n\n  // }\n\n  function setMaxMinDate(selectedCountries, tradeType) {\n    if (!selectedCountries || selectedCountries.length === 0) {\n      Swal.fire({\n        title: 'Error !',\n        text: \"Please select at least one country\",\n        icon: 'error',\n        confirmButtonColor: '#3085d6',\n      });\n      return;\n    }\n\n    let fromDates = [];\n    let toDates = [];\n\n    selectedCountries.forEach(country => {\n      let tempRow = tradeCountryList.find(item => item.shortcode.toLowerCase() === country.value.toLowerCase());\n\n      if (tempRow) {\n        if (tradeType === \"I\") {\n          fromDates.push(moment(tempRow.importFrom).toDate());\n          toDates.push(moment(tempRow.importUpto).toDate());\n        } else {\n          fromDates.push(moment(tempRow.exportFrom).toDate());\n          toDates.push(moment(tempRow.exportUpto).toDate());\n        }\n      }\n    });\n\n    if (fromDates.length > 0 && toDates.length > 0) {\n      let minDate = new Date(Math.min(...fromDates));\n      let maxDate = new Date(Math.max(...toDates));\n\n      console.log(\"Min Date >>>>\", minDate);\n      console.log(\"Max Date >>> \", maxDate);\n\n      setMinDate(minDate);\n      setMaxDate(maxDate);\n\n      return maxDate;\n    }\n  }\n\n  function setExporterImporter(text, setFieldValue) {\n\n    let tempRow = tradeCountryList && tradeCountryList.filter((item) => item.shortcode.toLowerCase().includes(text.toLowerCase()))\n\n    setFieldValue(\"importerForExport\", tempRow[0].importerForExport)\n    setFieldValue(\"exporterForImport\", tempRow[0].exporterForImport)\n    setImporterForExport(tempRow[0].importerForExport)\n    setExporterForImport(tempRow[0].exporterForImport)\n  }\n\n  useEffect(() => {\n    return () => {\n      localStorage.removeItem(\"searchParam\")\n    }\n  }, []);\n\n  async function getConsumptionTypeDataList(searchQuery) {\n    try {\n      const tempTradeType = searchQuery.tradeType.toLowerCase();\n      let columnKey = tempTradeType == \"export\" ? `export_purpose` : `import_purpose`;\n      searchQuery[\"columnName\"] = columnKey;\n\n      // console.log(\"Check colum filter request >>> \", updatedPayload)\n      Axios({\n        method: \"POST\",\n        url: `/search-management/listdistinctcolumnvalue`,\n        data: JSON.stringify(searchQuery),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          console.log(\"Column value >>> \", res.data.distinctColumnValuesList);\n          let apiResponse = res.data.distinctColumnValuesList;\n          let formattedOptions = apiResponse.map(({ column_name, records_count }) => ({\n            label: `${column_name} (${records_count})`,\n            value: column_name\n          }));\n\n          setConsumptionTypeDataList(formattedOptions);\n        })\n    } catch (e) {\n      console.log(e);\n      setConsumptionTypeDataList([]);\n    }\n  }\n\n  async function getIncotermListDataList(searchQuery) {\n    try {\n      searchQuery[\"columnName\"] = 'incoterm';\n\n      // console.log(\"Check colum filter request >>> \", updatedPayload)\n      Axios({\n        method: \"POST\",\n        url: `/search-management/listdistinctcolumnvalue`,\n        data: JSON.stringify(searchQuery),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          console.log(\"Column value >>>2 \", res.data.distinctColumnValuesList);\n          let apiResponse = res.data.distinctColumnValuesList;\n          if (apiResponse && apiResponse.length > 0) {\n            let formattedOptions = apiResponse.map(({ column_name, records_count }) => ({\n              label: `${column_name} (${records_count})`,\n              value: column_name\n            }));\n\n            setIncotermListData(formattedOptions);\n          } else {\n            setIncotermListData([]);\n          }\n        })\n    } catch (e) {\n      console.log(e);\n      setIncotermListData([]);\n    }\n  }\n\n  async function getNotifyPartyListDataList(searchQuery) {\n    try {\n      searchQuery[\"columnName\"] = 'notify_party_name';\n\n      // console.log(\"Check colum filter request >>> \", updatedPayload)\n      Axios({\n        method: \"POST\",\n        url: `/search-management/listdistinctcolumnvalue`,\n        data: JSON.stringify(searchQuery),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          console.log(\"Column value >>> 3\", res.data.distinctColumnValuesList);\n          let apiResponse = res.data.distinctColumnValuesList;\n          let formattedOptions = apiResponse.map(({ column_name, records_count }) => ({\n            label: `${column_name} (${records_count})`,\n            value: column_name\n          }));\n\n          setNotifyPartyListData(formattedOptions);\n        })\n    } catch (e) {\n      console.log(e);\n      setNotifyPartyListData([]);\n    }\n  }\n\n\n  const queryBuilder = (values, errors, touched, setFieldTouched, setFieldValue, Fragment) => {\n    return (\n      <FieldArray\n        name=\"queryBuilder\"\n        render={arrayHelpers => (\n          <>\n            {values.queryBuilder && values.queryBuilder.length > 0 ? (\n              values.queryBuilder.map((data, index) => (\n                <Fragment key={index}>\n                  <div className=\"col-md-2 pr-0 pb-2\">\n                    <div className=\"input-search\">\n                      <Field\n                        name={`queryBuilder[${index}].relation`}\n                        component=\"select\"\n                        className={`hero__form-input form-control custom-select ${touched.matchType && errors.matchType ? \"is-invalid\" : \"\"}`}\n                        autoComplete=\"off\"\n                        onChange={event => {\n                          if (props.queryPerDay > 0) {\n                            setFieldValue(`queryBuilder[${index}].relation`, event.target.value);\n                            setIsSearchClicked(false)\n                          }\n                          else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                            swalResponse()\n                          }\n                        }}\n                      >\n                        <option value=\"\">Select Relation</option>\n                        <option value=\"AND\">AND</option>\n                        {/* <option value=\"OR\">OR</option>\n                   <option value=\"NOT\">NOT</option> */}\n                      </Field>\n                    </div>\n                  </div>\n                  <div className=\"col-md-2 pr-0 pb-2\">\n\n                    <div className=\"input-search\">\n                      <Field\n                        name={`queryBuilder[${index}].searchBy`}\n                        component=\"select\"\n                        className={`hero__form-input form-control custom-select ${touched.searchBy && errors.searchBy ? \"is-invalid\" : \"\"}`}\n                        autoComplete=\"off\"\n                        onChange={event => {\n                          if (props.queryPerDay > 0) {\n                            event.target.value == \"PRODUCT\" ? setFieldValue(`queryBuilder[${index}].matchType`, \"C\") : setFieldValue(`queryBuilder[${index}].matchType`, \"L\");\n                            setFieldValue(`queryBuilder[${index}].searchBy`, event.target.value);\n                            setIsSearchClicked(false)\n                            queryBuilderSearchValue.length = 1\n                          }\n                          else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                            swalResponse()\n                          }\n                        }}\n                      >\n                        <option value=\"\">Select Type</option>\n                        <option value=\"HS_CODE\">HS Code</option>\n                        <option value=\"PRODUCT\">Product</option>\n                        {/* {(values.tradeType == \"EXPORT\" && importerForExport == \"Y\") || values.tradeType == \"IMPORT\" ? <option value=\"IMPORTER\">Importer</option> : null}\n                        {(values.tradeType == \"IMPORT\" && exporterForImport == \"Y\" || values.tradeType == \"EXPORT\") ? <option value=\"EXPORTER\">Exporter</option> : null} */}\n\n                        {/* importer and exporter always show in option @sarbojitghosh22 11-06-2025 */}\n                        <option value=\"IMPORTER\">Importer</option>\n                        <option value=\"EXPORTER\">Exporter</option>\n                        {/* <option value=\"D\">Does Not Contains</option> */}\n                        {values.searchBy == \"PRODUCT\" ? <>\n                          <option value=\"D\">Does Not Contains</option> </> : null}\n                        {/* importer and exporter always show in option @sarbojitghosh22 11-06-2025 */}\n\n\n                      </Field>\n                    </div>\n                  </div>\n                  <div className=\"col-md-2 pr-0 pb-2\">\n                    <div className=\"input-search\">\n                      <Field\n                        name={`queryBuilder[${index}].matchType`}\n                        component=\"select\"\n                        className={`hero__form-input form-control custom-select ${touched.matchType && errors.matchType ? \"is-invalid\" : \"\"}`}\n                        autoComplete=\"off\"\n                        onChange={event => {\n                          if (props.queryPerDay > 0) {\n                            setFieldValue(`queryBuilder[${index}].matchType`, event.target.value);\n                            queryBuilderSearchValue.length = 1\n                            setIsSearchClicked(false)\n                          }\n                          else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                            swalResponse()\n                          }\n                        }}\n                      >\n                        <option value=\"\">Select</option>\n                        {values.queryBuilder && values.queryBuilder.length > 0 && values.queryBuilder[index].hasOwnProperty(\"searchBy\") && values.queryBuilder[index].searchBy == \"PRODUCT\" ? <><option value=\"C\">Contains</option><option value=\"D\">Does Not Contains</option> </> : null}\n                        <option value=\"L\">Like</option>\n                      </Field>\n                    </div>\n                  </div>\n                  {queryBuilderSearchValue && queryBuilderSearchValue.length > 0 ?\n                    <div className=\"col-md-4 pr-0 pb-3\">\n                      <div className=\"input-search\" >\n                        <FormGroup >\n                          <Creatable\n                            placeholder=\"Select an individual\"\n                            name={`queryBuilder[${index}].searchValue`}\n                            options={queryBuilderSuggestions[index]}\n                            isMulti\n                            isOptionDisabled={() => values.queryBuilder[index].searchValue && values.queryBuilder[index].searchValue.length >= 10}\n                            noOptionsMessage={() => \"name not found\"}\n                            components={{ MenuList: SelectMenuButton }}\n                            onInputChange={(newValue) => props.queryPerDay > 0 ? getSuggestionList(newValue, values, index + 1) : null}\n                            onChange={(selectedOption) => {\n                              if (props.queryPerDay > 0) {\n                                let itemList = [];\n                                setIsSearchClicked(false)\n                                selectedOption.forEach((item) => {\n                                  itemList.push(item.value);\n                                });\n                                setFieldValue(`queryBuilder[${index}].searchValue`, itemList);\n                              }\n                              else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                swalResponse()\n                              }\n                            }}\n                            defaultValue={queryBuilderSearchValue[index]}\n                          />\n\n                          {errors.searchValue && touched.searchValue ? (\n                            <span className=\"errorMsg\">{errors.searchValue}</span>\n                          ) : null}\n                        </FormGroup>\n                      </div>\n                    </div> : null\n                  }\n                  {/* {console.log(\"values --- \", values)} */}\n                  <div className=\"col-md-2 pr-0 pb-2\">\n                    {values.searchBy != \"HS_CODE_2\" ?\n                      (<button\n                        type=\"button\" className=\"btn btn-warning\"\n                        // onClick={() => arrayHelpers.remove(index)}\n                        //--- enableing search button when clicked remove @sarbojitghosh22 11-6-2025---//\n                        onClick={() => {\n                          arrayHelpers.remove(index);\n                          setIsSearchClicked(false); // Enable the search button\n                        }}\n                      //--- enableing search button when clicked remove @sarbojitghosh22 11-6-2025---//\n\n                      >\n                        -\n                      </button>)\n                      :\n                      values.queryBuilder.length > 1 ?\n                        (<button\n                          type=\"button\" className=\"btn btn-warning\"\n                          // onClick={() => arrayHelpers.remove(index)}\n\n                          //--- enableing search button when clicked remove @sarbojitghosh22 11-6-2025---//\n                          onClick={() => {\n                            arrayHelpers.remove(index);\n                            setIsSearchClicked(false); // Enable the search button\n                          }}\n                        //--- enableing search button when clicked remove @sarbojitghosh22 11-6-2025---//\n\n\n                        >\n                          -\n                        </button>)\n                        : null\n                    }\n                    &nbsp;&nbsp;\n                    {values.queryBuilder.length < 3 ?\n                      <button\n                        type=\"button\" className=\"btn btn-warning\"\n                        onClick={() => arrayHelpers.push({ relation: \"\", searchBy: \"\", matchType: \"\", searchValue: \"\" })}\n                      >\n                        +\n                      </button> : null}\n                  </div>\n                </Fragment>\n              ))\n            ) : (\n              <div className=\"col-md-2 pr-0 pb-3\">\n                {workspace_id ? null :\n                  <button type=\"reset\" className=\"btn btn-warning\"\n                    onClick={() => arrayHelpers.push({ relation: \"\", searchBy: \"\", matchType: \"\", searchValue: \"\" })}>ADD</button>\n                }\n              </div>\n            )}\n\n          </>\n        )}\n      />\n    )\n  }\n\n  const swalResponse = () => {\n    Swal.fire({\n      title: 'Search !',\n      text: \"Your Search Limit Exhausted\",\n      icon: 'error',\n      dangerMode: true,\n      confirmButtonColor: '#3085d6',\n    })\n  }\n\n  return (\n    <>\n      <div className=\"container-fluid\" >\n        <div className=\"row\">\n          <div className=\"col-md-12 list-page mt-3\">\n            <div className=\"search-top\">\n              <h5>\n                Select Search Parameters\n              </h5>\n              <Formik\n                enableReinitialize={true}\n                initialValues={initialValues}\n                validationSchema={validateForm}\n                onSubmit={mainSearch}\n                resetForm\n              >\n                {({ values, errors, setFieldValue, setFieldError, touched, isValid, handleSubmit, submitForm, setFieldTouched, resetForm }) => {\n\n                  return (\n                    <Form>\n\n                      <div className=\"row\">\n                        <div className=\"col-md-3 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <Field\n                              name=\"tradeType\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.tradeType && errors.tradeType ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.tradeType}\n                              onChange={event => {\n                                if (props.queryPerDay > 0) {\n                                  setFieldValue(\"tradeType\", event.target.value);\n                                  setFieldValue(\"countryCode\", \"\");\n                                  setFieldValue(\"fromDate\", \"\");\n                                  setFieldValue(\"toDate\", \"\");\n                                  setFieldValue(\"dateRange\", \"\");\n                                  setIsSearchClicked(false)\n                                  setSearchResult([])\n                                  setFilteredColumn([])\n                                  setOrderByColumn(\"\")\n                                  setOrderByMode(\"desc\")\n                                  getTradingCountryList(event.target.value == \"IMPORT\" ? 'I' : 'E')\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                            >\n                              <option value=\"\">Select Trade</option>\n                              <option value=\"IMPORT\">Import</option>\n                              <option value=\"EXPORT\">Export</option>\n                            </Field>\n                            {errors.tradeType && touched.tradeType ? (\n                              <span className=\"errorMsg\">{errors.tradeType}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        {/* <div className=\"col-md-3 pr-0 pb-3\" >\n                          <div className=\"dropdown bootstrap-select hero__form-input  form-control custom-select-multi\" >\n                          <Field\n                              name=\"countryCode\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.countryCode && errors.countryCode ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.countryCode}\n                              isMulti\n                              \n                              onChange={event => {\n                                if(props.queryPerDay > 0 ){       \n                                  setFieldValue(\"countryCode\", event.target.value);\n                                  setFieldValue(\"fromDate\", \"\") ;\n                                  setFieldValue(\"toDate\", \"\") ;\n                                  setFieldValue(\"dateRange\", \"\") ;\n                                  setMaxMinDate(event.target.value, values.tradeType)\n                                  setIsSearchClicked(false)\n                                  setSearchResult([])\n                                  setFilteredColumn([])\n                                  setOrderByColumn(\"\")\n                                  setOrderByMode(\"desc\")\n                                  setCountryCode(event.target.value)\n                                  setExporterImporter(event.target.value, setFieldValue)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }                                \n                              }}\n                            >\n                              <option value = \"\" >Select Country</option>\n                              {Object.keys(tradeCountryList).map((item,index) => (                          \n                                <option key = {index} value={tradeCountryList[item].shortcode}>{tradeCountryList[item].name}</option>\n                              ))}\n                            </Field>\n                            {errors.countryCode && touched.countryCode ? (\n                                  <span className=\"errorMsg\">{errors.countryCode}</span>\n                            ) : null}\n                          <Select\n                              defaultValue={defaultCountry}\n                              isMulti\n                              placeholder = 'Select Country'\n                              name=\"countryCode\"\n                              options={  Object.keys(tradeCountryList).map((item,index) => (      \n                                 { label: tradeCountryList[item].name, value: tradeCountryList[item].shortcode }                                                 \n                              ))}\n                              className={`dropdown bootstrap-select hero__form-input ${touched.countryCode && errors.countryCode ? \"is-invalid\" : \"\"}`}\n                              classNamePrefix=\"select\"\n                              onChange={(selectedOption) => {\n                                let itemList = [];\n                                selectedOption.forEach((item)=>{\n                                  itemList.push(item.value);\n                                });\n                                setFieldValue(\"countryCode\", itemList);\n                              }}\n                            />\n\n                          <DropDownTreeComponent id=\"dropdowntree\"\n                            fields={ { \n                                      dataSource: tradeCountryList,\n                                      value: 'shortcode',\n                                      text: 'name',\n                                      parentValue: \"pid\",\n                                      hasChildren: 'hasChild'           \n                                    }} \n                            showCheckBox={true} \n                            treeSettings={treeSettings} \n                            showSelectAll={true}\n                            selectAllText={\"Check All\"} \n                            unSelectAllText={\"UnCheck All\"}       \n                            value = {countryCode}\n                            change={(selectedOption) => {                            \n                              setFieldValue(\"countryCode\", selectedOption.value);\n                            }}\n                            />\n                          <MultiSelect\n                            options={multiTradeCountryList}\n                            value={selectedTradeCountry}\n                            onChange={(selectedOption) => {\n                              setSelectedTradeCountry(selectedOption);\n                              const selectedValues = selectedOption.map(option => option.value);\n                              console.log(\"selectedValues >>> \", selectedValues)\n                              setFieldValue(\"countryCode\", selectedValues);\n                              setFieldValue(\"fromDate\", \"\");\n                              setFieldValue(\"toDate\", \"\");\n                              setFieldValue(\"dateRange\", \"\");\n                              setMaxMinDate(selectedOption, values.tradeType);\n                            }}\n                            labelledBy=\"Select\"\n                          />\n\n\n\n\n                          {errors.countryCode && touched.countryCode ? (\n                            <span className=\"errorMsg\">{errors.countryCode}</span>\n                          ) : null}\n                          </div>\n                        </div> */}\n\n                        <div className=\"col-md-3 pr-0 pb-3\" >\n\n\n                          <CountrySelector\n                            multiTradeCountryList={multiTradeCountryList}\n                            selectedTradeCountry={selectedTradeCountry}\n                            setFieldValue={setFieldValue}\n                            values={values}\n                            setSelectedTradeCountry={setSelectedTradeCountry}\n                            setMaxMinDate={setMaxMinDate}\n                          />\n\n\n                          {errors.countryCode && touched.countryCode ? (\n                            <span className=\"errorMsg\">{errors.countryCode}</span>\n                          ) : null}\n                          {/* </div> */}\n                        </div>\n                        <div className=\"col-md-2 pr-0 pb-3\">\n                          <div className=\"dropdown bootstrap-select hero__form-input\">\n\n                            {/* time frame validation for single and multiple country selection @sarbojitghosh22 2-5-2025 */}\n\n\n                            {/* <Field\n                              name=\"dateRange\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.dateRange && errors.dateRange ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.dateRange}\n                              onChange={event => {\n\n                                if (props.queryPerDay > 0) {\n                                  props.loadingStart()\n                                  setIsSearchClicked(false)\n                                  setFieldValue(\"dateRange\", event.target.value);\n                                  let tempmaxMin = setMaxMinDate(selectedTradeCountry, values.tradeType);\n                                  let tempMaxDate = moment(tempmaxMin).diff(moment(props.dataAccessUpto), 'days') > 0 ? props.dataAccessUpto : tempmaxMin\n                                  let newMaxDate = \"\"\n\n                                  if (values.countryCode.includes(\"IND\") || values.countryCode.includes(\"SEZ\")) {\n                                    const newDate = moment().diff(moment(tempMaxDate), 'days') > 0 ? tempMaxDate : new Date();\n                                    const d = new Date(newDate);\n                                    d.setDate(1);\n                                    newMaxDate = moment(d).subtract(1, 'days');\n                                  } else {\n                                    newMaxDate = moment().diff(moment(tempMaxDate), 'days') > 0 ? tempMaxDate : new Date();\n                                  }\n\n\n\n                                  let fromdate = \"\"\n                                  let dateDiff = \"\"\n                                  let tempFromdate = \"\"\n\n                                  if (newMaxDate != \"\") {\n                                    switch (event.target.value) {\n                                      case \"1\":\n\n                                        fromdate = new Date(newMaxDate);\n                                        fromdate.setDate(1)\n\n\n\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days')\n                                        if (dateDiff >= 0) {\n                                          setFieldValue(\"fromDate\", new Date(fromdate))\n                                        }\n                                        else {\n                                          setFieldValue(\"fromDate\", new Date(props.dataAccessInMonth))\n                                        }\n                                        setFieldValue(\"toDate\", new Date(newMaxDate))\n                                        props.loadingStop()\n                                        break;\n                                      case \"2\":\n\n                                        tempFromdate = moment(newMaxDate).subtract(3, 'months').add(5, \"days\").format(\"YYYY-MM-DD\")\n                                        fromdate = new Date(tempFromdate);\n                                        fromdate.setDate(1)\n\n\n\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days')\n                                        if (dateDiff >= 0) {\n                                          setFieldValue(\"fromDate\", new Date(fromdate))\n                                        }\n                                        else {\n                                          setFieldValue(\"fromDate\", new Date(props.dataAccessInMonth))\n                                        }\n                                        setFieldValue(\"toDate\", new Date(newMaxDate))\n                                        props.loadingStop()\n                                        break;\n\n                                      case \"3\":\n\n                                        tempFromdate = moment(newMaxDate).subtract(6, 'months').add(5, \"days\").format(\"YYYY-MM-DD\")\n                                        fromdate = new Date(tempFromdate);\n                                        fromdate.setDate(1)\n\n\n\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days')\n                                        if (dateDiff >= 0) {\n                                          setFieldValue(\"fromDate\", new Date(fromdate))\n                                        }\n                                        else {\n                                          setFieldValue(\"fromDate\", new Date(props.dataAccessInMonth))\n                                        }\n                                        setFieldValue(\"toDate\", new Date(newMaxDate))\n                                        props.loadingStop()\n                                        break;\n                                      case \"4\":\n                                        tempFromdate = moment(newMaxDate).subtract(12, 'months').add(5, \"days\").format(\"YYYY-MM-DD\")\n                                        fromdate = new Date(tempFromdate);\n                                        fromdate.setDate(1)\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days')\n                                        if (dateDiff >= 0) {\n                                          setFieldValue(\"fromDate\", new Date(fromdate))\n                                        }\n                                        else {\n                                          setFieldValue(\"fromDate\", new Date(props.dataAccessInMonth))\n                                        }\n                                        setFieldValue(\"toDate\", new Date(newMaxDate))\n                                        props.loadingStop()\n                                        break;\n                                      default:\n                                        setFieldValue(\"toDate\", \"\")\n                                        setFieldValue(\"fromDate\", \"\")\n                                        props.loadingStop()\n                                    }\n                                  }\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                            >\n                              <option value=\"\"> Choose Month Range</option>\n                              <option value=\"1\">LAST 1 MONTH</option>\n                              <option value=\"2\">LAST 3 MONTHS</option>\n                              <option value=\"3\">LAST 6 MONTHS</option>\n                              <option value=\"4\">LAST 1 YEAR</option>\n                              <option value=\"6\">CUSTOM</option>\n                            </Field> */}\n\n\n                            <Field\n                              name=\"dateRange\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.dateRange && errors.dateRange ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.dateRange}\n                              onChange={event => {\n                                if (props.queryPerDay > 0) {\n                                  props.loadingStart();\n                                  setIsSearchClicked(false);\n                                  setFieldValue(\"dateRange\", event.target.value);\n\n                                  let tempmaxMin = setMaxMinDate(selectedTradeCountry, values.tradeType);\n                                  let tempMaxDate = moment(tempmaxMin).diff(moment(props.dataAccessUpto), 'days') > 0 ? props.dataAccessUpto : tempmaxMin;\n                                  let newMaxDate = \"\";\n\n                                  if (values.countryCode.includes(\"IND\") || values.countryCode.includes(\"SEZ\")) {\n                                    const newDate = moment().diff(moment(tempMaxDate), 'days') > 0 ? tempMaxDate : new Date();\n                                    const d = new Date(newDate);\n                                    d.setDate(1);\n                                    newMaxDate = moment(d).subtract(1, 'days');\n                                  } else {\n                                    newMaxDate = moment().diff(moment(tempMaxDate), 'days') > 0 ? tempMaxDate : new Date();\n                                  }\n\n                                  let fromdate = \"\";\n                                  let dateDiff = \"\";\n                                  let tempFromdate = \"\";\n\n                                  if (newMaxDate !== \"\") {\n                                    switch (event.target.value) {\n                                      case \"1\":\n                                        fromdate = new Date(newMaxDate);\n                                        fromdate.setDate(1);\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days');\n                                        setFieldValue(\"fromDate\", dateDiff >= 0 ? new Date(fromdate) : new Date(props.dataAccessInMonth));\n                                        setFieldValue(\"toDate\", new Date(newMaxDate));\n                                        props.loadingStop();\n                                        break;\n\n                                      case \"2\":\n                                        tempFromdate = moment(newMaxDate).subtract(3, 'months').add(5, \"days\").format(\"YYYY-MM-DD\");\n                                        fromdate = new Date(tempFromdate);\n                                        fromdate.setDate(1);\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days');\n                                        setFieldValue(\"fromDate\", dateDiff >= 0 ? new Date(fromdate) : new Date(props.dataAccessInMonth));\n                                        setFieldValue(\"toDate\", new Date(newMaxDate));\n                                        props.loadingStop();\n                                        break;\n\n                                      case \"3\":\n                                        tempFromdate = moment(newMaxDate).subtract(6, 'months').add(5, \"days\").format(\"YYYY-MM-DD\");\n                                        fromdate = new Date(tempFromdate);\n                                        fromdate.setDate(1);\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days');\n                                        setFieldValue(\"fromDate\", dateDiff >= 0 ? new Date(fromdate) : new Date(props.dataAccessInMonth));\n                                        setFieldValue(\"toDate\", new Date(newMaxDate));\n                                        props.loadingStop();\n                                        break;\n\n                                      case \"4\":\n                                        tempFromdate = moment(newMaxDate).subtract(12, 'months').add(5, \"days\").format(\"YYYY-MM-DD\");\n                                        fromdate = new Date(tempFromdate);\n                                        fromdate.setDate(1);\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days');\n                                        setFieldValue(\"fromDate\", dateDiff >= 0 ? new Date(fromdate) : new Date(props.dataAccessInMonth));\n                                        setFieldValue(\"toDate\", new Date(newMaxDate));\n                                        props.loadingStop();\n                                        break;\n\n                                      case \"5\":\n                                        tempFromdate = moment(newMaxDate).subtract(36, 'months').add(5, \"days\").format(\"YYYY-MM-DD\");\n                                        fromdate = new Date(tempFromdate);\n                                        fromdate.setDate(1);\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days');\n                                        setFieldValue(\"fromDate\", dateDiff >= 0 ? new Date(fromdate) : new Date(props.dataAccessInMonth));\n                                        setFieldValue(\"toDate\", new Date(newMaxDate));\n                                        props.loadingStop();\n                                        break;\n\n                                      default:\n                                        setFieldValue(\"toDate\", \"\");\n                                        setFieldValue(\"fromDate\", \"\");\n                                        props.loadingStop();\n                                    }\n                                  }\n                                } else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse();\n                                }\n                              }}\n                            >\n                              {(() => {\n                                const options = [\n                                  { value: \"\", label: \"Choose Month Range\" },\n                                  { value: \"1\", label: \"LAST 1 MONTH\" },\n                                  { value: \"2\", label: \"LAST 3 MONTHS\" },\n                                  { value: \"3\", label: \"LAST 6 MONTHS\" },\n                                ];\n\n                                if (selectedTradeCountry.length === 1) {\n                                  options.push({ value: \"4\", label: \"LAST 1 YEAR\" });\n                                  options.push({ value: \"5\", label: \"LAST 3 YEAR\" });\n                                } else if (selectedTradeCountry.length > 1) {\n                                  options.push({ value: \"4\", label: \"LAST 1 YEAR\" });\n                                }\n\n                                options.push({ value: \"6\", label: \"CUSTOM\" });\n\n                                return options.map(opt => (\n                                  <option key={opt.value} value={opt.value}>{opt.label}</option>\n                                ));\n                              })()}\n                            </Field>\n\n\n\n                            {/* time frame validation for single and multiple country selection @sarbojitghosh22 2-5-2025 */}\n\n                            {errors.dateRange && touched.dateRange ? (\n                              <span className=\"errorMsg\">{errors.dateRange}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        <div className=\"col-md-2 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <DatePicker\n                              name=\"fromDate\"\n                              dateFormat=\"yyyy MMM dd  \"\n                              placeholderText=\"From\"\n                              peekPreviousMonth\n                              peekPreviousYear\n                              showMonthDropdown\n                              showYearDropdown\n                              minDate={moment(minDate).diff(moment(props.dataAccessInMonth), 'days') > 0 ? new Date(minDate) : new Date(props.dataAccessInMonth)}\n                              // maxDate={new Date(maxDate)}\n                              maxDate={(props.dataAccessUpto == null || props.dataAccessUpto == \"\") ? new Date(maxDate) : moment(props.dataAccessUpto).diff(moment(maxDate), 'days') > 0 ? new Date(maxDate) : new Date(props.dataAccessUpto)}\n                              className=\"form-control\"\n                              dropdownMode=\"select\"\n                              onChange={(value) => {\n                                if (props.queryPerDay > 0) {\n                                  setFieldValue(\"fromDate\", value);\n                                  setFieldTouched(\"fromDate\");\n                                  setFieldValue(\"dateRange\", 6)\n                                  setIsSearchClicked(false)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                              selected={values.fromDate}\n                            />\n                            {errors.fromDate && touched.fromDate ? (\n                              <span className=\"errorMsg\">{errors.fromDate}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        <div className=\"col-md-2 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <DatePicker\n                              name=\"toDate\"\n                              dateFormat=\"yyyy MMM dd  \"\n                              placeholderText=\"To\"\n                              peekPreviousMonth\n                              peekPreviousYear\n                              showMonthDropdown\n                              showYearDropdown\n                              //  minDate= {moment(minDate)} \n                              minDate={moment(minDate).diff(moment(props.dataAccessInMonth), 'days') > 0 ? new Date(minDate) : new Date(props.dataAccessInMonth)}\n                              maxDate={(props.dataAccessUpto == null || props.dataAccessUpto == \"\") ? new Date(maxDate) : moment(props.dataAccessUpto).diff(moment(maxDate), 'days') > 0 ? new Date(maxDate) : new Date(props.dataAccessUpto)}\n                              className=\"form-control\"\n                              dropdownMode=\"select\"\n                              onChange={(value) => {\n                                if (props.queryPerDay > 0) {\n                                  setFieldValue(\"toDate\", value);\n                                  setFieldTouched(\"toDate\");\n                                  setFieldValue(\"dateRange\", 6)\n                                  setIsSearchClicked(false)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                              selected={values.toDate}\n                            />\n                            {errors.toDate && touched.toDate ? (\n                              <span className=\"errorMsg\">{errors.toDate}</span>\n                            ) : null}\n                          </div>\n                        </div>\n\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"col-md-3 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <Field\n                              name=\"searchBy\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.searchBy && errors.searchBy ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.searchBy}\n                              // onChange={event => {\n                              //   if (props.queryPerDay > 0) {\n                              //     event.target.value == \"PRODUCT\" ? setFieldValue(\"matchType\", \"C\") : setFieldValue(\"matchType\", \"L\");\n                              //     searchValue.length = 1\n                              //     setFieldValue(\"searchBy\", event.target.value);\n                              //     setIsSearchClicked(false)\n                              //   }\n                              //   else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                              //     swalResponse()\n                              //   }\n                              // }}\n\n                              // --- changed function to trigger add button @sarbojitghosh22 11-06-2025 ---//\n                              onChange={event => {\n                                if (props.queryPerDay > 0) {\n                                  const selectedValue = event.target.value;\n                                  setFieldValue(\"searchBy\", selectedValue);\n                                  setIsSearchClicked(false);\n\n                                  // Set matchType based on the selected value\n                                  selectedValue === \"PRODUCT\" ? setFieldValue(\"matchType\", \"C\") : setFieldValue(\"matchType\", \"L\");\n\n                                  // Clear previous search values\n                                  searchValue.length = 1;\n\n                                  // Automatically trigger \"ADD\" button functionality for HS_CODE_2\n                                  if (selectedValue === \"HS_CODE_2\") {\n                                    setFieldValue(\"queryBuilder\", [\n                                      { relation: \"\", searchBy: \"HS_CODE_2\", matchType: \"\", searchValue: \"\" }\n                                    ]);\n                                  }\n                                } else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse();\n                                }\n                              }}\n                            // --- changed function to trigger add button @sarbojitghosh22 11-06-2025 ---//\n                            >\n                              <option value=\"\">Select Type</option>\n                              <option value=\"HS_CODE_2\">HS Code 2 digit</option>\n                              <option value=\"HS_CODE\">HS Code</option>\n                              <option value=\"PRODUCT\">Product</option>\n                              {/* {(values.tradeType == \"EXPORT\" && importerForExport == \"Y\") || values.tradeType == \"IMPORT\" ? <option value=\"IMPORTER\">Importer</option> : null}\n                              {(values.tradeType == \"IMPORT\" && exporterForImport == \"Y\" || values.tradeType == \"EXPORT\") ? <option value=\"EXPORTER\">Exporter</option> : null} */}\n\n                              {/* search option  modify for import and export @sarbojitghosh22 11-06-2025  */}\n                              <option value=\"IMPORTER\">Importer</option> : null\n                              <option value=\"EXPORTER\">Exporter</option> : null\n                              {/* search option  modify for import and export @sarbojitghosh22 11-06-2025  */}\n\n                            </Field>\n                            {errors.searchBy && touched.searchBy ? (\n                              <span className=\"errorMsg\">{errors.searchBy}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        <div className=\"col-md-3 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <Field\n                              name=\"matchType\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.matchType && errors.matchType ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.matchType}\n                              onChange={event => {\n                                if (props.queryPerDay > 0) {\n                                  setFieldValue(\"matchType\", event.target.value);\n                                  searchValue.length = 1\n                                  setIsSearchClicked(false)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                            >\n                              <option value=\"\">Select</option>\n                              {/* {values.searchBy == \"PRODUCT\" ? <>\n                              <option value=\"C\">Contains</option>\n                              <option value=\"D\">Does Not Contains</option> </> : null} */}\n                              {/* dropdown modification for type @sarbojitghosh22 11-06-2025 */}\n                              {values.searchBy == \"PRODUCT\" ? <>\n                                <option value=\"C\">Contains</option></> : null}\n                              {/* dropdown modification for type @sarbojitghosh22 11-06-2025 */}\n\n                              <option value=\"L\">Like</option>\n                            </Field>\n                            {errors.matchType && touched.matchType ? (\n                              <span className=\"errorMsg\">{errors.matchType}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        {searchValue && searchValue.length > 0 ?\n                          <div className=\"col-md-4 pr-0 pb-3\">\n                            <div className=\"input-search\" >\n                              {/* <FormGroup >\n                                <Creatable\n                                  placeholder={values.searchBy == \"HS_CODE\" ? \"Enter min 4 digit\" : \"Enter min 2 chars\"}\n                                  name=\"searchValue\"\n                                  options={suggestions}\n                                  isMulti\n                                  isOptionDisabled={() => values.searchValue && values.searchValue.length >= 10}\n                                  noOptionsMessage={() => \"name not found\"}\n                                  components={{ MenuList: SelectMenuButton }}\n                                  onInputChange={(newValue) => props.queryPerDay > 0 ? getSuggestionList(newValue, values, \"\") : null}\n                                  onChange={(selectedOption) => {\n\n                                    if (props.queryPerDay > 0) {\n                                      let itemList = [];\n                                      let newQuery = []\n                                      let isQueryBuilder = false\n                                      setIsSearchClicked(false)\n                                      selectedOption.forEach((item) => {\n                                        itemList.push(item.value);\n                                        if (values.searchBy == \"HS_CODE_2\") {\n                                          isQueryBuilder = true\n                                        }\n                                      });\n                                      if (isQueryBuilder == true) {\n                                        newQuery[0] = { relation: \"\", searchBy: \"\", matchType: \"\", searchValue: \"\" }\n                                        setFieldValue(\"queryBuilder\", newQuery)\n                                      }\n                                      setFieldValue(\"searchValue\", itemList);\n                                    }\n                                    else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                      swalResponse()\n                                    }\n                                  }}\n                                  defaultValue={searchValue}\n                                />\n\n                                {errors.searchValue && touched.searchValue ? (\n                                  <span className=\"errorMsg\">{errors.searchValue}</span>\n                                ) : null}\n                              </FormGroup> */}\n\n                              {/* hs code validation for minimum 4 digit @sarbojitghosh22 2-5-2025 */}\n\n                              <FormGroup>\n                                <Creatable\n                                  placeholder={values.searchBy === \"HS_CODE\" ? \"Enter min 4 digits\" : \"Enter min 2 chars\"}\n                                  name=\"searchValue\"\n                                  options={suggestions}\n                                  isMulti\n                                  isOptionDisabled={() => values.searchValue && values.searchValue.length >= 10}\n                                  noOptionsMessage={() => \"name not found\"}\n                                  components={{ MenuList: SelectMenuButton }}\n                                  onInputChange={(newValue) => {\n                                    if (props.queryPerDay > 0) {\n                                      getSuggestionList(newValue, values, \"\");\n                                    }\n                                  }}\n                                  onChange={(selectedOption) => {\n                                    if (props.queryPerDay > 0) {\n                                      let itemList = [];\n                                      let isValid = true;\n\n                                      selectedOption.forEach((item) => {\n                                        itemList.push(item.value);\n                                        if (values.searchBy === \"HS_CODE\" && item.value.length < 4) {\n                                          isValid = false;\n                                        }\n                                      });\n\n                                      if (!isValid) {\n                                        Swal.fire({\n                                          title: \"Error!\",\n                                          text: \"HS Code must be at least 4 digits.\",\n                                          icon: \"error\",\n                                          confirmButtonColor: \"#3085d6\",\n                                        });\n                                      } else {\n                                        setFieldValue(\"searchValue\", itemList);\n                                        setIsSearchClicked(false);\n                                      }\n                                    } else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                      swalResponse();\n                                    }\n                                  }}\n                                  defaultValue={searchValue}\n                                />\n                                {errors.searchValue && touched.searchValue ? (\n                                  <span className=\"errorMsg\">{errors.searchValue}</span>\n                                ) : null}\n                              </FormGroup>\n\n                              {/* hs code validation for minimum 4 digit @sarbojitghosh22 2-5-2025 */}\n\n                            </div>\n                          </div> : null\n                        }\n\n                      </div>\n\n                      <div className=\"row\">\n                        {queryBuilder(values, errors, touched, setFieldTouched, setFieldValue, Fragment)}\n                      </div>\n\n                      {workspace_id ? null :\n                        <div className=\"row\">\n                          <div className=\"col-md-2 pr-0 pb-3\">\n                            <button type=\"reset\" className=\"btn btn-warning\"\n                              onClick={(event) => {\n                                resetSearch(setFieldValue, values);\n                              }}>Reset</button> &nbsp;\n                            <button type=\"submit\"\n                              disabled={isSearchClicked}\n                              onClick={(event) => {\n                                event.preventDefault();\n                                setSearchId(\"\");\n                                setFieldValue(\"searchFlag\", true);\n                                handleSubmit();\n                              }} className=\"btn btn-primary\">Search</button>\n                          </div>\n                        </div>\n                      }\n                    </Form>\n                  )\n                }\n                }\n              </Formik>\n            </div>\n\n            {searchParams && searchParams.tradeType && searchResult.length > 0 ? (\n              <div className=\"row searchCountBlk\">\n                <div className=\"col-md-12 text-center\">\n\n                  <h3>Search Result of {searchParams.tradeType.toLowerCase()} data from&nbsp;\n                    {moment(searchParams.fromDate).format(\"DD-MMM-YYYY\")} to {moment(searchParams.toDate).format('DD-MMM-YYYY')}</h3>\n\n                </div>\n                {noDataErrorMsg == false ?\n                  <>\n                    <div className=\"col-lg-2 col-md-2 offset-md-1\">\n                      <div className=\"card\">\n                        <div className=\"card-body bg-soft-primary\">\n                          <div className=\"avatar\">\n                            <span className=\"avatar-title bg-soft-primary rounded\">\n                              <i className=\"icon ion-ios-barcode text-primary font-size-24\"></i>\n                            </span>\n                          </div>\n                          <div className=\"list-in\">\n                            <p className=\"text-muted mt-0 mb-0\">HSCODE</p>\n                            <h4 className=\"mt-0 mb-0\">{hsCodeDataList.length}</h4>\n                          </div>\n                        </div>\n                        {hscodeLoading && (\n                          <div className=\"loaderBox\">\n                            <div className=\"loader\"></div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"col-lg-2 col-md-2\">\n                      <div className=\"card\">\n                        <div className=\"card-body bg-soft-success\">\n                          <div className=\"avatar\">\n                            <span className=\"avatar-title bg-soft-success rounded\">\n                              <i className=\"icon ion-md-filing text-primary font-size-24\"></i>\n                            </span>\n                          </div>\n                          <div className=\"list-in\">\n                            <p className=\"text-muted mt-0 mb-0\">Total Shipment</p>\n                            <h4 className=\"mt-0 mb-0\">{totalRecord}</h4>\n                          </div>\n                        </div>\n                        {totalRecordLoading && (\n                          <div className=\"loaderBox\">\n                            <div className=\"loader\"></div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"col-lg-2 col-md-2\">\n                      <div className=\"card\">\n                        <div className=\"card-body bg-soft-primary\">\n                          <div className=\"avatar\">\n                            <span className=\"avatar-title bg-soft-primary rounded\">\n                              <i className=\"icon ion-md-business text-primary font-size-24\"></i>\n                            </span>\n                          </div>\n                          <div className=\"list-in\">\n                            <p className=\"text-muted mt-0 mb-0\"> {tradeType == \"E\" ? \"Country Of Destination\" : \"Country Of Origin\"}</p>\n                            <h4 className=\"mt-0 mb-0\">{countryOriginList.length}</h4>\n                          </div>\n                        </div>\n                        {portDestLoading && (\n                          <div className=\"loaderBox\">\n                            <div className=\"loader\"></div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    {(searchParams.tradeType == \"IMPORT\" && exporterForImport == \"Y\" || searchParams.tradeType == \"EXPORT\") ?\n                      <div className=\"col-lg-2 col-md-2\">\n                        <div className=\"card\">\n                          <div className=\"card-body bg-soft-success\">\n                            <div className=\"avatar\">\n                              <span className=\"avatar-title bg-soft-success rounded\">\n                                <i className=\"icon ion-md-filing text-primary font-size-24\"></i>\n                              </span>\n                            </div>\n                            <div className=\"list-in\">\n                              <p className=\"text-muted mt-0 mb-0\">Exporter</p>\n                              <h4 className=\"mt-0 mb-0\">{exporterDataList && exporterDataList.length}</h4>\n                            </div>\n                          </div>\n                          {exporterLoading && (\n                            <div className=\"loaderBox\">\n                              <div className=\"loader\"></div>\n                            </div>\n                          )}\n                        </div>\n                      </div> : null}\n                    {(searchParams.tradeType == \"EXPORT\" && importerForExport == \"Y\") || searchParams.tradeType == \"IMPORT\" ?\n                      <div className=\"col-lg-2 col-md-2\">\n                        <div className=\"card\">\n                          <div className=\"card-body bg-soft-primary\">\n                            <div className=\"avatar\">\n                              <span className=\"avatar-title bg-soft-primary rounded\">\n                                <i className=\"icon ion-ios-business text-primary font-size-24\"></i>\n                              </span>\n                            </div>\n                            <div className=\"list-in\">\n                              <p className=\"text-muted mt-0 mb-0\">Importer</p>\n                              <h4 className=\"mt-0 mb-0\">{importerDataList && importerDataList.length}</h4>\n                              {/* <h4 className=\"mt-0 mb-0\">{searchParams.tradeType = \"IMPORT\" ? importerDataList.length : exporterDataList.length}</h4> */}\n                            </div>\n                          </div>\n                          {importerLoading && (\n                            <div className=\"loaderBox\">\n                              <div className=\"loader\"></div>\n                            </div>\n                          )}\n                        </div>\n                      </div> : null}\n                  </>\n                  :\n                  <div className=\"col-lg-12 col-md-12 text-center\">\n                    <p>&nbsp;</p>\n                    <p>&nbsp;</p>\n                    <img src={require('../assets/image/Error.png').default}></img>\n                    <h4><p>Sorry we couldn't find any matches.</p></h4>\n                    <h2>Please Try Again</h2>\n                  </div>\n                }\n              </div>\n            ) : null}\n\n            <Draggable>\n              <div class=\"ad-butt\">\n                <button className=\"btn btn-primary ad-butt-button\" onClick={() => setToggle(!toggle)}><i className=\"icon ion-md-search text-light font-size-35\"></i></button>\n              </div>\n            </Draggable>\n\n\n            <div ref={gridRef}></div>\n            {/* {console.log(\"Search Result >>> \", searchResult)}\n            {console.log(\"Filtered Column >>> \", filteredColumn)}\n            {console.log(\"Trade Type >>>> \", tradeType)} */}\n            {filteredColumn.length > 0 ? (\n              tradeType === 'E' ? (\n                <DataTableExport\n                  exportToCSV={exportToCSV}\n                  searchResult={searchResult}\n                  limit={limit}\n                  page={page}\n                  setPage={setPage}\n                  handleChangeLimit={handleChangeLimit}\n                  totalRecord={totalRecord}\n                  searchLoading={searchLoading}\n                  setOrderByColumn={setOrderByColumn}\n                  setOrderByMode={setOrderByMode}\n                  orderByColumn={orderByColumn}\n                  orderByMode={orderByMode}\n                  setWorkspace={setWorkspace}\n                  showModal={showModal}\n                  filteredColumn={filteredColumn}\n                  saveQuery={saveQuery}\n                  search_id={searchId ? searchId : search_id}\n                  state={props.location.state}\n                  exportSelectedToCSV={exportSelectedToCSV}\n                  importerDataList={importerDataList}\n                  countryCode={countryCode}\n                  newColumnsKeys={props.location.state && props.location.state.columnKeys ? props.location.state.columnKeys : []}\n                  importerForExport={importerForExport}\n                  exporterForImport={exporterForImport}\n                  filterCountryList={filterCountryList}\n                  multiTradeCountryList={multiTradeCountryList} // New prop for multiTradeCountryList\n                  selectedTradeCountry={selectedTradeCountry} // New prop for selectedTradeCountry\n                  apiSerachpayload={apiSerachpayload}\n                />\n              ) : (\n                <DataTableImport\n                  exportToCSV={exportToCSV}\n                  searchResult={searchResult}\n                  limit={limit}\n                  page={page}\n                  setPage={setPage}\n                  handleChangeLimit={handleChangeLimit}\n                  totalRecord={totalRecord}\n                  searchLoading={searchLoading}\n                  setOrderByColumn={setOrderByColumn}\n                  setOrderByMode={setOrderByMode}\n                  orderByColumn={orderByColumn}\n                  orderByMode={orderByMode}\n                  setWorkspace={setWorkspace}\n                  showModal={showModal}\n                  filteredColumn={filteredColumn}\n                  saveQuery={saveQuery}\n                  search_id={searchId ? searchId : search_id}\n                  state={props.location.state}\n                  exportSelectedToCSV={exportSelectedToCSV}\n                  importerDataList={importerDataList}\n                  countryCode={countryCode}\n                  newColumnsKeys={props.location.state && props.location.state.columnKeys ? props.location.state.columnKeys : []}\n                  importerForExport={importerForExport}\n                  exporterForImport={exporterForImport}\n                  filterCountryList={filterCountryList}\n                  multiTradeCountryList={multiTradeCountryList} // New prop for multiTradeCountryList\n                  selectedTradeCountry={selectedTradeCountry} // New prop for selectedTradeCountry\n                  // countryRecords={countryRecords}\n                  apiSerachpayload={apiSerachpayload}\n                />\n              )) : noDataErrorMsg ? <div><h2>No records found</h2></div> : null}\n          </div>\n        </div>\n\n        {toggle && <AdvanceSearch toggleFromChild={setToggle}\n          importerDataList={importerDataList}\n          exporterDataList={exporterDataList}\n          portOriginDataList={portOriginDataList}\n          portDestinationDataList={portDestinationDataList}\n          countryOriginList={countryOriginList}\n          countryDestinationList={countryDestinationList}\n          hsCodeDataList={hsCodeDataList}\n          shipmentModeDataList={shipmentModeDataList}\n          shipmentModeList={shipmentModeList}\n          type={searchParams.tradeType}\n          countryCode={searchParams.countryCode}\n          updateFilter={updateFilter}\n          portOriginList={portOriginList}\n          portDestinationList={portDestinationList}\n          hsCodeList={hsCodeList}\n          importerList={importerList}\n          exporterList={exporterList}\n          cityOriginList={cityOriginList}\n          cityDestinationList={cityDestinationList}\n          hsCode4digitDataList={hsCode4digitDataList}\n          hsCode4DigitList={hsCode4DigitList}\n          fetchSearchQuery={fetchSearchQuery}\n          resetFilter={resetFilter}\n          stdUnitList={stdUnitList}\n          stdUnitDataList={stdUnitDataList}\n          searchId={searchId}\n          importerForExport={importerForExport}\n          exporterForImport={exporterForImport}\n          consumptionType={consumptionType}\n          consumptionTypeDataList={consumptionTypeDataList}\n          incotermList={incotermList}\n          incotermDataList={incotermListData}\n          notifyPartyList={notifyPartyList}\n          notifyPartyDataList={notifyPartyListData}\n        />\n        }\n      </div>\n      <div id=\"reportXLS\" hidden={true}>\n        {filteredArray && filteredArray.length > 0 ? <DloadTemplateXLS filteredArray={filteredArray} tradeType={tradeType} countryCode={countryCode} /> : null}\n      </div>\n\n      <Modal\n        show={showModal}\n        onHide={toggleModal}\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Save search</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <label>Workspace:</label>\n              <select className=\"form-control\" ref={workspaceRef}\n                onChange={(e) => { handleWorkspaceChange(e) }}>\n                <option >--select--</option>\n                <option value=\"newWorkspace\">Create New Workspace</option>\n                {workspaceList.map((ws, index) => {\n                  return (\n                    <option key={index} value={ws.id}>{ws.name}</option>\n                  )\n                })}\n              </select>\n              {wsError && (<p className='error'>{wsError}</p>)}\n            </div>\n            {showNewWorkspaceInput ?\n              <div className=\"col-md-12\">\n                <label>New workspace name:</label>\n                <input type=\"text\" name=\"title\" ref={sWorkspaceRef} className=\"form-control\" />\n                {sNewWsError && (<p className='error'>{sNewWsError}</p>)}\n              </div> : null\n            }\n            <div className=\"col-md-12\">\n              <label>Title:</label>\n              <input type=\"text\" name=\"title\" ref={sTitleRef} className=\"form-control\" />\n              {sTitleError && (<p className='error'>{sTitleError}</p>)}\n            </div>\n            <div className=\"col-md-12\">\n              <label>Description:</label>\n              <input type=\"text\" name=\"title\" ref={sDescRef} className=\"form-control\" />\n              {sDescError && (<p className='error'>{sDescError}</p>)}\n            </div>\n\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={toggleModal}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={() => {\n            getNewWorkspaceId()\n          }}>Submit</Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\n\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loader.loading,\n    download_count: state.data.download_count,\n    subscriptionId: state.data.subscriptionId,\n    dataAccess_count: state.data.dataAccess_count,\n    totalWorkspace: state.data.totalWorkspace,\n    subUserCount: state.data.subUserCount,\n    queryPerDay: state.data.queryPerDay,\n    downloadArray: state.data.downloadArray,\n    countryList: state.data.countryList,\n    dataAccessInMonth: state.data.dataAccessInMonth,\n    download_count_subUser: state.data.download_count_subUser,\n    dataAccessUpto: state.data.dataAccessUpto,\n    maxDownload: state.data.maxDownload,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadingStart: () => dispatch(loaderStart()),\n    loadingStop: () => dispatch(loaderStop()),\n    updateSubscriptionCount: (data) => dispatch(updateSubscriptionCount(data)),\n    updateDownloadArrayCount: (data) => dispatch(updateDownloadArrayCount(data)),\n    setDloadCountSubuser: (data) => dispatch(setDloadCountSubuser(data)),\n    setSearchQuery: (data) => dispatch(setSearchQuery(data))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(List));\n"],"sourceRoot":""}