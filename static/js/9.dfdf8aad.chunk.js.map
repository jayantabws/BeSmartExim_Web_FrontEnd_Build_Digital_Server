{"version":3,"sources":["components/CreateUser.js","components/EditUser.js","pages/users.js"],"names":["users","localStorage","getItem","JSON","parse","initialValues","firstname","lastname","mobile","email","company_name","companyName","download_limit","password","isActive","validateForm","Yup","shape","required","CreateUsers","props","NewInitialValues","Object","assign","download_count","userList","setUserList","useState","subscriptionList","setSubscriptionList","_jsx","children","className","Formik","validationSchema","onSubmit","values","loaderStart","postData","userid","Number","AxiosUser","method","url","data","stringify","headers","then","res","Swal","fire","title","text","icon","isSuccess","UpdateSubscription","subUserCount","OnUserCreate","loaderStop","catch","err","console","log","errorMsg","_ref","errors","setFieldValue","setFieldError","touched","isValid","handleSubmit","submitForm","_jsxs","Form","Field","name","type","placeholder","autoComplete","onChange","event","target","value","component","onClick","preventDefault","downloadLimit","EditeUser","rowData","useEffect","id","modalSubmit","withRouter","connect","state","loading","loader","subscriptionId","dataAccess_count","totalWorkspace","dispatch","loadingStart","loadingStop","updateSubscriptionCount","userId","loginUser","userListData","setUserListData","showModal","setShowModal","showEditModal","setShowEditModal","setRowdata","getUserList","temp_userList","createdDate","moment","format","temp_userListData","forEach","user","temp_userList_1","push","handleModalClose","_Fragment","e","dangerMode","showCancelButton","confirmButtonColor","cancelButtonColor","isConfirm","userData","filter","contact","toLowerCase","includes","searchUser","length","map","index","isConfirmed","handleEditModal","colSpan","style","textAlign","Modal","bssize","show","onHide","Header","closeButton","Title","Body","height","overflow","scrollbarWidth","AddUser","params","handleEditModalClose","EditUser"],"mappings":"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","file":"static/js/9.dfdf8aad.chunk.js","sourcesContent":["import React, { Component, useState, useRef, useCallback, useEffect, Fragment } from 'react'\nimport { Row, Col, Modal, Button, FormGroup, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport Select from 'react-select'\nimport AxiosMaster from '../shared/AxiosMaster';\nimport AxiosUser from \"../shared/AxiosUser\";\nimport { Formik, Field, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Swal from 'sweetalert2';\n\nconst users = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null;\n\nconst initialValues = {\n  firstname: \"\",\n  lastname: \"\",\n  mobile: \"\",\n  email: \"\",\n  company_name: users.companyName,\n  download_limit: 0,\n  password: \"\",\n  isActive: \"\"\n};\n\nconst validateForm = Yup.object().shape({\n  firstname: Yup.string().required(\"Please enter first name\"),\n  lastname: Yup.string().required(\"Please enter last name\"),\n  email: Yup.string().email().required(\"Please enter valid email address\"),\n  mobile: Yup.string().required(\"Please enter valid mobile no\"),\n  company_name: Yup.string().required(\"This field is required\"),\n  download_limit: Yup.string().required(\"This field is required\"),\n  password: Yup.string().required(\"This field is required\"),\n  isActive: Yup.string().required(\"This field is required\")\n});\n\n\nconst CreateUsers = (props) => {\n\n  const NewInitialValues = Object.assign(initialValues, { download_limit: props.download_count })\n  const [userList, setUserList] = useState([]);\n  const [subscriptionList, setSubscriptionList] = useState([]);\n\n  const handleSubmit = (values) => {\n    props.loaderStart()\n    const postData = {\n      \"firstname\": values.firstname,\n      \"lastname\": values.lastname,\n      \"email\": values.email,\n      \"mobile\": values.mobile,\n      \"companyName\": values.company_name,\n      \"downloadLimit\": values.download_limit,\n      \"userType\": \"USER\",\n      \"password\": values.password,\n      \"isActive\": values.isActive,\n      \"uplineId\": users.userid\n    }\n\n\n    if (Number(values.download_limit) <= Number(props.download_count)) {\n      AxiosUser({\n        method: \"POST\",\n        url: `user-management/user`,\n        data: JSON.stringify(postData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          Swal.fire({\n            title: 'Thank You',\n            text: \"User created successfully\",\n            icon: 'success',\n          }).then((isSuccess) => {\n            if (isSuccess) {\n              //props.UpdateSubscription({\"subUserCount\" : props.subUserCount -1, \"downloadLimit\": props.download_count - values.download_limit})\n              props.UpdateSubscription({ \"subUserCount\": props.subUserCount - 1 })\n              props.OnUserCreate()\n              props.loaderStop()\n            }\n          });\n        })\n        .catch(err => {\n          console.log(\"Err\", err);\n          let errorMsg = \"Somethhing went wrong, please try again.\"\n          if (err.data.errorMsg) {\n            errorMsg = err.data.errorMsg;\n          }\n          Swal.fire({\n            title: 'Oops!',\n            text: errorMsg,\n            icon: 'error',\n          })\n        });\n    }\n    else {\n      Swal.fire({\n        title: 'Oops!',\n        text: \"Download Limit should be less than total limit\",\n        icon: 'error',\n      })\n    }\n\n  }\n\n  const getSubscriptionList = () => {\n\n    AxiosMaster({\n      method: \"GET\",\n      url: `masterdata-management/subscription/list`,\n    })\n      .then(res => {\n        setSubscriptionList(res.data.subscriptionList)\n      })\n      .catch(err => {\n        setSubscriptionList([])\n      });\n  }\n\n  // useEffect(() => {\n  //   // getSubscriptionList()\n  //   console.log(\"Download count >>> \", props.download_count)\n  // }, [])\n\n\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col-lg-12 grid-margin stretch-card\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <div className=\"table-responsive\">\n\n                <Formik\n                  initialValues={NewInitialValues}\n                  validationSchema={validateForm}\n                  onSubmit={handleSubmit}\n                >\n                  {({ values, errors, setFieldValue, setFieldError, touched, isValid, handleSubmit, submitForm }) => {\n                    return (\n                      <Form >\n\n                        <div className=\"form-group\">\n                          <label><b>First Name</b></label>\n                          <Field\n                            name=\"firstname\"\n                            type=\"text\"\n                            className={`form-control ${touched.firstname && errors.firstname ? \"is-invalid\" : \"\"}`}\n                            placeholder=\"First Name\"\n                            autoComplete='off'\n                            onChange={event => {\n                              setFieldValue(\"firstname\", event.target.value);\n                            }}\n                          />\n                          {touched.firstname && errors.firstname && (<p className=\"error\">{errors.firstname}</p>)}\n                        </div>\n                        <div className=\"form-group\">\n                          <label><b>Last Name</b></label>\n                          <Field\n                            name=\"lastname\"\n                            type=\"text\"\n                            className={`form-control ${touched.lastname && errors.lastname ? \"is-invalid\" : \"\"}`}\n                            placeholder=\"Last Name\"\n                            autoComplete='off'\n                            onChange={event => {\n                              setFieldValue(\"lastname\", event.target.value);\n                            }}\n                          />\n                          {touched.lastname && errors.lastname && (<p className=\"error\">{errors.lastname}</p>)}\n                        </div>\n                        <div className=\"form-group\">\n                          <label><b>Email</b></label>\n                          <Field\n                            name=\"email\"\n                            type=\"text\"\n                            className={`form-control ${touched.email && errors.email ? \"is-invalid\" : \"\"}`}\n                            placeholder=\"Email Address\"\n                            autoComplete='off'\n                            onChange={event => {\n                              setFieldValue(\"email\", event.target.value);\n                            }}\n                          />\n                          {touched.email && errors.email && (<p className=\"error\">{errors.email}</p>)}\n                        </div>\n                        <div className=\"form-group\">\n                          <label><b>Mobile</b></label>\n                          <Field\n                            name=\"mobile\"\n                            type=\"text\"\n                            className={`form-control ${touched.mobile && errors.mobile ? \"is-invalid\" : \"\"}`}\n                            placeholder=\"Mobile No\"\n                            autoComplete='off'\n                            onChange={event => {\n                              setFieldValue(\"mobile\", event.target.value);\n                            }}\n                          />\n                          {touched.mobile && errors.mobile && (<p className=\"error\">{errors.mobile}</p>)}\n                        </div>\n                        <div className=\"form-group\">\n                          <label><b>Password</b></label>\n                          <Field\n                            name=\"password\"\n                            type=\"password\"\n                            className={`form-control ${touched.password && errors.password ? \"is-invalid\" : \"\"}`}\n                            placeholder=\"Password\"\n                            autoComplete='off'\n                            onChange={event => {\n                              setFieldValue(\"password\", event.target.value);\n                            }}\n                          />\n                          {touched.password && errors.password && (<p className=\"error\">{errors.password}</p>)}\n                        </div>\n                        <div className=\"form-group\">\n                          <label><b>Company Name</b></label>\n                          <Field\n                            name=\"company_name\"\n                            type=\"text\"\n                            className={`form-control ${touched.company_name && errors.company_name ? \"is-invalid\" : \"\"}`}\n                            placeholder=\"Company Name\"\n                            autoComplete='off'\n                            onChange={event => {\n                              setFieldValue(\"company_name\", event.target.value);\n                            }}\n                          />\n                          {touched.company_name && errors.company_name && (<p className=\"error\">{errors.company_name}</p>)}\n                        </div>\n                        <div className=\"form-group\">\n                          <label><b>Assigned Download Limit</b></label>\n                          <Field\n                            name=\"download_limit\"\n                            type=\"text\"\n                            className={`form-control ${touched.download_limit && errors.download_limit ? \"is-invalid\" : \"\"}`}\n                            placeholder=\"Download Limit\"\n                            autoComplete='off'\n                            onChange={event => {\n                              setFieldValue(\"download_limit\", event.target.value);\n                            }}\n                          />\n                          {touched.download_limit && errors.download_limit && (<p className=\"error\">{errors.download_limit}</p>)}\n                        </div>\n                        <div className=\"form-group\">\n                          <label><b>Status</b></label>\n                          <Field\n                            name=\"isActive\"\n                            component=\"select\"\n                            className={`form-control ${touched.isActive && errors.isActive ? \"is-invalid\" : \"\"}`}\n                            autoComplete=\"off\"\n                            onChange={event => {\n                              setFieldValue(\"isActive\", event.target.value);\n                            }}\n                          >\n                            <option value=\"\" >Please Select</option>\n                            <option value=\"Y\" >ACTIVE</option>\n                            <option value=\"N\" >IN-ACTIVE</option>\n\n                            {touched.isActive && errors.isActive && (<p className=\"error\">{errors.isActive}</p>)}\n                          </Field>\n                        </div>\n\n                        <button type=\"submit\" onClick={(event) => {\n                          event.preventDefault();\n                          handleSubmit();\n                        }} className=\"btn btn-primary\">Create Account</button>\n                      </Form>\n                    )\n                  }\n                  }\n                </Formik>\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  )\n\n}\n\nexport default CreateUsers\n","import React, { Component,useState, useRef, useCallback, useEffect, Fragment } from 'react'\nimport { Row, Col, Modal, Button, FormGroup, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport Select from 'react-select'\nimport AxiosMaster from '../shared/AxiosMaster';\nimport AxiosUser from \"../shared/AxiosUser\";\nimport { Formik, Field, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Swal from 'sweetalert2';\n\n\nconst validateForm = Yup.object().shape({\n  firstname: Yup.string().required(\"Please enter first name\"),\n  lastname: Yup.string().required(\"Please enter last name\"),\n  email: Yup.string().email().required(\"Please enter valid email address\"),\n  mobile: Yup.string().required(\"Please enter valid mobile no\"),\n  companyName: Yup.string().required(\"This field is required\"),\n  downloadLimit: Yup.string().required(\"This field is required\"),\n  isActive: Yup.string().required(\"This field is required\"),\n  password: Yup.string().required(\"This field is required\"),\n});\n\n\nconst EditeUser = (props) => {\n\n\n  const initialValues = {\n    firstname: props.rowData.firstname,\n    lastname: props.rowData.lastname,\n    mobile: props.rowData.mobile,\n    email: props.rowData.email,\n    companyName: props.rowData.companyName,\n    downloadLimit: props.download_count,\n    isActive: props.rowData.isActive,\n    password: props.rowData.password\n  };\n  \n\n  const [userList, setUserList] = useState([]);\n\n  const handleSubmit = (values) => {\n      const postData = {\n        \"firstname\": values.firstname,\n        \"lastname\": values.lastname,\n        \"email\": values.email,\n        \"mobile\": values.mobile,\n        \"companyName\": values.companyName,\n        \"downloadLimit\": values.downloadLimit,\n        \"isActive\": values.isActive,\n        \"password\": values.password\n      }\nconsole.log(\"Props ==== \", props)\n      if(values.downloadLimit <= props.download_count) {\n\n        AxiosUser({\n          method: \"PUT\",\n          url: `user-management/user/${props.rowData.id}`,\n          data: JSON.stringify(postData),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        })\n          .then(res => {\n            console.log(\"user\", res.data);\n            Swal.fire({\n              title: 'Thank You',\n              text: \"User update is successful\",\n              icon: 'success',\n            }).then(() => {props.modalSubmit()});\n          })\n          .catch(err => {\n            console.log(\"Err\", err);\n            let errorMsg = \"Somethhing went wrong, please try again.\"\n            if (err.data.errorMsg) {\n              errorMsg = err.data.errorMsg;\n            }\n            Swal.fire({\n              title: 'Oops!',\n              text: errorMsg,\n              icon: 'error',\n            })\n          });\n\n      }\n      else {\n        Swal.fire({\n              title: 'Oops!',\n              text: \"Download Limit should be less than total limit\",\n              icon: 'error',\n            })\n      }\n  }\n\n\n  useEffect(() => {\n\n  },[])\n\n\n    return (\n      <div>\n        \n          <Formik\n            initialValues={initialValues}\n            validationSchema={validateForm}\n            onSubmit={handleSubmit}\n          >\n            {({ values, errors, setFieldValue, setFieldError, touched, isValid, handleSubmit, submitForm }) => {        \n              return (\n                <Form >\n                  <div className=\"form-group\">\n                    <label><b>First Name</b></label>\n                    <Field\n                      name=\"firstname\"\n                      type=\"text\"\n                      className={`form-control ${touched.firstname && errors.firstname ? \"is-invalid\" : \"\"}`}\n                      placeholder=\"First Name\"\n                      onChange={event => {\n                        setFieldValue(\"firstname\", event.target.value);\n                      }}\n                    />\n                    {touched.firstname && errors.firstname && (<p className=\"error\">{errors.firstname}</p>)}\n                  </div>\n                  <div className=\"form-group\">\n                  <label><b>Last Name</b></label>\n                    <Field\n                      name=\"lastname\"\n                      type=\"text\"\n                      className={`form-control ${touched.lastname && errors.lastname ? \"is-invalid\" : \"\"}`}\n                      placeholder=\"Last Name\"\n                      onChange={event => {\n                        setFieldValue(\"lastname\", event.target.value);\n                      }}\n                    />\n                    {touched.lastname && errors.lastname && (<p className=\"error\">{errors.lastname}</p>)}\n                  </div>\n                  <div className=\"form-group\">\n                  <label><b>Email</b></label>\n                    <Field\n                      name=\"email\"\n                      type=\"text\"\n                      className={`form-control ${touched.email && errors.email ? \"is-invalid\" : \"\"}`}\n                      placeholder=\"Email Address\"\n                      onChange={event => {\n                        setFieldValue(\"email\", event.target.value);\n                      }}\n                    />\n                    {touched.email && errors.email && (<p className=\"error\">{errors.email}</p>)}\n                  </div>\n                  <div className=\"form-group\">\n                  <label><b>Mobile</b></label>\n                    <Field\n                      name=\"mobile\"\n                      type=\"text\"\n                      className={`form-control ${touched.mobile && errors.mobile ? \"is-invalid\" : \"\"}`}\n                      placeholder=\"Mobile No\"\n                      onChange={event => {\n                        setFieldValue(\"mobile\", event.target.value);\n                      }}\n                    />\n                    {touched.mobile && errors.mobile && (<p className=\"error\">{errors.mobile}</p>)}\n                  </div>\n                  <div className=\"form-group\">\n                      <label><b>Password</b></label>\n                        <Field\n                          name=\"password\"\n                          type=\"password\"\n                          className={`form-control ${touched.password && errors.password ? \"is-invalid\" : \"\"}`}\n                          placeholder=\"Password\"\n                          onChange={event => {\n                            setFieldValue(\"password\", event.target.value);\n                          }}\n                        />\n                        {touched.password && errors.password && (<p className=\"error\">{errors.password}</p>)}\n                  </div>\n                  <div className=\"form-group\">\n                  <label><b>Company Name</b></label>\n                    <Field\n                      name=\"companyName\"\n                      type=\"text\"\n                      className={`form-control ${touched.companyName && errors.companyName ? \"is-invalid\" : \"\"}`}\n                      placeholder=\"Company Name\"\n                      onChange={event => {\n                        setFieldValue(\"companyName\", event.target.value);\n                      }}\n                    />\n                    {touched.companyName && errors.companyName && (<p className=\"error\">{errors.companyName}</p>)}\n                  </div> \n                  <div className=\"form-group\">\n                  <label><b>Assigned Download Limit</b></label>\n                    <Field\n                      name=\"downloadLimit\"\n                      type=\"text\"\n                      className={`form-control ${touched.downloadLimit && errors.downloadLimit ? \"is-invalid\" : \"\"}`}\n                      placeholder=\"Download Limit\"\n                      onChange={event => {\n                        setFieldValue(\"downloadLimit\", event.target.value);\n                      }}\n                    />\n                    {touched.downloadLimit && errors.downloadLimit && (<p className=\"error\">{errors.downloadLimit}</p>)}\n                  </div>\n                  <div className=\"form-group\">\n                  <label><b>Status</b></label>\n                    <Field\n                      name=\"isActive\"\n                      component=\"select\"\n                      className={`form-control ${touched.isActive && errors.isActive ? \"is-invalid\" : \"\"}`}\n                      autoComplete=\"off\"      \n                      onChange={event => {\n                        setFieldValue(\"isActive\", event.target.value);\n                      }}\n                    >    \n                      <option value= \"\" >Please Select</option>\n                      <option value= \"Y\" >Active</option>\n                      <option value= \"N\" >Inactive</option>\n                      {touched.isActive && errors.isActive && (<p className=\"error\">{errors.isActive}</p>)}\n                    </Field>   \n                  </div>\n                  \n                  <button type=\"submit\"  className=\"btn btn-primary\">Update User</button>\n                </Form>\n              )\n            }\n            }\n          </Formik>\n\n               \n      </div>\n    )\n\n}\n\nexport default EditeUser\n","import React, { useEffect, useState } from 'react';\nimport AxiosUser from \"../shared/AxiosUser\";\nimport moment from 'moment';\nimport AddUser from '../components/CreateUser';\nimport EditUser from '../components/EditUser';\nimport { Dropdown, DropdownButton, Modal,  OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { loaderStart, loaderStop } from \"../store/actions/loader\";\nimport {updateSubscriptionCount} from \"../store/actions/data\"\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router-dom';\nimport Swal from 'sweetalert2';\n\n\n function Users(props) {\n\n  const userId = localStorage.getItem(\"userToken\");\n  const loginUser = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null;\n\n  const [userList, setUserList] = useState([]);\n  const [userListData, setUserListData] = useState([]);\n\n  const [showModal, setShowModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [rowData, setRowdata] = useState(false);\n\n  const getUserList = () => {\n    props.loadingStart()\n    let temp_userList = [{\n        \"firstname\" : loginUser.firstname,\n        \"lastname\" : loginUser.lastname,\n        \"email\" : loginUser.email,\n        \"mobile\" : loginUser.mobile,\n        \"isActive\" : loginUser.isActive ,\n        \"createdDate\" : loginUser.createdDate ? moment(loginUser.createdDate).format(\"YYYY-MM-DD\") : null,\n        \"id\" :  loginUser.userid\n    }]\n    let temp_userListData = [{\n        \"firstname\" : loginUser.firstname,\n        \"lastname\" : loginUser.lastname,\n        \"email\" : loginUser.email,\n        \"mobile\" : loginUser.mobile,\n        \"isActive\" : loginUser.isActive ,\n        \"createdDate\" : loginUser.createdDate ? moment(loginUser.createdDate).format(\"YYYY-MM-DD\") : null,\n        \"password\" : loginUser.password,\n        \"companyName\": loginUser.companyName,\n        \"id\" :  loginUser.userid\n        \n    }]\n\n    AxiosUser({\n      method: \"GET\",\n      url: `user-management/user/list?uplineId=${userId}`\n    })\n      .then(res => {       \n\n        res.data.userList.forEach(user => {\n          let temp_userList_1 = {\n            \"firstname\" : user.firstname,\n            \"lastname\" : user.lastname,\n            \"email\" : user.email,\n            \"mobile\" : user.mobile,\n            \"isActive\" : user.isActive,\n            \"createdDate\" : user.createdDate ? moment(user.createdDate).format(\"YYYY-MM-DD\") : null,\n            \"password\" : user.password,\n            \"companyName\": user.companyName,\n            \"downloadLimit\": user.downloadLimit,\n            \"id\" :  user.id\n          }\n          temp_userList.push(temp_userList_1)\n          temp_userListData.push(temp_userList_1)\n\n        });\n        setUserList(temp_userList)\n        setUserListData(temp_userListData)\n\n        props.loadingStop()\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        props.loadingStop()\n      });\n  }\n\n  const handleModal = ()  => {\n    if(props.subUserCount > 0 ){\n      Swal.fire({\n        title: 'Create User !',\n        text: `Available Limit ${props.subUserCount}. \\n Are you sure you want to Create New User ?`,\n        icon: 'warning',\n        dangerMode: true,\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        }).then((isConfirm)=> {\n          if(isConfirm.value){\n            setShowModal(true)\n          }})\n    }\n    else {\n      Swal.fire({\n        title: 'Create User !',\n        text: \"Your User Limit Exhausted\",\n        icon: 'error',\n        dangerMode: true,\n        confirmButtonColor: '#3085d6',\n      }).then((isConfirm)=> {})\n    }\n   \n  }\n\n  const UpdateSubscription = (params) => {\n\n    AxiosUser({\n      method: \"PUT\",\n      url: `user-management/user-subscription/update/${props.subscriptionId}`,\n      data: JSON.stringify(params),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        // props.updateSubscriptionCount({\n        //   download_count: params.downloadLimit,\n        //   subscriptionId: props.subscriptionId,\n        //   dataAccess_count: props.dataAccess_count,\n        //   totalWorkspace: props.totalWorkspace,\n        //   subUserCount: props.subUserCount - 1\n        // })\n\n        props.updateSubscriptionCount({\n          download_count: props.download_count,\n          subscriptionId: props.subscriptionId,\n          dataAccess_count: props.dataAccess_count,\n          totalWorkspace: props.totalWorkspace,\n          subUserCount: props.subUserCount - 1\n        })\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n      });\n\n}\n\n  const OnUserCreate = () => {\n    handleModalClose()\n    getUserList()\n  }\n\n  const handleModalClose = ()  => {\n    setShowModal(false)\n  }\n  const modalSubmit = (e) => {\n    setShowModal(false)\n    setShowEditModal(false)\n    getUserList()\n  }\n\n  const handleEditModal = (rowData)  => {\n    setShowEditModal(true)\n    setRowdata(rowData)\n  }\n\n  const handleEditModalClose = ()  => {\n    setShowEditModal(false)\n  }\n\n  useEffect(() => {\n    getUserList();\n  }, []);\n\n  const searchUser = (text) => {\n    console.log(\"text\", text)\n    let userData = userList.filter((contact) => contact.firstname.toLowerCase().includes(text.toLowerCase()) ||\n                                                contact.lastname.toLowerCase().includes(text.toLowerCase()) );\n    setUserListData(userData);\n  }\n\n  const deleteUser = (id) => {\n    Swal.fire({\n      title: 'Remove',\n      text: \" Are you sure you want to Remove the user?\",\n      icon: 'warning',\n      dangerMode: true,\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n    }).then((isConfirm)=> {\n\n      if(isConfirm.isConfirmed){\n        const postData = {\n          \"isDelete\": \"Y\"\n        }\n        AxiosUser({\n          method: \"PUT\",\n          url: `user-management/deleteuser/${id}`,\n          data: JSON.stringify(postData),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        })\n        .then(res => {\n          Swal.fire({\n            title: 'Remove',\n            text: \" User removed successfully\",\n            icon: 'success',\n          }).then(getUserList())\n        })\n        .catch(err => {\n          console.log(\"Err\", err);\n        });\n      }\n    })\n    \n  }\n\n  return (\n    <>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-12 list-page mt-3\">\n          \n\n            <div className=\"search-ar mt-2 mb-2\">\n              <h2 className=\"headl\">Users</h2>\n              &nbsp;&nbsp;<button onClick={(e) => { handleModal(e.target.value) } }>Add User</button>\n              <div className=\"wrap float-right\">\n                <div className=\"search\">\n                  <input type=\"text\" onChange={(e) => { searchUser(e.target.value) }} className=\"searchTerm\" placeholder=\"What are you looking for?\" />\n                  <button type=\"submit\" className=\"searchButton\">\n                    <i className=\"icon ion-md-search\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n            <table className=\"table table-striped table-hover\">\n              <thead className=\"\">\n                <tr>\n                  <th>SL No.</th>\n                  <th>Firstname</th>\n                  <th>Last Name</th>\n                  <th>Company Name</th>\n                  <th>Email Id</th>\n                  <th>Mobile</th>\n                  <th>Available Download Limit</th>\n                  <th>Status</th>\n                  <th>Created On</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  userListData.length > 0 ? (\n                    userListData.map((user, index) => {   \n                      return (\n                        <tr key={index}>\n                          <td>{index + 1}.</td>\n                          <td>{user.firstname}</td>\n                          <td>{user.lastname ? user.lastname : ''}</td>\n                          <td>{user.companyName ? user.companyName : ''}</td>\n                          <td>{user.email ? user.email : ''}</td>\n                          <td>{user.mobile ? user.mobile : ''}</td>\n                          <td>{user.downloadLimit ? user.downloadLimit : ''}</td>\n                          <td>{user.isActive && user.isActive == \"Y\" ? \"Active\" : \"Inactive\" }</td>\n                          <td>{user.createdDate ? user.createdDate : ''}</td>\n                           <td>{index >= 1 ? <button className=\"btn btn-primary btn-sm\" onClick ={() => {deleteUser(user.id)}}><i className=\"icon ion-ios-trash\"></i></button> : null} &nbsp;\n                          <button className=\"btn btn-primary btn-sm\" onClick ={() => {handleEditModal(user)}} ><i className=\"fa fa-pencil\"></i></button></td>\n                        </tr>\n                      )\n\n                    })\n                  ) : (<tr><td colSpan=\"7\" style={{ textAlign: \"center\" }}>No record found</td></tr>)\n                }\n              </tbody>\n            </table>\n\n          </div>\n        </div>\n        <div>\n            { showModal ? \n            <Modal className=\"\" bssize=\"md\"\n                show={showModal}\n                onHide={handleModalClose} \n                >             \n                <Modal.Header closeButton > Create User </Modal.Header>\n                <Modal.Title >  </Modal.Title>\n\n                    <Modal.Body style= {{ height: '80vh', overflow : 'auto', scrollbarWidth : '10px' } }>\n                    <div>\n                    <AddUser  \n                      UpdateSubscription = {UpdateSubscription}\n                      OnUserCreate = {OnUserCreate}\n                      subUserCount= {props.subUserCount}\n                      download_count = {props.download_count}\n                      subscriptionId = {props.subscriptionId}\n                      loaderStart = {props.loadingStart}\n                      loaderStop = {props.loadingStop}\n                    />\n                    </div>\n                    </Modal.Body>\n                        \n              </Modal>\n            : null}\n        </div>\n\n        <div>\n            { showEditModal ? \n            <Modal className=\"\" bssize=\"md\"\n                show={showEditModal}\n                onHide={handleEditModalClose} \n                >             \n                <Modal.Header closeButton > Edit User </Modal.Header>\n                <Modal.Title >  </Modal.Title>\n\n                    <Modal.Body style= {{ height: '80vh', overflow : 'auto', scrollbarWidth : '10px' } }>\n                    <div>\n                    <EditUser  \n                      rowData = {rowData}\n                      download_count = {props.download_count}\n                      modalSubmit = {modalSubmit}\n                    />\n                    </div>\n                    </Modal.Body>\n                        \n              </Modal>\n            : null}\n        </div>\n\n      </div>\n\n\n    </>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loader.loading,\n    download_count: state.data.download_count,\n    subscriptionId: state.data.subscriptionId,\n    dataAccess_count: state.data.dataAccess_count,\n    totalWorkspace: state.data.totalWorkspace,\n    subUserCount: state.data.subUserCount\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadingStart: () => dispatch(loaderStart()),\n    loadingStop: () => dispatch(loaderStop()),\n    updateSubscriptionCount: (data) => dispatch(updateSubscriptionCount(data)), \n  };\n};\nexport default withRouter (connect( mapStateToProps, mapDispatchToProps)(Users));"],"sourceRoot":""}