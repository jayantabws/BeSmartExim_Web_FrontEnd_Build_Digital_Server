{"version":3,"sources":["pages/list1.js"],"names":["initialValues","tradeType","searchBy","searchValue","countryCode","fromDate","toDate","matchType","dateRange","searchFlag","queryBuilder","SearchQueryCount","isMainSearch","scrollToRef","ref","window","scrollTo","current","offsetTop","CountrySelector","_ref","multiTradeCountryList","selectedTradeCountry","setFieldValue","values","setSelectedTradeCountry","setMaxMinDate","showModal","setShowModal","useState","tempSelectedCountries","setTempSelectedCountries","useEffect","selectedValues","map","country","value","_jsxs","_Fragment","children","_jsx","className","onClick","length","label","join","Modal","show","onHide","size","Header","closeButton","Title","Body","Button","variant","handleSelectAll","allCountryValues","updatedSelectedCountries","handleDeselectAll","type","checked","includes","onChange","shortcode","updatedTempSelectedCountries","filter","code","handleCheckboxChange","validateForm","Yup","shape","required","test","checkGreaterStartEndTimes","this","parent","checkGreaterTimes","withRouter","connect","state","loading","loader","download_count","data","subscriptionId","dataAccess_count","totalWorkspace","subUserCount","queryPerDay","downloadArray","countryList","dataAccessInMonth","download_count_subUser","dataAccessUpto","maxDownload","dispatch","loadingStart","loaderStart","loadingStop","loaderStop","updateSubscriptionCount","updateDownloadArrayCount","setDloadCountSubuser","setSearchQuery","props","userId","localStorage","getItem","user","loggedUser","JSON","parse","userId_new","firstname","lastname","email","uplineId","userid","history","useHistory","search_id","location","searchTypeValue","search_type","workspace_id","workspace_name","workspace_desc","workspaceId","newSearch","gridRef","useRef","toggle","setToggle","searchResult","setSearchResult","limit","setLimit","page","setPage","totalRecord","setTotalRecord","searchLoading","setSearchLoading","searchParams","setSearchParams","importerList","setImporterList","importerDataList","setImporterDataList","exporterList","setExporterList","exporterDataList","setExporterDataList","portOriginList","setPortOriginList","portOriginDataList","setPortOriginDataList","portDestinationDataList","setPortDestinationDataList","portDestinationList","setPortDestinationList","countryOriginList","setCountryOriginList","countryDestinationList","setCountryDestinationList","hsCodeList","setHsCodeList","hsCodeDataList","setHsCodeDataList","cityOriginList","setCityOriginList","cityDestinationList","setCityDestinationList","searchId","setSearchId","orderByColumn","setOrderByColumn","orderByMode","setOrderByMode","hscodeLoading","isHscodeLoading","portDestLoading","isPortDestLoading","coLoading","isCoLoading","importerLoading","isImporterLoading","exporterLoading","isExporterLoading","totalRecordLoading","isTotalRecordLoading","shipmentModeDataList","setShipmentModeDataList","shipmentModeList","setShipmentModeList","hsCode4DigitList","setHsCode4digitList","hsCode4digitDataList","setHsCode4digitDataList","filteredColumn","setFilteredColumn","suggestions","setSuggestions","queryBuilderSuggestions","setQueryBuilderSuggestions","isDownloaded","setIsDownloaded","noDataErrorMsg","setNoDataErrorMsg","isSearchClicked","setIsSearchClicked","previousTotalRecordCount","setPreviousTotalRecordCount","stdUnitDataList","setStdUnitDataList","stdUnitList","setStdUnitList","setCountryCode","importerForExport","setImporterForExport","exporterForImport","setExporterForImport","returnSearchId","setReturnSearchId","consumptionType","setConsumptionType","consumptionTypeDataList","setConsumptionTypeDataList","incotermList","setIncotermList","incotermListData","setIncotermListData","notifyPartyList","setNotifyPartyList","notifyPartyListData","setNotifyPartyListData","sTitleRef","sDescRef","workspaceRef","sWorkspaceRef","setTradeType","sTitleError","isSTitleError","sDescError","isSDescError","sNewWsError","isNewWsError","wsError","isWsError","workspaceList","setWorkspaceList","tradeCountryList","setTradeCountryList","setMultiTradeCountryList","setSearchValue","queryBuilderSearchValue","setQueryBuilderSearchValue","showNewWorkspaceInput","setshowNewWorkspaceInput","minDate","setMinDate","Date","maxDate","setMaxDate","filteredArray","setFilteredArray","countryWeightage","setCountryWeightage","filterCountryList","setFilterCountryList","selectedFilterCountryList","setSelectedFilterCountryList","toggleModal","UpdateSubscription","params","AxiosUser","method","url","stringify","headers","then","res","console","log","catch","err","LoginCheck","setWorkspace","val","Swal","fire","title","text","icon","dangerMode","showCancelButton","confirmButtonColor","cancelButtonColor","isConfirm","saveQuery","postData","AxiosACT","errorMsg","getPaginationSearchData","searchType","getTradingCountryList","handleChangeLimit","dataKey","handleSearch","arguments","undefined","moment","format","minQuantity","maxQuantity","minValue","maxValue","minUnitPrice","maxUnitPrice","consumptionTypeList","descriptionList","conditionProductDescription","lp","setItem","getSearchData","exportToCSV","Math","round","Axios","exportDataSet","countryCodes","toUpperCase","tempTradeType","toLowerCase","expForeignList","impForeignList","i","filtered","obj","key","push","downloadXLS","confirmButtonText","exportSelectedToCSV","checkedRowID","item","index","subItem","subIndex","id","dloadType","prevDownloadArray","newIDArray","newValueArray","totalNewWeightage","reduce","total","match1","find","ctry_code","weightagePoints","totalFilteredWeightage","match","remainingDload","remainingDload_subUser","countryWeightageSummary","forEach","countryName","totalCount","totalWeightage","html","fileType","fileExtension","fileName","wb","Sheets","XLSX","table_to_sheet","document","getElementById","header","SheetNames","excelBuffer","bookType","Blob","FileSaver","saveLogPayload","saveDownloadLog","UpdateDownloadTracher","downloadSearch","tempSearchResult","rangeQuantityStart","rangeQuantityEnd","rangeValueUsdStart","rangeValueUsdEnd","rangeUnitPriceUsdStart","rangeUnitPriceUsdEnd","incoterm","notifyParty","productDesc","conditionProductDesc","async","getTotalCount","objColumns","Object","keys","x","countryRes","tempOptions","countryWiseCount","_ref2","ctry_name","shipment_count","getImporterList","getExporterList","getPortOriginList","getPortDestinationList","getHSCodeList","getIndianCityList","getForeignCountryList","getHSCode4digitList","getShipmentModeList","getStdUnitList","searchQuery","columnKey","formattedOptions","distinctColumnValuesList","_ref3","column_name","records_count","e","getConsumptionTypeDataList","apiResponse","_ref4","getIncotermListDataList","_ref5","getNotifyPartyListDataList","searchID","updateSearchCount","setTimeout","totalRecords","totalDownloadRecords","importList","importersList","specificItem","importer_name","exportList","exportersList","exporter_name","portsList","port_name","hsList","hscodesList","hscode","fcList","countriesList","country_name","icList","citiesList","city_name","ship_mode","std_unit","updateFilter","handleSaveSearch","parseInt","fetchSearchQuery","getSuggestionList","innitialParams","newSuggestionList","QueryBuilderNewSuggestionList","suggestionList","listSuggestion","SelectMenuButton","components","MenuList","AxiosMaster","multiCountryList","name","exportPointWeightage","importPointWeightage","assign","hasChild","queryBuilderSuggestionList","queryList","sParams","userSearchQuery","shipModeList","newitem","newindex","tempArray","fetchTradingCountryListOnInnitialize","selectedCountryList","tempRow","some","importFrom","importUpto","exportFrom","exportUpto","setDate","selectedCountries","fromDates","toDates","min","max","removeItem","errors","touched","setFieldTouched","Fragment","FieldArray","render","arrayHelpers","Field","component","autoComplete","event","target","swalResponse","hasOwnProperty","FormGroup","Creatable","placeholder","options","isMulti","isOptionDisabled","noOptionsMessage","onInputChange","newValue","selectedOption","itemList","defaultValue","remove","relation","Formik","enableReinitialize","validationSchema","onSubmit","checkValidErr","errMsg","subitem","resetForm","_ref6","setFieldError","isValid","handleSubmit","submitForm","Form","tempmaxMin","tempMaxDate","diff","newMaxDate","newDate","d","subtract","fromdate","dateDiff","tempFromdate","add","DatePicker","dateFormat","placeholderText","peekPreviousMonth","peekPreviousYear","showMonthDropdown","showYearDropdown","dropdownMode","selected","newQuery","isQueryBuilder","resetSearch","disabled","preventDefault","src","require","default","Draggable","class","DataTableExport","newColumnsKeys","columnKeys","DataTableImport","AdvanceSearch","toggleFromChild","resetFilter","incotermDataList","notifyPartyDataList","hidden","DloadTemplateXLS","backdrop","keyboard","handleWorkspaceChange","ws","Footer","getNewWorkspaceId"],"mappings":"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","file":"static/js/7.638e87ab.chunk.js","sourcesContent":["import React, { useState, useRef, useCallback, useEffect, Fragment } from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\n// import { DatePicker, Space } from 'antd';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport 'react-datepicker/dist/react-datepicker-cssmodules.min.css'\nimport DropdownMultiselect from \"react-multiselect-dropdown-bootstrap\";\nimport { MultiSelect } from \"react-multi-select-component\";\n// import beData from \"../assets/data/IMP-BE2.json\";\nimport moment from 'moment';\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\nimport Axios from '../shared/Axios';\nimport { Field, Formik, Form, FieldArray } from 'formik';\nimport { Button, Modal, FormGroup } from 'react-bootstrap';\nimport * as Yup from \"yup\";\nimport DataTableImport from '../components/DataTableImport';\nimport DataTableExport from '../components/DataTableExport';\nimport AdvanceSearch from '../components/AdvanceSearch';\nimport Swal from 'sweetalert2';\nimport AxiosACT from \"../shared/AxiosACT\";\nimport AxiosMaster from \"../shared/AxiosMaster\";\nimport AxiosUser from \"../shared/AxiosUser\";\nimport Select, { components } from 'react-select';\nimport { DropDownTreeComponent, ColumnsDirective, ColumnDirective, Filter, Sort, Reorder, Inject, ITreeData } from '@syncfusion/ej2-react-dropdowns';\nimport Creatable from 'react-select/creatable';\nimport * as ReactDOM from 'react-dom';\n// import { TagsInput } from \"react-tag-input-component\";\n// import ReactTags from \"react-tag-autocomplete\";\nimport {\n  checkGreaterTimes,\n  checkGreaterStartEndTimes\n} from \"../shared/validationFunctions\";\nimport Draggable from 'react-draggable';\nimport { loaderStart, loaderStop } from \"../store/actions/loader\";\nimport { updateSubscriptionCount, updateDownloadArrayCount, setDloadCountSubuser, setSearchQuery } from \"../store/actions/data\"\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router-dom';\nimport DloadTemplateXLS from '../components/DloadTemplateXLS'\nimport { testJson } from '../shared/JSONString'\nimport LoginCheck from '../shared/LoginCheck';\n\n\nlet initialValues = {\n  tradeType: \"\",\n  searchBy: \"\",\n  searchValue: \"\",\n  countryCode: \"\",\n  fromDate: \"\",\n  toDate: \"\",\n  matchType: \"\",\n  dateRange: \"\",\n  searchFlag: false,\n  queryBuilder: [],\n  SearchQueryCount: 0,\n  isMainSearch: false\n};\n\nlet treeSettings = { autoCheck: true };\n\nconst dateFormat = \"YYYY-MM-DD\";\nconst scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop)\n// const columnOptions = ['Date', 'HSCODE', 'Product Description', 'Value', 'Quantity', 'Unit', 'Port Of Destination', 'Foreign Country', 'Indian Company Name', 'Foreign Company Name']\n\n\n\nlet defaultCountry = []\n\n// -------country list show in modal 26.05.2025----------//\n\n\n\n\n// const CountrySelector = ({ multiTradeCountryList, selectedTradeCountry, setFieldValue, values, setSelectedTradeCountry, setMaxMinDate }) => {\n//   const [showModal, setShowModal] = useState(false);\n//   const [tempSelectedCountries, setTempSelectedCountries] = useState([]);\n\n//   // Synchronize tempSelectedCountries with selectedTradeCountry when it changes\n//   useEffect(() => {\n//     const selectedValues = selectedTradeCountry.map((country) => country.value);\n//     setTempSelectedCountries(selectedValues);\n//   }, [selectedTradeCountry]);\n\n//   const handleCheckboxChange = (shortcode) => {\n//     let updatedTempSelectedCountries;\n\n//     if (tempSelectedCountries.includes(shortcode)) {\n//       // Remove the country if it's already selected\n//       updatedTempSelectedCountries = tempSelectedCountries.filter((code) => code !== shortcode);\n//     } else {\n//       // Add the country if it's not selected\n//       updatedTempSelectedCountries = [...tempSelectedCountries, shortcode];\n//     }\n\n//     // Update the state and form values\n//     setTempSelectedCountries(updatedTempSelectedCountries);\n\n//     const updatedSelectedCountries = multiTradeCountryList.filter((country) =>\n//       updatedTempSelectedCountries.includes(country.value)\n//     );\n\n//     setSelectedTradeCountry(updatedSelectedCountries);\n//     setFieldValue(\"countryCode\", updatedTempSelectedCountries);\n//     setFieldValue(\"fromDate\", \"\");\n//     setFieldValue(\"toDate\", \"\");\n//     setFieldValue(\"dateRange\", \"\");\n//     setMaxMinDate(updatedSelectedCountries, values.tradeType);\n//   };\n\n//   return (\n//     <>\n//       {/* Box displaying selected countries */}\n//       <div\n//         className=\"country-box countryModal\"\n//         onClick={() => setShowModal(true)}\n//         // style={{\n//         //   border: \"1px solid #ccc\",\n//         //   padding: \"10px\",\n//         //   borderRadius: \"5px\",\n//         //   cursor: \"pointer\",\n//         //   minHeight: \"40px\",\n//         //   background: \"white\",\n//         // }}\n//       >\n//         {selectedTradeCountry.length > 0\n//           ? selectedTradeCountry.map((country) => country.label).join(\", \")\n//           : \"Select Countries\"}\n//       </div>\n\n//       {/* Modal for country selection */}\n//       <Modal show={showModal} onHide={() => setShowModal(false)} size=\"lg\">\n//         <Modal.Header closeButton>\n//           <Modal.Title>Select Countries</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <div\n//             className=\"row countryModal_row\"\n//             // style={{\n//             //   maxHeight: \"400px\",\n//             //   overflowY: \"auto\",\n//             //   padding: \"10px\",\n//             // }}\n//           >\n//             {multiTradeCountryList.map((country) => (\n//               <div key={country.value} className=\"col-md-4 mb-3\">\n//                 <div\n//                   className=\"d-flex align-items-center countryModal_data_div\"\n//                   // style={{ fontSize: \"1.1rem\" }}\n//                 >\n//                   <input\n//                     type=\"checkbox\"\n//                     checked={tempSelectedCountries.includes(country.value)}\n//                     onChange={() => handleCheckboxChange(country.value)}\n//                     // style={{ width: \"20px\", height: \"20px\", marginRight: \"10px\",marginBottom:\"10px\" }}\n//                   />\n//                   <label>{country.label}</label>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         </Modal.Body>\n\n//       </Modal>\n//     </>\n//   );\n// };\n\n\nconst CountrySelector = ({ multiTradeCountryList, selectedTradeCountry, setFieldValue, values, setSelectedTradeCountry, setMaxMinDate }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [tempSelectedCountries, setTempSelectedCountries] = useState([]);\n\n  // Synchronize tempSelectedCountries with selectedTradeCountry when it changes\n  useEffect(() => {\n    const selectedValues = selectedTradeCountry.map((country) => country.value);\n    setTempSelectedCountries(selectedValues);\n  }, [selectedTradeCountry]);\n\n  const handleCheckboxChange = (shortcode) => {\n    let updatedTempSelectedCountries;\n\n    if (tempSelectedCountries.includes(shortcode)) {\n      // Remove the country if it's already selected\n      updatedTempSelectedCountries = tempSelectedCountries.filter((code) => code !== shortcode);\n    } else {\n      // Add the country if it's not selected\n      updatedTempSelectedCountries = [...tempSelectedCountries, shortcode];\n    }\n\n    // Update the state and form values\n    setTempSelectedCountries(updatedTempSelectedCountries);\n\n    const updatedSelectedCountries = multiTradeCountryList.filter((country) =>\n      updatedTempSelectedCountries.includes(country.value)\n    );\n\n    setSelectedTradeCountry(updatedSelectedCountries);\n    setFieldValue(\"countryCode\", updatedTempSelectedCountries);\n    setFieldValue(\"fromDate\", \"\");\n    setFieldValue(\"toDate\", \"\");\n    setFieldValue(\"dateRange\", \"\");\n    setMaxMinDate(updatedSelectedCountries, values.tradeType);\n  };\n\n  const handleSelectAll = () => {\n    const allCountryValues = multiTradeCountryList.map((country) => country.value);\n    setTempSelectedCountries(allCountryValues);\n\n    const updatedSelectedCountries = multiTradeCountryList;\n    setSelectedTradeCountry(updatedSelectedCountries);\n    setFieldValue(\"countryCode\", allCountryValues);\n    setFieldValue(\"fromDate\", \"\");\n    setFieldValue(\"toDate\", \"\");\n    setFieldValue(\"dateRange\", \"\");\n    setMaxMinDate(updatedSelectedCountries, values.tradeType);\n  };\n\n  const handleDeselectAll = () => {\n    setTempSelectedCountries([]);\n    setSelectedTradeCountry([]);\n    setFieldValue(\"countryCode\", []);\n    setFieldValue(\"fromDate\", \"\");\n    setFieldValue(\"toDate\", \"\");\n    setFieldValue(\"dateRange\", \"\");\n    setMaxMinDate([], values.tradeType);\n  };\n\n  return (\n    <>\n      {/* Box displaying selected countries */}\n      <div\n        className=\"country-box countryModal\"\n        onClick={() => setShowModal(true)}\n      >\n        {selectedTradeCountry.length > 0\n          ? selectedTradeCountry.map((country) => country.label).join(\", \")\n          : \"Select Countries\"}\n      </div>\n\n      {/* Modal for country selection */}\n      <Modal show={showModal} onHide={() => setShowModal(false)} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Select Countries</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row mb-3\">\n            <div className=\"col-md-6\">\n              <Button variant=\"primary\" onClick={handleSelectAll}>\n                Select All\n              </Button>\n            </div>\n            <div className=\"col-md-6 text-right\">\n              <Button variant=\"secondary\" onClick={handleDeselectAll}>\n                Deselect All\n              </Button>\n            </div>\n          </div>\n          <div\n            className=\"row countryModal_row\">\n            {multiTradeCountryList.map((country) => (\n              <div key={country.value} className=\"col-md-4 mb-3\">\n                <div\n                  className=\"d-flex align-items-center countryModal_data_div\">\n                  <input\n                    type=\"checkbox\"\n                    checked={tempSelectedCountries.includes(country.value)}\n                    onChange={() => handleCheckboxChange(country.value)}\n                  />\n                  <label>{country.label}</label>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\n// -------country list show in modal 26.05.2025----------//\n\n\nconst validateForm = Yup.object().shape({\n  tradeType: Yup.string().required(\"Please select trade type\"),\n  searchBy: Yup.string().required(\"This field is required\"),\n  matchType: Yup.string().required(\"This field is required\"),\n  dateRange: Yup.string().required(\"This field is required\"),\n\n  //   searchValue: Yup.mixed().when(['searchBy'], {\n  //     is: (searchBy) => (searchBy == 'HS_CODE'),\n  //     then: Yup.array().of(Yup.string()\n  //     .matches(/^[0-9]*$/, function() {\n  //       return \"Enter valid number\"\n  //     }))\n  //     .required('Required'),\n  //     otherwise: Yup.array().of(Yup.string().matches(/^[A-Za-z0-9-_\\s]*$/, function() {\n  //       return \"Enter valid input\"\n  //     })).required('Required')\n  // }),\n  // countryCode: Yup.array().of(Yup.string().required(\"This field is required\")),    \n  fromDate: Yup.date().required(\"This field is required\")\n    .test(\n      \"checkGreaterStartEndTimes\",\n      \"From date should be less than To date\",\n      function (value) {\n        if (value) {\n          return checkGreaterStartEndTimes(value, this.parent.toDate);\n        }\n        return true;\n      }\n    ),\n  toDate: Yup.date().required(\"This field is required\")\n    .test(\n      \"checkGreaterStartEndTimes\",\n      \"To date should be greater than From date\",\n      function (value) {\n        if (value) {\n          return checkGreaterStartEndTimes(this.parent.fromDate, value);\n        }\n        return true;\n      }\n    )\n    .test(\n      \"checkGreaterTimes\",\n      \"To date should be less than 3 years\",\n      function (value) {\n        if (value) {\n          return checkGreaterTimes(this.parent.fromDate, value);\n        }\n        return true;\n      }\n    ),\n});\n\nconst tempOptions = [\n  { label: \"Option 1\", value: \"1\" },\n  { label: \"Option 2\", value: \"2\" },\n  { label: \"Option 3\", value: \"3\" },\n];\n\n\nconst List = (props) => {\n\n  const userId = localStorage.getItem(\"userToken\");\n  const user = localStorage.getItem(\"user\");\n  const loggedUser = user ? JSON.parse(user) : {};\n  const userName = `${loggedUser.firstname} ${loggedUser.lastname}`;\n  const userEmail = loggedUser.email;\n  const userId_new = loggedUser.uplineId > 0 ? loggedUser.uplineId : loggedUser.userid\n\n  const history = useHistory();\n  const search_id = props.location.state ? props.location.state.search_id : null;\n\n  // console.log(\"props ==== \", props)\n  const searchTypeValue = props.location.state && props.location.state.search_type ? props.location.state.search_type : \"\";\n  const workspace_id = props.location.state && props.location.state.workspace_id ? props.location.state.workspace_id : \"\";\n  const workspace_name = props.location.state ? props.location.state.workspace_name : \"\";\n  const workspace_desc = props.location.state ? props.location.state.workspace_desc : \"\";\n  const workspaceId = props.location.state ? props.location.state.workspaceId : \"\";\n  const newSearch = [{ \"value\": props && props.location.state && props.location.state.searchValue, \"label\": props && props.location.state && props.location.state.searchValue }];\n\n\n  const gridRef = useRef();\n\n  const [toggle, setToggle] = useState(false);\n  const [searchResult, setSearchResult] = useState([]);\n  const [limit, setLimit] = useState(20);\n  const [page, setPage] = useState(1);\n  const [totalRecord, setTotalRecord] = useState(0);\n  const [searchLoading, setSearchLoading] = useState(false);\n  const [searchParams, setSearchParams] = useState(initialValues.searchValue);\n  const [importerList, setImporterList] = useState([]);\n  const [importerDataList, setImporterDataList] = useState([]);\n  const [exporterList, setExporterList] = useState([]);\n  const [exporterDataList, setExporterDataList] = useState([]);\n  const [portOriginList, setPortOriginList] = useState([]);\n  const [portOriginDataList, setPortOriginDataList] = useState([]);\n  const [portDestinationDataList, setPortDestinationDataList] = useState([]);\n  const [portDestinationList, setPortDestinationList] = useState([]);\n  const [countryOriginList, setCountryOriginList] = useState([]);\n  const [countryDestinationList, setCountryDestinationList] = useState([]);\n  const [hsCodeList, setHsCodeList] = useState([]);\n  const [hsCodeDataList, setHsCodeDataList] = useState([]);\n  const [cityOriginList, setCityOriginList] = useState([]);\n  const [cityDestinationList, setCityDestinationList] = useState([]);\n  const [searchId, setSearchId] = useState();\n  const [orderByColumn, setOrderByColumn] = useState(\"\");\n  const [orderByMode, setOrderByMode] = useState(\"desc\");\n  const [hscodeLoading, isHscodeLoading] = useState(false);\n  const [portDestLoading, isPortDestLoading] = useState(false);\n  const [coLoading, isCoLoading] = useState(false);\n  const [importerLoading, isImporterLoading] = useState(false);\n  const [exporterLoading, isExporterLoading] = useState(false);\n  const [totalRecordLoading, isTotalRecordLoading] = useState(false);\n\n  const [shipmentModeDataList, setShipmentModeDataList] = useState([]);\n  const [shipmentModeList, setShipmentModeList] = useState([]);\n  const [hsCode4DigitList, setHsCode4digitList] = useState([])\n  const [hsCode4digitDataList, setHsCode4digitDataList] = useState([])\n  const [filteredColumn, setFilteredColumn] = useState([])\n  const [suggestions, setSuggestions] = useState([])\n  const [queryBuilderSuggestions, setQueryBuilderSuggestions] = useState([])\n  const [isDownloaded, setIsDownloaded] = useState(\"\");\n  const [noDataErrorMsg, setNoDataErrorMsg] = useState(false);\n  const [isSearchClicked, setIsSearchClicked] = useState(true);\n  const [previousTotalRecordCount, setPreviousTotalRecordCount] = useState(0);\n  const [stdUnitDataList, setStdUnitDataList] = useState([]);\n  const [stdUnitList, setStdUnitList] = useState([]);\n  const [countryCode, setCountryCode] = useState(\"\");\n  const [importerForExport, setImporterForExport] = useState(\"\");\n  const [exporterForImport, setExporterForImport] = useState(\"\");\n  const [returnSearchId, setReturnSearchId] = useState([]);\n\n  const [consumptionType, setConsumptionType] = useState([]);\n  const [consumptionTypeDataList, setConsumptionTypeDataList] = useState([]);\n  const [incotermList, setIncotermList] = useState([]);\n  const [incotermListData, setIncotermListData] = useState([]);\n  const [notifyPartyList, setNotifyPartyList] = useState([]);\n  const [notifyPartyListData, setNotifyPartyListData] = useState([]);\n  // const [fieldArray , setFieldArray] = useState([])\n\n\n\n  const sTitleRef = useRef();\n  const sDescRef = useRef();\n  const workspaceRef = useRef();\n  const sWorkspaceRef = useRef();\n  const [showModal, setShowModal] = useState(false);\n  const [tradeType, setTradeType] = useState(\"\");\n  const [sTitleError, isSTitleError] = useState(\"\");\n  const [sDescError, isSDescError] = useState(\"\");\n  const [sNewWsError, isNewWsError] = useState(\"\");\n  const [wsError, isWsError] = useState(\"\");\n  const [workspaceList, setWorkspaceList] = useState([]);\n  const [tradeCountryList, setTradeCountryList] = useState([]);\n  const [multiTradeCountryList, setMultiTradeCountryList] = useState([]);\n  const [selectedTradeCountry, setSelectedTradeCountry] = useState([])\n  const [searchValue, setSearchValue] = useState([]);\n  const [queryBuilderSearchValue, setQueryBuilderSearchValue] = useState([]);\n  const [showNewWorkspaceInput, setshowNewWorkspaceInput] = useState(false);\n  const [minDate, setMinDate] = useState(new Date());\n  const [maxDate, setMaxDate] = useState(new Date());\n  const [filteredArray, setFilteredArray] = useState([]);\n  const [countryWeightage, setCountryWeightage] = useState(1);\n\n  /* For country filter array after search */\n  const [filterCountryList, setFilterCountryList] = useState([]);\n  const [selectedFilterCountryList, setSelectedFilterCountryList] = useState([]);\n\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n    isSTitleError(\"\");\n    isSDescError(\"\");\n    isNewWsError(\"\");\n    isWsError(\"\")\n  }\n\n\n\n  const UpdateSubscription = (params) => {\n\n    AxiosUser({\n      method: \"PUT\",\n      url: `user-management/user-subscription/update/${props.subscriptionId}`,\n      data: JSON.stringify(params),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"user\", res.data);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n      });\n\n  }\n\n  useEffect(() => {\n    LoginCheck(history)\n  }, [props.loading, searchValue, workspaceList, searchLoading])\n\n  const UpdateUser = (params) => {\n\n    AxiosUser({\n      method: \"PUT\",\n      url: `user-management/user/${userId}`,\n      data: JSON.stringify(params),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"user\", res.data);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n      });\n\n  }\n\n  const UpdateDownloadTracher = (prevDownloadArray) => {\n\n    let DownloadArray = props.downloadArray\n\n    const params = {\n      \"userId\": userId_new,\n      \"downloadedRecords\": prevDownloadArray\n    }\n\n    AxiosACT({\n      method: \"POST\",\n      url: \"/activity-management/download-tracker/update\",\n      data: JSON.stringify(params),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"user\", res.data);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n      });\n\n  }\n\n  const setWorkspace = (val) => {\n    if (props.totalWorkspace > 0) {\n      Swal.fire({\n        title: 'Create Workspace !',\n        text: `Available Limit ${props.totalWorkspace}. \\n Are you sure you want to Create New Workspace ?`,\n        icon: 'warning',\n        dangerMode: true,\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n      }).then((isConfirm) => {\n        if (isConfirm.value) {\n          setShowModal(val)\n        }\n      })\n    }\n    else {\n      Swal.fire({\n        title: 'Create Workspace !',\n        text: \"Your Workspace Limit Exhausted\",\n        icon: 'error',\n        dangerMode: true,\n        confirmButtonColor: '#3085d6',\n      }).then((isConfirm) => { })\n    }\n  }\n\n\n  const saveQuery = () => {\n    const postData = {\n      \"workspace_id\": workspace_id,\n      \"search_id\": searchId,\n      \"name\": workspace_name,\n      \"description\": workspace_desc,\n      \"is_active\": \"Y\",\n      \"id\": workspaceId\n    }\n    AxiosACT({\n      method: \"POST\",\n      url: `/activity-management/workspace/savesearch`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        Swal.fire({\n          title: 'Success',\n          text: \"Search query saved successfully\",\n          icon: 'success',\n        })\n      })\n      .catch(err => {\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n        if (err.data.errorMsg) {\n          errorMsg = err.data.errorMsg;\n        }\n        Swal.fire({\n          title: 'Oops!',\n          text: errorMsg,\n          icon: 'error',\n        })\n      });\n  }\n\n  const handleWorkspaceChange = (e) => {\n    if (e.target.value == \"newWorkspace\") {\n      setshowNewWorkspaceInput(true)\n    }\n    else setshowNewWorkspaceInput(false)\n  }\n\n  useEffect(() => {\n    return () => {\n      initialValues = {}\n    }\n  }, [])\n\n  useEffect(() => {\n\n    if (searchParams && searchParams.tradeType) {\n      getPaginationSearchData(searchParams);\n    }\n    if (props && props.location.state && props.location.state.searchValue) {\n      setSearchValue(newSearch)\n    };\n\n    initialValues = {\n      ...initialValues,\n      tradeType: props && props.location.state && props.location.state.tradeType ? props.location.state.tradeType : \"\",\n      matchType: \"\",\n      searchBy: props && props.location.state && props.location.state.searchType ? props.location.state.searchType : \"\",\n      searchValue: props && props.location.state && props.location.state.searchType,\n      countryCode: props && props.location.state && props.location.state.countryCode,\n      fromDate: \"\",\n      toDate: \"\",\n      dateRange: \"\",\n      queryBuilder: []\n    };\n    if (props && props.location.state && props.location.state.tradeType) {\n      getTradingCountryList(props && props.location.state && props.location.state.tradeType == \"IMPORT\" ? \"I\" : \"E\")\n    }\n\n  }, [page, limit, orderByColumn, orderByMode])\n\n\n  const handleChangeLimit = dataKey => {\n    setPage(1);\n    setLimit(dataKey);\n  };\n\n\n\n  const mainSearch = (values) => {\n\n    console.log(\"values.searchValue >>>>>>>>>>>>>>>>>>>>>>>\", values.searchValue)\n    console.log(\"values >>>>>>>>>>>>>>>>>>>>>>>\", values)\n\n    if (values.searchValue && values.searchValue.length > 0) {\n      setIsSearchClicked(true)\n      setPortOriginList([])\n      setPortDestinationList([])\n      setHsCodeList([])\n      setHsCode4digitList([])\n      setImporterList([])\n      setExporterList([])\n      setCityOriginList([])\n      setCityDestinationList([])\n      setShipmentModeList([])\n      setStdUnitList([])\n      values.isMainSearch = true\n      // console.log(\"Submit values ==== \", values)\n      let checkValidErr = false\n      let errMsg = \"\"\n      if (values.searchBy == \"HS_CODE\") {\n        values.searchValue.map((item, index) => {\n          if (item.length < 2) {\n            checkValidErr = true\n            errMsg = \"Search Values should be greater than or equal to 2 digits\"\n          }\n        })\n      }\n      else {\n        values.searchValue.map((item, index) => {\n          if (item.length < 2) {\n            checkValidErr = true\n            errMsg = \"Search Values should be greater than or equal to 2 digits\"\n          }\n        })\n      }\n\n      if (values.queryBuilder.length > 0) {\n        values.queryBuilder.map((item, index) => {\n          if (item.searchBy == \"HS_CODE\") {\n            item.searchValue.length > 0 && item.searchValue.map((subitem, index) => {\n              if (subitem.length < 4) {\n                checkValidErr = true\n                errMsg = \"Search Values should be greater than or equal to 4 digits\"\n              }\n            })\n          }\n          else {\n            item.searchValue.length > 0 && item.searchValue.map((subitem, index) => {\n              if (subitem.length < 2) {\n                checkValidErr = true\n                errMsg = \"Search Values should be greater than or equal to 2 digits\"\n              }\n            })\n          }\n        })\n      }\n\n      if (checkValidErr == true) {\n        Swal.fire({\n          title: 'Alert !',\n          text: errMsg,\n          icon: 'error',\n          dangerMode: true,\n          confirmButtonColor: '#3085d6',\n        })\n      }\n      else {\n        props.loadingStart()\n        handleSearch(values)\n      }\n\n    }\n    else {\n      Swal.fire({\n        title: 'Alert !',\n        text: \"Enter Search Values\",\n        icon: 'error',\n        dangerMode: true,\n        confirmButtonColor: '#3085d6',\n      })\n    }\n\n  }\n\n  const handleSearch = (values, countryList = [], searchType = \"TRADE\") => {\n    setIsDownloaded(\"N\")\n\n    props.loadingStart()\n    var params = [];\n    params[\"searchType\"] = searchType;\n    params[\"tradeType\"] = values.tradeType;\n    params[\"searchBy\"] = values.searchBy;\n    params[\"searchValue\"] = values.searchValue;\n    params[\"countryCode\"] = values.countryCode;;\n    params[\"fromDate\"] = moment(values.fromDate).format(\"YYYY-MM-DD\");\n    params[\"toDate\"] = moment(values.toDate).format(\"YYYY-MM-DD\");\n    params[\"matchType\"] = values.matchType;\n    params[\"searchFlag\"] = values.searchFlag;\n    params[\"queryBuilder\"] = values.queryBuilder\n\n    if (values.portOriginList) {\n      setPortOriginList(values.portOriginList);\n      params[\"portOriginList\"] = values.portOriginList;\n    }\n    if (values.portDestinationList) {\n      setPortDestinationList(values.portDestinationList);\n      params[\"portDestinationList\"] = values.portDestinationList;\n    }\n    if (values.hsCodeList) {\n      setHsCodeList(values.hsCodeList);\n      params[\"hsCodeList\"] = values.hsCodeList;\n    }\n    if (values.hsCode4DigitList) {\n      setHsCode4digitList(values.hsCode4DigitList);\n      params[\"hsCode4DigitList\"] = values.hsCode4DigitList;\n    }\n    if (values.importerList) {\n      setImporterList(values.importerList);\n      params[\"importerList\"] = values.importerList;\n    }\n    if (values.exporterList) {\n      setExporterList(values.exporterList);\n      params[\"exporterList\"] = values.exporterList;\n    }\n    if (values.cityOriginList) {\n      setCityOriginList(values.cityOriginList);\n      params[\"cityOriginList\"] = values.cityOriginList;\n    }\n    if (values.cityDestinationList) {\n      setCityDestinationList(values.cityDestinationList);\n      params[\"cityDestinationList\"] = values.cityDestinationList;\n    }\n    if (values.shipmentModeList) {\n      setShipmentModeList(values.shipmentModeList);\n      params[\"shipmentModeList\"] = values.shipmentModeList;\n    }\n    if (values.stdUnitList) {\n      setStdUnitList(values.stdUnitList);\n      params[\"stdUnitList\"] = values.stdUnitList;\n    }\n\n    /* code add start on 23-04-2025 */\n\n    if (values.minQuantity) {\n      params[\"rangeQuantityStart\"] = values.minQuantity;\n    }\n    if (values.maxQuantity) {\n      params[\"rangeQuantityEnd\"] = values.maxQuantity;\n    }\n    if (values.minValue) {\n      params[\"rangeValueUsdStart\"] = values.minValue;\n    }\n    if (values.maxValue) {\n      params[\"rangeValueUsdEnd\"] = values.maxValue;\n    }\n    if (values.minUnitPrice) {\n      params[\"rangeUnitPriceUsdStart\"] = values.minUnitPrice;\n    }\n    if (values.maxUnitPrice) {\n      params[\"rangeUnitPriceUsdEnd\"] = values.maxUnitPrice;\n    }\n    if (values.consumptionTypeList) {\n      setConsumptionType(values.consumptionTypeList);\n      params[\"consumptionType\"] = values.consumptionTypeList;\n    }\n    if (values.incotermList) {\n      setIncotermList(values.incotermList);\n      params[\"incoterm\"] = values.incotermList;\n    }\n    if (values.notifyPartyList) {\n      setNotifyPartyList(values.notifyPartyList);\n      params[\"notifyParty\"] = values.notifyPartyList;\n    }\n    if (values.descriptionList) {\n      params[\"conditionProductDesc\"] = values.conditionProductDescription;\n      params[\"productDesc\"] = values.descriptionList;\n    }\n\n    /* code end on 23-04-2025 */\n\n    params[\"isMainSearch\"] = values.isMainSearch;\n\n    setSearchParams(params);\n    let lp = {\n      \"tradeType\": values.tradeType, \"searchBy\": values.searchBy, \"searchValue\": values.searchValue, \"countryCode\": values.countryCode,\n      \"fromDate\": moment(values.fromDate).format(\"YYYY-MM-DD\"), \"toDate\": moment(values.toDate).format(\"YYYY-MM-DD\"), \"matchType\": values.matchType\n    }\n    localStorage.setItem(\"searchParam\", JSON.stringify(lp));\n\n    if (searchId != \"\") {\n      setFilteredColumn([])\n      getSearchData(params, countryList);\n\n      // commented 05.04.2024\n\n      // getImporterList(params);\n      // getExporterList(params);\n      // getPortOriginList(params);\n      // getPortDestinationList(params);\n      // getHSCodeList(params);\n      // getIndianCityList(params);\n      // getForeignCountryList(params);\n      // getHSCode4digitList(params);\n      // getShipmentModeList(params);\n      // getStdUnitList(params);\n    }\n    else {\n      if (props.queryPerDay > 0) {\n        getSearchData(params);\n\n        // commented 05.04.2024\n\n        // getImporterList(params);\n        // getExporterList(params);\n        // getPortOriginList(params);\n        // getPortDestinationList(params);\n        // getHSCodeList(params);\n        // getIndianCityList(params);\n        // getForeignCountryList(params);\n        // getHSCode4digitList(params);\n        // getShipmentModeList(params);\n        // getStdUnitList(params);\n      }\n      else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n        props.loadingStop()\n        Swal.fire({\n          title: 'Search !',\n          text: \"Your Search Limit Exhausted\",\n          icon: 'error',\n          dangerMode: true,\n          confirmButtonColor: '#3085d6',\n        }).then((isConfirm) => {\n          // getImporterList(params);\n          // getExporterList(params);\n          // getPortOriginList(params);\n          // getPortDestinationList(params);\n          // getHSCodeList(params);\n          // getIndianCityList(params);\n          // getForeignCountryList(params);\n          // getHSCode4digitList(params);\n          // getShipmentModeList(params);\n        })\n      }\n    }\n\n  }\n\n\n  const resetSearch = (setFieldValue, values) => {\n    setSearchParams([]);\n    setSearchResult([]);\n    setSearchValue([]);\n    setQueryBuilderSearchValue([])\n    setFieldValue(\"fromDate\", \"\")\n    setFieldValue(\"toDate\", \"\")\n    setFieldValue(\"searchValue\", []);\n    setFieldValue(\"countryCode\", \"\");\n    setFieldValue(\"matchType\", \"\");\n    setFieldValue(\"searchBy\", \"\");\n    setFieldValue(\"tradeType\", \"\");\n    setFieldValue(\"dateRange\", \"\");\n    setFilteredColumn([]);\n    setTotalRecord(0);\n    values.tradeType = \"\"\n    values.searchBy = \"\"\n    values.matchType = \"\"\n    values.countryCode = \"\"\n    values.searchValue = \"\"\n    values.toDate = \"\"\n    values.fromDate = \"\"\n    values.dateRange = \"\"\n\n    setImporterDataList([]);\n    setExporterDataList([]);\n    setPortOriginDataList([]);\n    setPortDestinationDataList([]);\n    setHsCodeDataList([]);\n    setHsCode4digitDataList([]);\n    setCountryOriginList([]);\n    setCountryDestinationList([]);\n    setShipmentModeDataList([]);\n    setStdUnitDataList([]);\n\n    localStorage.removeItem(\"searchParam\");\n    setSearchId(\"\");\n    setCountryCode(\"\")\n    console.log(\"values === \", values)\n    //  window.resetFilter()\n  }\n\n\n  const exportToCSV = () => {\n    if (totalRecord * countryWeightage <= props.maxDownload) {\n      if (searchParams && searchParams.tradeType) {\n        const postData = {\n          \"searchType\": \"TRADE\",\n          \"tradeType\": searchParams.tradeType,\n          \"fromDate\": searchParams.fromDate,\n          \"toDate\": searchParams.toDate,\n          \"searchBy\": searchParams.searchBy,\n          \"searchValue\": searchParams.searchValue,\n          \"countryCode\": searchParams.countryCode,\n          \"pageNumber\": 0,\n          \"numberOfRecords\": Math.round(props.maxDownload / countryWeightage),\n          \"searchId\": \"\",\n          \"hsCodeList\": hsCodeList,\n          \"exporterList\": exporterList,\n          \"importerList\": importerList,\n          \"cityOriginList\": cityOriginList,\n          \"cityDestinationList\": cityDestinationList,\n          \"portOriginList\": portOriginList,\n          \"portDestinationList\": portDestinationList,\n          \"orderByColumn\": orderByColumn,\n          \"orderByMode\": orderByMode,\n          \"matchType\": searchParams.matchType,\n          \"hsCode4DigitList\": hsCode4DigitList,\n          \"queryBuilder\": searchParams.queryBuilder,\n          \"shipModeList\": shipmentModeList,\n          \"stdUnitList\": stdUnitList\n\n        }\n        Axios({\n          method: \"POST\",\n          url: `search-management/search`,\n          data: JSON.stringify(postData),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        })\n          .then(res => {\n            let exportDataSet = [];\n            // if (searchParams.tradeType.toLowerCase() === \"export\" && searchParams.countryCode.toUpperCase() != \"IND\" && searchParams.countryCode.toUpperCase() != \"SEZ\") {\n            //   exportDataSet = res.data.expForeignList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"export\" && searchParams.countryCode.toUpperCase() === \"IND\") {\n            //   exportDataSet = res.data.expIndList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"import\" && searchParams.countryCode.toUpperCase() != \"IND\" && searchParams.countryCode.toUpperCase() != \"SEZ\") {\n            //   exportDataSet = res.data.impForeignList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"import\" && searchParams.countryCode.toUpperCase() === \"IND\") {\n            //   exportDataSet = res.data.impIndList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"import\" && searchParams.countryCode.toUpperCase() === \"SEZ\") {\n            //   exportDataSet = res.data.impIndList\n            // }\n            // else if (searchParams.tradeType.toLowerCase() === \"export\" && searchParams.countryCode.toUpperCase() === \"SEZ\") {\n            //   exportDataSet = res.data.expIndList\n            // }\n            const countryCodes = searchParams.countryCode.map(code => code.toUpperCase());\n            const isIND = countryCodes.includes(\"IND\");\n            const isSEZ = countryCodes.includes(\"SEZ\");\n            const isForeign = !isIND && !isSEZ;\n\n            const tempTradeType = searchParams.tradeType.toLowerCase();\n\n            // if (tempTradeType === \"export\" && isForeign) {\n            //   exportDataSet = res.data.expForeignList;\n            // } else if (tempTradeType === \"export\" && isIND) {\n            //   exportDataSet = res.data.expIndList;\n            // } else if (tempTradeType === \"export\" && isSEZ) {\n            //   exportDataSet = res.data.expIndList;\n            // } else if (tempTradeType === \"import\" && isForeign) {\n            //   exportDataSet = res.data.impForeignList;\n            // } else if (tempTradeType === \"import\" && isIND) {\n            //   exportDataSet = res.data.impIndList;\n            // } else if (tempTradeType === \"import\" && isSEZ) {\n            //   exportDataSet = res.data.impIndList;\n            // }\n            // else {\n            //   exportDataSet = []\n            // }\n\n            /* change on 24-04-2025 */\n            if (tempTradeType === \"export\") {\n              exportDataSet = res.data.expForeignList;\n            } else if (tempTradeType === \"import\") {\n              exportDataSet = res.data.impForeignList;\n            } else {\n              exportDataSet = []\n            }\n            /* change on 24-04-2025 */\n\n            let filteredArray = []\n            const d = new Date();\n            for (let i = 0; i < exportDataSet.length; i++) {\n              let filtered = {};\n              let obj = exportDataSet[i];\n              // if(testJson.includes(obj[\"id\"])){\n              for (let key in obj) {\n                if (typeof (obj[key] == \"object\")) {\n                  let item = obj[key];\n                  if (item != null) {\n                    filtered[key] = obj[key];\n                  }\n                }\n              }\n              // }\n              // else{ console.log(\"Download values Not found ========= \", obj[\"id\"])}\n\n              filteredArray.push(filtered);\n            }\n            setFilteredArray(filteredArray)\n            // setTimeout(downloadXLS(searchParams,totalRecord,1), 5000)\n            downloadXLS(searchParams, 1, filteredArray)\n\n\n          })\n          .catch(err => {\n            console.log(\"Err == \", err);\n            setSearchLoading(false);\n          });\n      } else {\n        Swal.fire({\n          title: 'Alert!',\n          text: 'Please Search data first, then export',\n          icon: 'error',\n          confirmButtonText: 'OK'\n        })\n      }\n    }\n    else {\n      Swal.fire({\n        title: 'Alert!',\n        text: `You cannot download more than ${Math.round(props.maxDownload / countryWeightage)} records in a single search. Please refine your search criteria.`,\n        icon: 'error',\n        confirmButtonText: 'OK'\n      })\n    }\n  };\n\n  const exportSelectedToCSV = (checkedRowID) => {\n    let remainingDload = props.download_count - checkedRowID.length\n    let exportDataSet = [];\n    let filteredArray = []\n\n    searchResult.map((item, index) => {\n      checkedRowID.map((subItem, subIndex) => {\n        if (item.id == subItem) {\n          exportDataSet.push(item)\n        }\n      })\n    })\n\n    for (let i = 0; i < exportDataSet.length; i++) {\n      let filtered = {};\n      let obj = exportDataSet[i];\n      for (let key in obj) {\n        if (typeof (obj[key] == \"object\")) {\n          let item = obj[key];\n          if (item != null) {\n            filtered[key] = obj[key];\n          }\n        }\n      }\n      filteredArray.push(filtered);\n    }\n    setFilteredArray(filteredArray)\n    downloadXLS(searchParams, 2, filteredArray)\n\n  };\n\n  const downloadXLS = (searchParams, dloadType, filteredArray) => {\n\n    // console.log(\"Search Id >>> \", searchId)\n\n    let prevDownloadArray = []\n    let newIDArray = []\n    let newValueArray = []; /* add on 12-05-2025 */\n    prevDownloadArray = JSON.parse(JSON.stringify(props.downloadArray));\n    console.log(\"prevDownloadArray >>>>>>>>>>\", prevDownloadArray);\n\n\n    for (let i = 0; i < filteredArray.length; i++) {\n\n      let obj = filteredArray[i];\n      if (!prevDownloadArray.includes(obj[\"id\"])) {\n        newIDArray.push(obj[\"id\"]);\n        prevDownloadArray.push(obj[\"id\"]);\n        newValueArray.push(obj); /* add on 12-05-2025 */\n      }\n      else { console.log(\"Download values found ========= \", obj[\"id\"]) }\n    }\n\n    const totalNewWeightage = newValueArray.reduce((total, item) => {\n      const match1 = multiTradeCountryList.find(country => country.value === item.ctry_code);\n      return match1 ? total + match1.weightagePoints : total;\n    }, 0);\n\n    const totalFilteredWeightage = filteredArray.reduce((total, item) => {\n      const match = multiTradeCountryList.find(country => country.value === item.ctry_code);\n      return match ? total + match.weightagePoints : total;\n    }, 0);\n\n    // console.log(\">>> totalNewWeightage >>>\", totalNewWeightage);\n    // console.log(\">>> totalFilteredWeightage >>>\", totalFilteredWeightage)\n\n    // let remainingDload = props.download_count - newIDArray.length * countryWeightage\n    // let remainingDload_subUser = props.download_count_subUser - filteredArray.length * countryWeightage\n    let remainingDload = props.download_count - totalNewWeightage;\n    let remainingDload_subUser = props.download_count_subUser - totalFilteredWeightage;\n    // console.log(\"remainingDload ======= \", remainingDload);\n\n    /* Save Download log into database (19-05-2025) --start*/\n    const countryWeightageSummary = [];\n\n    multiTradeCountryList.forEach((country) => {\n      const countryCode = country.value;\n      const countryName = country.label;\n      const weightagePoints = country.weightagePoints;\n\n      const countryData = filteredArray.filter(item => item.ctry_code === countryCode);\n      const totalCount = countryData.length;\n      const totalWeightage = totalCount * weightagePoints;\n\n      if (totalCount > 0) {\n        countryWeightageSummary.push({\n          countryName,\n          weightagePoints,\n          totalCount,\n          totalWeightage\n        });\n      }\n    });\n\n    // console.log(\"countryWeightageSummary>>> \", countryWeightageSummary);\n    /* Save Download log into database (19-05-2025) --End*/\n\n    if (remainingDload > 0) {\n      if ((loggedUser.uplineId > 0 && remainingDload_subUser > 0) || (loggedUser.uplineId == 0)) {\n        Swal.fire({\n          title: 'Download!',\n          html: `Available Download <b>${loggedUser.uplineId > 0 ? props.download_count_subUser : props.download_count}</b>. <br> Total Record to Download <b>${loggedUser.uplineId > 0 ? filteredArray.length : newIDArray.length}</b>. \n        <br> Total Points to deduct <b>${loggedUser.uplineId > 0 ? totalFilteredWeightage : totalNewWeightage}</b>.<br> Remaining Download <b>${loggedUser.uplineId > 0 ? remainingDload_subUser : remainingDload}</b>. <br> Are you sure you want to Download ?`,\n          icon: 'warning',\n          dangerMode: true,\n          showCancelButton: true,\n          confirmButtonColor: '#3085d6',\n          cancelButtonColor: '#d33',\n        }).then((isConfirm) => {\n          if (isConfirm.value) {\n\n            const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n            const fileExtension = \".xlsx\";\n            const fileName = searchParams.tradeType + \"_\" + searchParams.countryCode + \"_\" + searchParams.fromDate + \"_\" + searchParams.toDate;\n            // const ws = XLSX.utils.json_to_sheet(filteredArray);\n\n            const ws = XLSX.utils.table_to_sheet(document.getElementById(\"reportXLS\"), { header: 1 });\n\n            const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n            const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n            const data = new Blob([excelBuffer], { type: fileType });\n            FileSaver.saveAs(data, fileName + fileExtension);\n            setSearchLoading(false);\n\n            /* Save API Download log into database (19-05-2025) --Start*/\n            let saveLogPayload = {\n              \"searchId\": searchId,\n              \"downloadJson\": JSON.stringify(countryWeightageSummary),\n              \"recordsDownloaded\": loggedUser.uplineId > 0 ? filteredArray.length : newIDArray.length,\n              \"initialCredit\": loggedUser.uplineId > 0 ? props.download_count_subUser : props.download_count,\n              \"remainingCredit\": loggedUser.uplineId > 0 ? remainingDload_subUser : remainingDload\n            }\n            saveDownloadLog(saveLogPayload);\n            /* Save API Download log into database (19-05-2025) --End*/\n\n            loggedUser.uplineId > 0 ?\n              props.setDloadCountSubuser({ download_count_subUser: remainingDload_subUser }) :\n              props.updateSubscriptionCount({\n                download_count: remainingDload,\n                subscriptionId: props.subscriptionId,\n                dataAccess_count: props.dataAccess_count,\n                subUserCount: props.subUserCount,\n                totalWorkspace: props.totalWorkspace,\n                queryPerDay: props.queryPerDay\n              })\n\n            if (newIDArray.length > 0) {\n              props.updateDownloadArrayCount(\n                {\n                  downloadArray: prevDownloadArray\n                })\n            }\n\n            UpdateSubscription({ \"downloadLimit\": remainingDload })\n            if (loggedUser.uplineId > 0) {\n              UpdateUser({ \"downloadLimit\": remainingDload_subUser })\n            }\n            UpdateDownloadTracher(prevDownloadArray)\n            downloadSearch(searchId, filteredArray.length)\n          }\n\n        })\n      }\n      else {\n        Swal.fire({\n          title: 'Download!',\n          text: \"Your Download Limit Exhausted\",\n          icon: 'error',\n          dangerMode: true,\n          confirmButtonColor: '#3085d6',\n        }).then((isConfirm) => { })\n      }\n    }\n    else {\n      Swal.fire({\n        title: 'Download!',\n        text: \"Your Download Limit Exhausted\",\n        icon: 'error',\n        dangerMode: true,\n        confirmButtonColor: '#3085d6',\n      }).then((isConfirm) => { })\n    }\n\n\n  }\n\n  const saveDownloadLog = (params) => {\n    // console.log(\"Download Log request params ---------- \", params)\n    AxiosUser({\n      method: \"PUT\",\n      url: `download-log/save`,\n      data: JSON.stringify(params),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"Download log res >>>\", res.data);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n      });\n  }\n\n  const getSearchData = (params, countryList = []) => {\n    console.log(\"params ---------- \", params)\n    scrollToRef(gridRef);\n    setSearchLoading(true);\n    isTotalRecordLoading(true)\n    // let updatedCountryList = tradeCountryList && tradeCountryList.length == 0 ? countryList : tradeCountryList\n    // let selectedCountry = updatedCountryList.filter((item) => item.shortcode ==  (countryCode ? countryCode : params.countryCode))\n    //  console.log(\"params ======= \", countryCode)\n\n    params[\"tradeType\"] == \"E\" || params[\"tradeType\"] == \"EXPORT\" ? setCountryWeightage(1) : setCountryWeightage(1)\n\n    let tempSearchResult = []\n    // \"searchId\": searchId,\n    const postData = {\n      \"searchType\": params.searchType,\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      //\"pageNumber\": page - 1,\n      \"pageNumber\": 0,\n      \"numberOfRecords\": limit,\n      \"hsCodeList\": params.hsCodeList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"orderByColumn\": orderByColumn,\n      \"orderByMode\": orderByMode,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"matchType\": params.matchType,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n\n    }\n    console.log(\"params.returnSearchId === \", workspace_id)\n    if (params.returnSearchId) {\n      postData[\"searchId\"] = params.returnSearchId\n    }\n    if (search_id && (workspace_id == undefined || workspace_id == \"\")) {\n      if (!params.isMainSearch) {\n        postData[\"searchId\"] = search_id\n      }\n    }\n\n    Axios({\n      method: \"POST\",\n      url: `search-management/search`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(async (res) => {\n        props.setSearchQuery(postData);\n        // if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() != \"IND\" && params.countryCode.toUpperCase() != \"SEZ\") {\n        //   tempSearchResult = res.data.expForeignList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() === \"IND\") {\n        //   tempSearchResult = res.data.expIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() != \"IND\" && params.countryCode.toUpperCase() != \"SEZ\") {\n        //   tempSearchResult = res.data.impForeignList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() === \"IND\") {\n        //   tempSearchResult = res.data.impIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() === \"SEZ\") {\n        //   tempSearchResult = res.data.expIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() === \"SEZ\") {\n        //   tempSearchResult = res.data.impIndList\n        // }\n        const countryCodes = params.countryCode.map(code => code.toUpperCase());\n        const isIND = countryCodes.includes(\"IND\");\n        const isSEZ = countryCodes.includes(\"SEZ\");\n        const isForeign = !isIND && !isSEZ;\n\n        const tempTradeType = params.tradeType.toLowerCase();\n\n        // if (tempTradeType === \"export\" && isForeign) {\n        //   tempSearchResult = res.data.expForeignList;\n        // } else if (tempTradeType === \"export\" && isIND) {\n        //   tempSearchResult = res.data.expIndList;\n        // } else if (tempTradeType === \"export\" && isSEZ) {\n        //   tempSearchResult = res.data.expIndList;\n        // } else if (tempTradeType === \"import\" && isForeign) {\n        //   tempSearchResult = res.data.impForeignList;\n        // } else if (tempTradeType === \"import\" && isIND) {\n        //   tempSearchResult = res.data.impIndList;\n        // } else if (tempTradeType === \"import\" && isSEZ) {\n        //   tempSearchResult = res.data.impIndList;\n        // } else {\n        //   tempSearchResult = []\n        // }\n\n        /* change on 24-04-2025 */\n        if (tempTradeType === \"export\") {\n          tempSearchResult = res.data.expForeignList;\n        } else if (tempTradeType === \"import\") {\n          tempSearchResult = res.data.impForeignList;\n        } else {\n          tempSearchResult = []\n        }\n        /* change on 24-04-2025 */\n\n        if (tempSearchResult && tempSearchResult.length > 0) {\n\n          setSearchResult(tempSearchResult);\n          setNoDataErrorMsg(false)\n          getTotalCount(params, res.data.searchId);\n          // console.log(\"props.location.state.columnKeys\", props.location.state)\n          let filteredColumn = []\n          let objColumns = Object.keys(tempSearchResult[0]);\n          for (var x in objColumns) {\n            //  console.log(\"objColumns ==== \", objColumns)\n            if (tempSearchResult[0][objColumns[x]] != null) {\n              filteredColumn.push(objColumns[x]);\n            }\n          }\n          setFilteredColumn(filteredColumn)\n\n          setSearchId(res.data.searchId)\n          if (params.searchFlag == true && orderByColumn == \"\") {\n            props.updateSubscriptionCount({\n              download_count: props.download_count,\n              subscriptionId: props.subscriptionId,\n              dataAccess_count: props.dataAccess_count,\n              totalWorkspace: props.totalWorkspace,\n              subUserCount: props.subUserCount,\n              queryPerDay: props.queryPerDay - 1\n            })\n            UpdateSubscription({ \"queryPerDay\": props.queryPerDay - 1 })\n          }\n\n\n          /* After search set country Filter array */\n          Axios({\n            method: \"POST\",\n            url: `search-management/countrywisecount`,\n            data: JSON.stringify(postData),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          })\n            .then(countryRes => {\n              let tempdata = countryRes.data;\n              let tempOptions = tempdata.countryWiseCount.map(({ ctry_code, ctry_name, shipment_count }) => ({\n                label: `${ctry_name} (${shipment_count})`,\n                value: ctry_code\n              }));\n              // console.log(\"Country Res data , >>>>>>>>>>> \", tempOptions);\n              setFilterCountryList(tempOptions);\n            })\n\n\n          //Added here on 18.04.2024\n\n          getImporterList(params);\n          getExporterList(params);\n          getPortOriginList(params);\n          getPortDestinationList(params);\n          getHSCodeList(params);\n          getIndianCityList(params);\n          getForeignCountryList(params);\n          getHSCode4digitList(params);\n          getShipmentModeList(params);\n          getStdUnitList(params);\n          setSearchLoading(false);\n\n          /* After search set consumptionType Data array for advance search*/\n          await getConsumptionTypeDataList(postData);\n          /* After search set Incoterm list Data array for advance search*/\n          await getIncotermListDataList(postData);\n          /* After search set Notify Party list Data array for advance search*/\n          await getNotifyPartyListDataList(postData);\n        }\n        else {\n          setSearchResult([]);\n          setSearchLoading(false);\n          setTotalRecord(0)\n          setFilteredColumn([])\n          setNoDataErrorMsg(true)\n        }\n        props.loadingStop()\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setSearchId(\"\")\n        setSearchResult([]);\n        setSearchLoading(false);\n        setFilteredColumn([])\n        props.loadingStop()\n      });\n  }\n\n  const getPaginationSearchData = (params) => {\n    // console.log(\"params ---------- \", params)\n    scrollToRef(gridRef);\n    setSearchLoading(true);\n    isTotalRecordLoading(true)\n    let tempSearchResult = []\n    // \"searchId\": searchId,\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"searchId\": searchId,\n      \"hsCodeList\": params.hsCodeList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"orderByColumn\": orderByColumn,\n      \"orderByMode\": orderByMode,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"matchType\": params.matchType,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n\n    }\n\n    Axios({\n      method: \"POST\",\n      url: `search-management/search`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        // if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() != \"IND\" && params.countryCode.toUpperCase() != \"SEZ\") {\n        //   tempSearchResult = res.data.expForeignList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() === \"IND\") {\n        //   tempSearchResult = res.data.expIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() != \"IND\" && params.countryCode.toUpperCase() != \"SEZ\") {\n        //   tempSearchResult = res.data.impForeignList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() === \"IND\") {\n        //   tempSearchResult = res.data.impIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"export\" && params.countryCode.toUpperCase() === \"SEZ\") {\n        //   tempSearchResult = res.data.expIndList\n        // }\n        // else if (params.tradeType.toLowerCase() === \"import\" && params.countryCode.toUpperCase() === \"SEZ\") {\n        //   tempSearchResult = res.data.impIndList\n        // }\n        const countryCodes = params.countryCode.map(code => code.toUpperCase());\n        const isIND = countryCodes.includes(\"IND\");\n        const isSEZ = countryCodes.includes(\"SEZ\");\n        const isForeign = !isIND && !isSEZ;\n\n        const tempTradeType = params.tradeType.toLowerCase();\n\n        // if (tempTradeType === \"export\" && isForeign) {\n        //   tempSearchResult = res.data.expForeignList;\n        // } else if (tempTradeType === \"export\" && isIND) {\n        //   tempSearchResult = res.data.expIndList;\n        // } else if (tempTradeType === \"export\" && isSEZ) {\n        //   tempSearchResult = res.data.expIndList;\n        // } else if (tempTradeType === \"import\" && isForeign) {\n        //   tempSearchResult = res.data.impForeignList;\n        // } else if (tempTradeType === \"import\" && isIND) {\n        //   tempSearchResult = res.data.impIndList;\n        // } else if (tempTradeType === \"import\" && isSEZ) {\n        //   tempSearchResult = res.data.impIndList;\n        // }\n        // else {\n        //   tempSearchResult = []\n        // }\n\n        /* change on 24-04-2025 */\n        if (tempTradeType === \"export\") {\n          tempSearchResult = res.data.expForeignList;\n        } else if (tempTradeType === \"import\") {\n          tempSearchResult = res.data.impForeignList;\n        } else {\n          tempSearchResult = []\n        }\n        /* change on 24-04-2025 */\n\n        if (tempSearchResult && tempSearchResult.length > 0) {\n\n          setSearchResult(tempSearchResult);\n          setNoDataErrorMsg(false)\n          getTotalCount(params, res.data.searchId);\n          let filteredColumn = []\n          let objColumns = Object.keys(tempSearchResult[0]);\n          for (var x in objColumns) {\n            if (tempSearchResult[0][objColumns[x]] != null) {\n              filteredColumn.push(objColumns[x]);\n            }\n          }\n          setFilteredColumn(filteredColumn)\n          setSearchId(res.data.searchId)\n          // if(params.searchFlag == true && orderByColumn == \"\"){\n          //   props.updateSubscriptionCount({\n          //     download_count: props.download_count,\n          //     subscriptionId: props.subscriptionId,\n          //     dataAccess_count: props.dataAccess_count,\n          //     totalWorkspace: props.totalWorkspace,\n          //     subUserCount: props.subUserCount,\n          //     queryPerDay: props.queryPerDay - 1\n          //   })\n          //   UpdateSubscription({\"queryPerDay\": props.queryPerDay - 1})\n          // }\n          setSearchLoading(false);\n        }\n        else {\n          setSearchResult([]);\n          setSearchLoading(false);\n          setTotalRecord(0)\n          setFilteredColumn([])\n          setNoDataErrorMsg(true)\n        }\n        props.loadingStop()\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setSearchId(\"\")\n        setSearchResult([]);\n        setSearchLoading(false);\n        setFilteredColumn([])\n        props.loadingStop()\n      });\n  }\n\n\n  const getTotalCount = (params, searchID) => {\n    // console.log(\"params 2---------- \", params)\n    isTotalRecordLoading(true)\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"searchId\": searchID,\n      \"hsCodeList\": params.hsCodeList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"matchType\": params.matchType,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    console.log(\"111111111111111111111\")\n    Axios({\n      method: \"POST\",\n      url: `/search-management/searchcount`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        setTotalRecord(res.data);\n        updateSearchCount(res.data, searchID)\n        setTimeout(isTotalRecordLoading(false), 1000)\n\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setTotalRecord(0);\n        setNoDataErrorMsg(true)\n      });\n  }\n\n  const updateSearchCount = (totalRecords, searchID) => {\n    // console.log(\"params 2---------- \", params)\n    const postData = {\n      \"totalRecords\": totalRecords,\n    }\n    Axios({\n      method: \"PUT\",\n      url: `/search-management/updatesearchcount/${searchID}`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"Res\", res.data)\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setTotalRecord(0);\n      });\n  }\n\n  const downloadSearch = (searchID, totalDownloadRecords) => {\n    // if(isDownloaded != \"Y\") {\n    Axios({\n      method: \"PUT\",\n      url: `/search-management/downloadsearch?searchId=${searchID}&recordsDownloaded=${totalDownloadRecords}`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        console.log(\"Res\", res.data)\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n      });\n\n    // if(search_id){\n    //   Axios({\n    //     method: \"PUT\",\n    //     url: `/search-management/downloadsearch?searchId=${search_id}`,\n    //     headers: {\n    //       \"Content-Type\": \"application/json\"\n    //     }\n    //   })\n    //     .then(res => {\n    //       console.log(\"Res\", res.data)\n    //     })\n    //     .catch(err => {\n    //       console.log(\"Err\", err);\n    //     });\n    // }\n    // } \n\n  }\n\n\n  const getImporterList = (params) => {\n    isImporterLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listimporters`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let importList = [];\n        if (res.data.importersList) {\n          res.data.importersList.forEach((item) => {\n            let specificItem = { \"value\": item.importer_name, \"label\": item.importer_name + \" [\" + item.shipment_count + \"]\" };\n            importList.push(specificItem);\n          })\n        }\n        setImporterDataList(importList);\n        isImporterLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setImporterDataList([]);\n        isImporterLoading(false);\n      });\n  }\n\n  const getExporterList = (params) => {\n    isExporterLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listexporters`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let exportList = [];\n        if (res.data.exportersList) {\n          res.data.exportersList.forEach((item) => {\n            let specificItem = { \"value\": item.exporter_name, \"label\": item.exporter_name + \" [\" + item.shipment_count + \"]\" };\n            exportList.push(specificItem);\n          })\n        }\n        setExporterDataList(exportList);\n        isExporterLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setExporterDataList([]);\n        isExporterLoading(false);\n      });\n  }\n\n  const getPortOriginList = (params) => {\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n\n\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listindianports`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let portsList = [];\n        if (res.data.portsList) {\n          res.data.portsList.forEach((item) => {\n            let specificItem = { \"value\": item.port_name, \"label\": item.port_name + \" [\" + item.shipment_count + \"]\" };\n            portsList.push(specificItem);\n          })\n        }\n        setPortOriginDataList(portsList);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setPortOriginDataList([]);\n      });\n  }\n\n  const getPortDestinationList = (params) => {\n    isPortDestLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listforeignports`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let portsList = [];\n        if (res.data.portsList) {\n          res.data.portsList.forEach((item) => {\n            let specificItem = { \"value\": item.port_name, \"label\": item.port_name + \"[\" + item.shipment_count + \"]\" };\n            portsList.push(specificItem);\n          })\n        }\n        setPortDestinationDataList(portsList);\n        isPortDestLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setPortDestinationDataList([]);\n        isPortDestLoading(false);\n      });\n  }\n\n  const getHSCodeList = (params) => {\n    isHscodeLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": moment(params.fromDate).format(\"YYYY-MM-DD\"),\n      \"toDate\": moment(params.toDate).format(\"YYYY-MM-DD\"),\n      \"searchBy\": params.searchBy ? params.searchBy : \"HS_CODE\",\n      \"searchValue\": params.searchValue ? params.searchValue : [\"2\"],\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType ? params.matchType : \"L\",\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listhscodes`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let hsList = [];\n        if (res.data.hscodesList) {\n          res.data.hscodesList.forEach((item) => {\n            let specificItem = { \"value\": item.hscode, \"label\": item.hscode + \" [\" + item.shipment_count + \"]\" };\n            hsList.push(specificItem);\n          })\n        }\n        setHsCodeDataList(hsList);\n        isHscodeLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setHsCodeDataList([]);\n        isHscodeLoading(false);\n      });\n  }\n\n  const getHSCode4digitList = (params) => {\n    isHscodeLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listhscodes4digit`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let hsList = [];\n        if (res.data.hscodesList) {\n          res.data.hscodesList.forEach((item) => {\n            let specificItem = { \"value\": item.hscode, \"label\": item.hscode + \" [\" + item.shipment_count + \"]\" };\n            hsList.push(specificItem);\n          })\n        }\n        setHsCode4digitDataList(hsList);\n        isHscodeLoading(false);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        setHsCode4digitDataList([]);\n        isHscodeLoading(false);\n      });\n  }\n\n\n  const getForeignCountryList = (params) => {\n    isCoLoading(true);\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listforeigncountries`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let fcList = [];\n        if (res.data.countriesList) {\n          res.data.countriesList.forEach((item) => {\n            let specificItem = { \"value\": item.country_name, \"label\": item.country_name + \" [\" + item.shipment_count + \"]\" };\n            fcList.push(specificItem);\n          })\n        }\n        setCountryOriginList(fcList);\n        setTimeout(isCoLoading(false), 1000)\n          ;\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setCountryOriginList([]);\n        isCoLoading(false);\n      });\n  }\n\n  const getIndianCityList = (params) => {\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listindiancities`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let icList = [];\n        if (res.data.citiesList) {\n          res.data.citiesList.forEach((item) => {\n            let specificItem = { \"value\": item.city_name, \"label\": item.city_name + \" [\" + item.shipment_count + \"]\" };\n            icList.push(specificItem);\n          })\n        }\n        setCountryDestinationList(icList);\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setCountryDestinationList([]);\n      });\n  }\n\n  const getShipmentModeList = (params) => {\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/listshipmentmode`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let icList = [];\n        if (res.data.shipmentModeList) {\n          res.data.shipmentModeList.forEach((item) => {\n            let specificItem = { \"value\": item.ship_mode, \"label\": item.ship_mode };\n            icList.push(specificItem);\n          })\n        }\n        setShipmentModeDataList(icList);\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setShipmentModeDataList([]);\n      });\n  }\n\n  const getStdUnitList = (params) => {\n    const postData = {\n      \"searchType\": \"TRADE\",\n      \"tradeType\": params.tradeType,\n      \"fromDate\": params.fromDate,\n      \"toDate\": params.toDate,\n      \"searchBy\": params.searchBy,\n      \"searchValue\": params.searchValue,\n      \"countryCode\": params.countryCode,\n      \"pageNumber\": page - 1,\n      \"numberOfRecords\": limit,\n      \"matchType\": params.matchType,\n      \"portOriginList\": params.portOriginList,\n      \"portDestinationList\": params.portDestinationList,\n      \"hsCodeList\": params.hsCodeList,\n      \"hsCode4DigitList\": params.hsCode4DigitList,\n      \"exporterList\": params.exporterList,\n      \"importerList\": params.importerList,\n      \"cityOriginList\": params.cityOriginList,\n      \"cityDestinationList\": params.cityDestinationList,\n      \"searchId\": searchId,\n      \"queryBuilder\": params.queryBuilder,\n      \"shipModeList\": params.shipmentModeList,\n      \"stdUnitList\": params.stdUnitList,\n      \"rangeQuantityStart\": params.rangeQuantityStart,\n      \"rangeQuantityEnd\": params.rangeQuantityEnd,\n      \"consumptionType\": params.consumptionType,\n      \"rangeValueUsdStart\": params.rangeValueUsdStart,\n      \"rangeValueUsdEnd\": params.rangeValueUsdEnd,\n      \"rangeUnitPriceUsdStart\": params.rangeUnitPriceUsdStart,\n      \"rangeUnitPriceUsdEnd\": params.rangeUnitPriceUsdEnd,\n      \"incoterm\": params.incoterm,\n      \"notifyParty\": params.notifyParty,\n      \"productDesc\": params.productDesc,\n      \"conditionProductDesc\": params.conditionProductDesc\n    }\n    Axios({\n      method: \"POST\",\n      url: `/search-management/liststdunit`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        let icList = [];\n        if (res.data.stdUnitList) {\n          res.data.stdUnitList.forEach((item) => {\n            let specificItem = { \"value\": item.std_unit, \"label\": item.std_unit };\n            icList.push(specificItem);\n          })\n        }\n        setStdUnitDataList(icList);\n      })\n      .catch(err => {\n        console.log(\"Err\");\n        setStdUnitDataList([]);\n      });\n  }\n\n  const resetFilter = (data) => {\n    setPreviousTotalRecordCount(0)\n    setIsDownloaded(\"N\")\n    updateFilter(data)\n  }\n\n  const updateFilter = (data) => {\n\n    if (data.portOriginList) {\n      setPortOriginList(data.portOriginList);\n    }\n    if (data.portDestinationList) {\n      setPortDestinationList(data.portDestinationList);\n    }\n    if (data.hsCodeList) {\n      setHsCodeList(data.hsCodeList);\n    }\n    if (data.hsCode4DigitList) {\n      setHsCode4digitList(data.hsCode4DigitList);\n    }\n    if (data.importerList) {\n      setImporterList(data.importerList);\n    }\n    if (data.exporterList) {\n      setExporterList(data.exporterList);\n    }\n    if (data.cityOriginList) {\n      setCityOriginList(data.cityOriginList);\n    }\n    if (data.cityDestinationList) {\n      setCityDestinationList(data.cityDestinationList);\n    }\n    if (data.shipmentModeList) {\n      setShipmentModeList(data.shipmentModeList);\n    }\n    if (data.stdUnitList) {\n      setStdUnitList(data.stdUnitList);\n    }\n    if (data.returnSearchId) {\n      setReturnSearchId(data.returnSearchId);\n    }\n    if (data.consumptionTypeList) {\n      setConsumptionType(data.consumptionTypeList);\n    }\n    if (data.incotermList) {\n      setIncotermList(data.incotermList);\n    }\n    if (data.notifyPartyList) {\n      setNotifyPartyList(data.notifyPartyList);\n    }\n\n\n    if (searchParams && searchParams.tradeType) {\n      let params = searchParams;\n      params.searchType = \"ADVANCE\";\n      params.portOriginList = data.portOriginList;\n      params.portDestinationList = data.portDestinationList;\n      params.hsCodeList = data.hsCodeList;\n      params.importerList = data.importerList;\n      params.exporterList = data.exporterList;\n      params.cityOriginList = data.cityOriginList;\n      params.cityDestinationList = data.cityDestinationList;\n      params.hsCode4DigitList = data.hsCode4DigitList;\n      params.shipmentModeList = data.shipmentModeList;\n      params.stdUnitList = data.stdUnitList;\n      params.searchFlag = false\n\n      // getIndividualRecordCount(params)\n\n      if (data.portOriginList) {\n        // setPortOriginList(data.portOriginList);\n        params[\"portOriginList\"] = data.portOriginList;\n      }\n      if (data.portDestinationList) {\n        // setPortDestinationList(data.portDestinationList);\n        params[\"portDestinationList\"] = data.portDestinationList;\n      }\n      if (data.hsCodeList) {\n        // setHsCodeList(data.hsCodeList);\n        params[\"hsCodeList\"] = data.hsCodeList;\n      }\n      if (data.hsCode4DigitList) {\n        // setHsCode4digitList(data.hsCode4DigitList);\n        params[\"hsCode4DigitList\"] = data.hsCode4DigitList;\n      }\n      if (data.importerList) {\n        // setImporterList(data.importerList);\n        params[\"importerList\"] = data.importerList;\n      }\n      if (data.exporterList) {\n        // setExporterList(data.exporterList);\n        params[\"exporterList\"] = data.exporterList;\n      }\n      if (data.cityOriginList) {\n        // setCityOriginList(data.cityOriginList);\n        params[\"cityOriginList\"] = data.cityOriginList;\n      }\n      if (data.cityDestinationList) {\n        // setCityDestinationList(data.cityDestinationList);\n        params[\"cityDestinationList\"] = data.cityDestinationList;\n      }\n      if (data.shipmentModeList) {\n        // setShipmentModeList(data.shipmentModeList);\n        params[\"shipModeList\"] = data.shipmentModeList;\n      }\n      if (data.stdUnitList) {\n        // setStdUnitList(data.stdUnitList);\n        params[\"stdUnitList\"] = data.stdUnitList;\n      }\n      if (data.minQuantity) {\n        params[\"rangeQuantityStart\"] = data.minQuantity;\n      }\n      if (data.maxQuantity) {\n        params[\"rangeQuantityEnd\"] = data.maxQuantity;\n      }\n      if (data.minValue) {\n        params[\"rangeValueUsdStart\"] = data.minValue;\n      }\n      if (data.maxValue) {\n        params[\"rangeValueUsdEnd\"] = data.maxValue;\n      }\n      if (data.minUnitPrice) {\n        params[\"rangeUnitPriceUsdStart\"] = data.minUnitPrice;\n      }\n      if (data.maxUnitPrice) {\n        params[\"rangeUnitPriceUsdEnd\"] = data.maxUnitPrice;\n      }\n      if (data.consumptionTypeList) {\n        params[\"consumptionType\"] = data.consumptionTypeList;\n      }\n      if (data.incotermList) {\n        params[\"incoterm\"] = data.incotermList;\n      }\n      if (data.notifyPartyList) {\n        params[\"notifyParty\"] = data.notifyPartyList;\n      }\n      if (data.descriptionList) {\n        params[\"conditionProductDesc\"] = data.conditionProductDescription;\n        params[\"productDesc\"] = data.descriptionList;\n      }\n      if (data.returnSearchId) {\n        params[\"returnSearchId\"] = data.returnSearchId;\n      }\n      setSearchParams(params);\n      getSearchData(params);\n\n      // commented 05.04.2024\n\n      //  getImporterList(params);\n      //  getExporterList(params);\n      //  getPortOriginList(params);\n      //  getPortDestinationList(params);\n      //  getHSCodeList(params);\n      //  getIndianCityList(params);\n      //  getForeignCountryList(params);\n      //  getHSCode4digitList(params);\n      // //  getIndividualRecordCount(params)\n      //  getShipmentModeList(params);\n      //  getStdUnitList(params);\n\n\n    }\n    setToggle(false);\n  }\n\n  const getNewWorkspaceId = () => {\n    if (workspaceRef.current.value && workspaceRef.current.value == \"newWorkspace\") {\n      if (!workspaceRef.current.value || !sWorkspaceRef.current.value || !sTitleRef.current.value || !sDescRef.current.value) {\n        if (!workspaceRef.current.value) {\n          isWsError(\"Please select workspace name\");\n        } else isWsError(\"\")\n\n        if (!sWorkspaceRef.current.value) {\n          isNewWsError(\"Please enter workspace name\");\n        } else isNewWsError(\"\")\n\n        if (!sTitleRef.current.value) {\n          isSTitleError(\"Please enter title\");\n        } else isSTitleError(\"\")\n\n        if (!sDescRef.current.value) {\n          isSDescError(\"Please enter description\");\n        } else isSDescError(\"\");\n      }\n      else {\n        const postData = {\n          \"name\": sWorkspaceRef.current.value,\n          \"is_active\": \"Y\",\n        }\n        AxiosACT({\n          method: \"POST\",\n          url: `/activity-management/workspace`,\n          data: JSON.stringify(postData),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        })\n          .then(res => {\n            handleSaveSearch(res.data)\n          })\n          .catch(err => {\n            console.log(\"Err\", err);\n          });\n      }\n    }\n    else {\n      if (!workspaceRef.current.value || !sTitleRef.current.value || !sDescRef.current.value) {\n        if (!workspaceRef.current.value || workspaceRef.current.value == \"--select--\") {\n          isWsError(\"Please enter workspace name\");\n        } else isWsError(\"\")\n\n        if (!sTitleRef.current.value) {\n          isSTitleError(\"Please enter title\");\n        } else isSTitleError(\"\")\n\n        if (!sDescRef.current.value) {\n          isSDescError(\"Please enter description\");\n        } else isSDescError(\"\");\n      }\n      else {\n        handleSaveSearch()\n      }\n    }\n  }\n\n  const handleSaveSearch = (id) => {\n    const postData = {\n      \"workspace_id\": workspaceRef.current.value == \"newWorkspace\" ? id : parseInt(workspaceRef.current.value),\n      \"search_id\": searchId,\n      \"name\": sTitleRef.current.value,\n      \"description\": sDescRef.current.value,\n      \"is_active\": \"Y\",\n    }\n    AxiosACT({\n      method: \"POST\",\n      url: `/activity-management/workspace/savesearch`,\n      data: JSON.stringify(postData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        props.updateSubscriptionCount({\n          download_count: props.download_count,\n          subscriptionId: props.subscriptionId,\n          dataAccess_count: props.dataAccess_count,\n          totalWorkspace: props.totalWorkspace - 1,\n          subUserCount: props.subUserCount,\n          queryPerDay: props.queryPerDay\n        })\n        UpdateSubscription({ \"totalWorkspace\": props.totalWorkspace - 1 })\n        Swal.fire({\n          title: 'Success',\n          text: \"Search query saved successfully\",\n          icon: 'success',\n        })\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n        let errorMsg = \"Somethhing went wrong, please try again.\"\n        if (err.data.errorMsg) {\n          errorMsg = err.data.errorMsg;\n        }\n        Swal.fire({\n          title: 'Oops!',\n          text: errorMsg,\n          icon: 'error',\n        })\n      });\n    toggleModal();\n\n  }\n\n  const getWorkspaceList = () => {\n\n    AxiosACT({\n      method: \"GET\",\n      url: `/activity-management/workspace/list?userId=${userId}`\n    })\n      .then(res => {\n        setWorkspaceList(res.data.workspaceList);\n      })\n      .catch(err => {\n        console.log(\"Err\", err);\n      });\n  }\n\n  useEffect(() => {\n    getWorkspaceList();\n    fetchSearchQuery();\n  }, [])\n\n\n  const getSuggestionList = (value, innitialParams, index) => {\n    if (value && value.length >= 2) {\n      let newSuggestionList = []\n      let QueryBuilderNewSuggestionList = [[], [], []]\n      const postData = {\n        \"tradeType\": innitialParams.tradeType,\n        \"fromDate\": innitialParams.fromDate,\n        \"toDate\": innitialParams.toDate,\n        \"searchBy\": index == \"\" ? innitialParams.searchBy : innitialParams.queryBuilder[index - 1].searchBy,\n        \"searchValue\": value,\n        \"countryCode\": innitialParams.countryCode,\n        \"matchType\": index == \"\" ? innitialParams.matchType : innitialParams.queryBuilder[index - 1].matchType,\n      }\n      Axios({\n        method: \"POST\",\n        url: `/search-management/suggestionlist`,\n        data: JSON.stringify(postData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          if (res.data.suggestionList) {\n            res.data.suggestionList.map((item) => {\n              let specificItem = { \"value\": item.listSuggestion, \"label\": item.listSuggestion };\n              newSuggestionList.push(specificItem);\n            })\n            if (index == \"\") {\n              setSuggestions(newSuggestionList)\n            }\n            else {\n              QueryBuilderNewSuggestionList[index - 1] = newSuggestionList\n              console.log(\"query builder ========== \", QueryBuilderNewSuggestionList)\n              setQueryBuilderSuggestions(QueryBuilderNewSuggestionList)\n            }\n\n          }\n        })\n        .catch(err => {\n          // let newValue =  { \"listSuggestion\": newVal, \"shipmentCount\": 0}    \n          // setSuggestions(newValue)\n        });\n    }\n\n  }\n\n\n  const addnewOption = () => { }\n  const SelectMenuButton = (props) => {\n    return (\n      <components.MenuList  {...props}>\n        {props.children}\n        {/* <button onClick={()=> addnewOption()}>Add new element</button> */}\n      </components.MenuList >\n    )\n  }\n\n  const getTradingCountryList = (params) => {\n    setTradeType(params)\n\n    AxiosMaster({\n      method: \"GET\",\n      url: `masterdata-management/countrylistbytrade/${params}`,\n    })\n      .then(res => {\n        let countryList = [],\n          multiCountryList = [];\n        if (res.data.countryList) {\n          res.data.countryList.forEach((item) => {\n            multiCountryList.push({\n              \"value\": item.shortcode,\n              \"label\": item.name,\n              \"weightagePoints\": params == \"E\" ? item.exportPointWeightage : item.importPointWeightage,\n            });\n            let specificItem = Object.assign(item, { hasChild: false })\n            countryList.push(specificItem);\n          })\n          // }\n          countryList = res.data.countryList.length > 0 && props.countryList.length > 0 && res.data.countryList.filter((item) => {\n            return props.countryList.includes(item.shortcode)\n          })\n\n          setTradeCountryList(countryList);\n          setMultiTradeCountryList(multiCountryList);\n          console.log(\"Multiselect Trade cuntry list >>>> \", multiCountryList);\n        }\n      })\n      .catch(err => {\n        setTradeCountryList([])\n      });\n  }\n\n  const fetchSearchQuery = () => {\n    console.log(\"=====================2\")\n    if (search_id) {\n      let newSuggestionList = []\n      let queryBuilderSuggestionList = []\n      Axios({\n        method: \"GET\",\n        url: `/search-management/search/details`,\n        params: { searchId: search_id }\n      })\n        .then(res => {\n          if (res.data.queryList) {\n            let sParams = res.data.queryList[0].userSearchQuery;\n            initialValues = {\n              ...initialValues,\n              tradeType: sParams.tradeType,\n              matchType: sParams.matchType,\n              searchBy: sParams.searchBy,\n              searchValue: sParams.searchValue,\n              countryCode: sParams.countryCode,\n              fromDate: sParams.fromDate ? new Date(sParams.fromDate) : \"\",\n              toDate: sParams.toDate ? new Date(sParams.toDate) : \"\",\n              dateRange: search_id ? \"6\" : \"\",\n              queryBuilder: sParams.queryBuilder ? sParams.queryBuilder : [],\n              cityDestinationList: sParams.cityDestinationList,\n              cityOriginList: sParams.cityOriginList,\n              exporterList: sParams.exporterList,\n              hsCode4DigitList: sParams.hsCode4DigitList,\n              hsCodeList: sParams.hsCodeList,\n              importerList: sParams.importerList,\n              portDestinationList: sParams.portDestinationList,\n              portOriginList: sParams.portOriginList,\n              shipmentModeList: sParams.shipModeList ? sParams.shipModeList : [],\n              stdUnitList: sParams.stdUnitList ? sParams.stdUnitList : [],\n              minQuantity: sParams.rangeQuantityStart ? sParams.rangeQuantityStart : null,\n              maxQuantity: sParams.rangeQuantityEnd ? sParams.rangeQuantityEnd : null,\n              consumptionTypeList: sParams.consumptionType ? sParams.consumptionType : [],\n              minValue: sParams.rangeValueUsdStart ? sParams.rangeValueUsdStart : null,\n              maxValue: sParams.rangeValueUsdEnd ? sParams.rangeValueUsdEnd : null,\n              minUnitPrice: sParams.rangeUnitPriceUsdStart ? sParams.rangeUnitPriceUsdStart : null,\n              maxUnitPrice: sParams.rangeUnitPriceUsdEnd ? sParams.rangeUnitPriceUsdEnd : null,\n              incotermList: sParams.incoterm ? sParams.incoterm : [],\n              notifyPartyList: sParams.notifyParty ? sParams.notifyParty : []\n            };\n            setCountryCode(sParams.countryCode)\n\n            sParams.searchValue.map((item, index) => {\n              let specificItem = { \"value\": item, \"label\": item };\n              newSuggestionList.push(specificItem);\n            })\n            setSearchValue(newSuggestionList)\n            if (sParams.queryBuilder && sParams.queryBuilder.length > 0) {\n\n              sParams.queryBuilder.map((newitem, newindex) => {\n                let tempArray = []\n                newitem.searchValue.map((item, index) => {\n                  let specificItem = { \"value\": item, \"label\": item };\n                  tempArray.push(specificItem);\n                })\n                queryBuilderSuggestionList[newindex] = tempArray\n              })\n            }\n            setQueryBuilderSearchValue(queryBuilderSuggestionList)\n            console.log(\"initialValues Start ======= \", initialValues)\n\n            setIsDownloaded(res.data.queryList[0].isDownloaded)\n            setPreviousTotalRecordCount(res.data.queryList[0].totalRecords)\n            sParams.tradeType == \"IMPORT\" ? fetchTradingCountryListOnInnitialize(\"I\", sParams.countryCode, sParams.tradeType, initialValues) : fetchTradingCountryListOnInnitialize(\"E\", sParams.countryCode, sParams.tradeType, initialValues)\n          }\n        })\n        .catch(err => {\n          console.log(\"Err\", err);\n        });\n    }\n  }\n\n  const fetchTradingCountryListOnInnitialize = (params, countryCode, tradeType, initialValues) => {\n    setTradeType(params)\n    AxiosMaster({\n      method: \"GET\",\n      url: `masterdata-management/countrylistbytrade/${params}`,\n    })\n      .then(res => {\n        let countryList = [],\n          multiCountryList = [],\n          selectedCountryList = [];\n        if (res.data.countryList) {\n          res.data.countryList.forEach((item) => {\n            multiCountryList.push({\n              \"value\": item.shortcode,\n              \"label\": item.name,\n              \"weightagePoints\": params == \"E\" ? item.exportPointWeightage : item.importPointWeightage,\n            });\n            let specificItem = Object.assign(item, { hasChild: false })\n            countryList.push(specificItem);\n          })\n\n          countryList = res.data.countryList.length > 0 && props.countryList.length > 0 && res.data.countryList.filter((item) => {\n            return props.countryList.includes(item.shortcode)\n          });\n\n\n          setTradeCountryList(countryList);\n          setMultiTradeCountryList(multiCountryList);\n          console.log(\"Multi Country List Trade >>>>> \", multiCountryList)\n\n          // let tempRow = countryList && countryList.filter((item) => item.shortcode.toLowerCase().includes(countryCode.toLowerCase()))\n          const tempRow = countryList.filter((item) =>\n            countryCode.some((code) => item.shortcode.toLowerCase() === code.toLowerCase())\n          );\n\n          tempRow.forEach((item) => {\n            selectedCountryList.push({ \"value\": item.shortcode, \"label\": item.name });\n          })\n          setSelectedTradeCountry(selectedCountryList);\n\n          console.log(\"selectedCountryList >>>>>>>>>>>>>>>>>>\", selectedCountryList)\n\n\n          setImporterForExport(tempRow[0].importerForExport)\n          setExporterForImport(tempRow[0].exporterForImport)\n\n          setDate(countryCode, tradeType, res.data.countryList);\n          if (searchTypeValue !== \"\") {\n            handleSearch(initialValues, countryList, searchTypeValue);\n          } else {\n            handleSearch(initialValues, countryList);\n          }\n\n        }\n      }\n      )\n      .catch(err => {\n        setTradeCountryList([])\n      });\n  }\n\n  // function setDate(text, tradeType, tradeCountryList) {\n  //   // isLoading(true)\n  //   let tempRow = tradeCountryList && tradeCountryList.filter((item) => item.shortcode.toLowerCase().includes(text.toLowerCase()));\n  //   console.log(\"Temp Row On setDate >>> \", tempRow)\n  //   let fromDate = \"\"\n  //   let toDate = \"\"\n\n  //   if (tradeType == \"I\") {\n  //     fromDate = moment(tempRow[0].importFrom).format('MM-DD-YYYY')\n  //     toDate = moment(tempRow[0].importUpto).format('MM-DD-YYYY')\n  //   }\n  //   else {\n  //     fromDate = moment(tempRow[0].exportFrom).format('MM-DD-YYYY')\n  //     toDate = moment(tempRow[0].exportUpto).format('MM-DD-YYYY')\n  //   }\n\n  //   setMinDate(new Date(fromDate))\n  //   setMaxDate(new Date(toDate))\n\n  //   return new Date(toDate)\n  // }\n\n  function setDate(text, tradeType, tradeCountryList) {\n    // text is now an array like [\"Ind\", \"Afg\"]\n    const tempRow = tradeCountryList.filter((item) =>\n      text.some((code) => item.shortcode.toLowerCase() === code.toLowerCase())\n    );\n    console.log(\"Temp Row On setDate >>> \", tempRow);\n\n    if (!tempRow.length) return;\n\n    let fromDate = \"\";\n    let toDate = \"\";\n\n    if (tradeType === \"I\") {\n      fromDate = moment(tempRow[0].importFrom).format(\"MM-DD-YYYY\");\n      toDate = moment(tempRow[0].importUpto).format(\"MM-DD-YYYY\");\n    } else {\n      fromDate = moment(tempRow[0].exportFrom).format(\"MM-DD-YYYY\");\n      toDate = moment(tempRow[0].exportUpto).format(\"MM-DD-YYYY\");\n    }\n\n    setMinDate(new Date(fromDate));\n    setMaxDate(new Date(toDate));\n\n    return new Date(toDate);\n  }\n\n\n\n  // function setMaxMinDate(text) {\n  //   // isLoading(true)\n  //   let tempRow = tradeCountryList && tradeCountryList.filter((item) => item.shortcode.toLowerCase().includes(text.toLowerCase()))\n  //   let fromDate = \"\"\n  //   let toDate = \"\"\n  //   let countrywiseFromDate = \"\"\n  //   console.log(\"tradeType === \", tradeType)\n  //   try {\n  //     if (tradeType == \"I\") {\n  //       countrywiseFromDate = moment(tempRow[0].importFrom).format('MM-DD-YYYY')\n  //       fromDate = moment(tempRow[0].importFrom).format('MM-DD-YYYY')\n  //       toDate = moment(tempRow[0].importUpto).format('MM-DD-YYYY')\n  //     }\n  //     else {\n  //       countrywiseFromDate = moment(tempRow[0].exportFrom).format('MM-DD-YYYY')\n  //       fromDate = moment(tempRow[0].exportFrom).format('MM-DD-YYYY')\n  //       toDate = moment(tempRow[0].exportUpto).format('MM-DD-YYYY')\n  //     }\n\n  //     setMinDate(new Date(fromDate))\n  //     setMaxDate(new Date(toDate))\n\n  //     return new Date(toDate)\n  //   }\n  //   catch {\n  //     props.loadingStop()\n  //     Swal.fire({\n  //       title: 'Error !',\n  //       text: \"Please select country\",\n  //       icon: 'error',\n  //       dangerMode: true,\n  //       confirmButtonColor: '#3085d6',\n  //     })\n  //     return \"\"\n  //   }\n\n  // }\n\n  function setMaxMinDate(selectedCountries, tradeType) {\n    if (!selectedCountries || selectedCountries.length === 0) {\n      Swal.fire({\n        title: 'Error !',\n        text: \"Please select at least one country\",\n        icon: 'error',\n        confirmButtonColor: '#3085d6',\n      });\n      return;\n    }\n\n    let fromDates = [];\n    let toDates = [];\n\n    selectedCountries.forEach(country => {\n      let tempRow = tradeCountryList.find(item => item.shortcode.toLowerCase() === country.value.toLowerCase());\n\n      if (tempRow) {\n        if (tradeType === \"I\") {\n          fromDates.push(moment(tempRow.importFrom).toDate());\n          toDates.push(moment(tempRow.importUpto).toDate());\n        } else {\n          fromDates.push(moment(tempRow.exportFrom).toDate());\n          toDates.push(moment(tempRow.exportUpto).toDate());\n        }\n      }\n    });\n\n    if (fromDates.length > 0 && toDates.length > 0) {\n      let minDate = new Date(Math.min(...fromDates));\n      let maxDate = new Date(Math.max(...toDates));\n\n      console.log(\"Min Date >>>>\", minDate);\n      console.log(\"Max Date >>> \", maxDate);\n\n      setMinDate(minDate);\n      setMaxDate(maxDate);\n\n      return maxDate;\n    }\n  }\n\n  function setExporterImporter(text, setFieldValue) {\n\n    let tempRow = tradeCountryList && tradeCountryList.filter((item) => item.shortcode.toLowerCase().includes(text.toLowerCase()))\n\n    setFieldValue(\"importerForExport\", tempRow[0].importerForExport)\n    setFieldValue(\"exporterForImport\", tempRow[0].exporterForImport)\n    setImporterForExport(tempRow[0].importerForExport)\n    setExporterForImport(tempRow[0].exporterForImport)\n  }\n\n  useEffect(() => {\n    return () => {\n      localStorage.removeItem(\"searchParam\")\n    }\n  }, []);\n\n  async function getConsumptionTypeDataList(searchQuery) {\n    try {\n      const tempTradeType = searchQuery.tradeType.toLowerCase();\n      let columnKey = tempTradeType == \"export\" ? `export_purpose` : `import_purpose`;\n      searchQuery[\"columnName\"] = columnKey;\n\n      // console.log(\"Check colum filter request >>> \", updatedPayload)\n      Axios({\n        method: \"POST\",\n        url: `/search-management/listdistinctcolumnvalue`,\n        data: JSON.stringify(searchQuery),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          // console.log(\"Column value >>> \", res.data.distinctColumnValuesList);\n          let apiResponse = res.data.distinctColumnValuesList;\n          let formattedOptions = apiResponse.map(({ column_name, records_count }) => ({\n            label: `${column_name} (${records_count})`,\n            value: column_name\n          }));\n\n          setConsumptionTypeDataList(formattedOptions);\n        })\n    } catch (e) {\n      console.log(e);\n      setConsumptionTypeDataList([]);\n    }\n  }\n\n  async function getIncotermListDataList(searchQuery) {\n    try {\n      searchQuery[\"columnName\"] = 'incoterm';\n\n      // console.log(\"Check colum filter request >>> \", updatedPayload)\n      Axios({\n        method: \"POST\",\n        url: `/search-management/listdistinctcolumnvalue`,\n        data: JSON.stringify(searchQuery),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          // console.log(\"Column value >>> \", res.data.distinctColumnValuesList);\n          let apiResponse = res.data.distinctColumnValuesList;\n          if (apiResponse && apiResponse.length > 0) {\n            let formattedOptions = apiResponse.map(({ column_name, records_count }) => ({\n              label: `${column_name} (${records_count})`,\n              value: column_name\n            }));\n\n            setIncotermListData(formattedOptions);\n          } else {\n            setIncotermListData([]);\n          }\n        })\n    } catch (e) {\n      console.log(e);\n      setIncotermListData([]);\n    }\n  }\n\n  async function getNotifyPartyListDataList(searchQuery) {\n    try {\n      searchQuery[\"columnName\"] = 'notify_party_name';\n\n      // console.log(\"Check colum filter request >>> \", updatedPayload)\n      Axios({\n        method: \"POST\",\n        url: `/search-management/listdistinctcolumnvalue`,\n        data: JSON.stringify(searchQuery),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => {\n          // console.log(\"Column value >>> \", res.data.distinctColumnValuesList);\n          let apiResponse = res.data.distinctColumnValuesList;\n          let formattedOptions = apiResponse.map(({ column_name, records_count }) => ({\n            label: `${column_name} (${records_count})`,\n            value: column_name\n          }));\n\n          setNotifyPartyListData(formattedOptions);\n        })\n    } catch (e) {\n      console.log(e);\n      setNotifyPartyListData([]);\n    }\n  }\n\n\n  const queryBuilder = (values, errors, touched, setFieldTouched, setFieldValue, Fragment) => {\n    return (\n      <FieldArray\n        name=\"queryBuilder\"\n        render={arrayHelpers => (\n          <>\n            {values.queryBuilder && values.queryBuilder.length > 0 ? (\n              values.queryBuilder.map((data, index) => (\n                <Fragment key={index}>\n                  <div className=\"col-md-2 pr-0 pb-2\">\n                    <div className=\"input-search\">\n                      <Field\n                        name={`queryBuilder[${index}].relation`}\n                        component=\"select\"\n                        className={`hero__form-input form-control custom-select ${touched.matchType && errors.matchType ? \"is-invalid\" : \"\"}`}\n                        autoComplete=\"off\"\n                        onChange={event => {\n                          if (props.queryPerDay > 0) {\n                            setFieldValue(`queryBuilder[${index}].relation`, event.target.value);\n                            setIsSearchClicked(false)\n                          }\n                          else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                            swalResponse()\n                          }\n                        }}\n                      >\n                        <option value=\"\">Select Relation</option>\n                        <option value=\"AND\">AND</option>\n                        {/* <option value=\"OR\">OR</option>\n                   <option value=\"NOT\">NOT</option> */}\n                      </Field>\n                    </div>\n                  </div>\n                  <div className=\"col-md-2 pr-0 pb-2\">\n\n                    <div className=\"input-search\">\n                      <Field\n                        name={`queryBuilder[${index}].searchBy`}\n                        component=\"select\"\n                        className={`hero__form-input form-control custom-select ${touched.searchBy && errors.searchBy ? \"is-invalid\" : \"\"}`}\n                        autoComplete=\"off\"\n                        onChange={event => {\n                          if (props.queryPerDay > 0) {\n                            event.target.value == \"PRODUCT\" ? setFieldValue(`queryBuilder[${index}].matchType`, \"C\") : setFieldValue(`queryBuilder[${index}].matchType`, \"L\");\n                            setFieldValue(`queryBuilder[${index}].searchBy`, event.target.value);\n                            setIsSearchClicked(false)\n                            queryBuilderSearchValue.length = 1\n                          }\n                          else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                            swalResponse()\n                          }\n                        }}\n                      >\n                        <option value=\"\">Select Type</option>\n                        <option value=\"HS_CODE\">HS Code</option>\n                        <option value=\"PRODUCT\">Product</option>\n                        {(values.tradeType == \"EXPORT\" && importerForExport == \"Y\") || values.tradeType == \"IMPORT\" ? <option value=\"IMPORTER\">Importer</option> : null}\n                        {(values.tradeType == \"IMPORT\" && exporterForImport == \"Y\" || values.tradeType == \"EXPORT\") ? <option value=\"EXPORTER\">Exporter</option> : null}\n                      </Field>\n                    </div>\n                  </div>\n                  <div className=\"col-md-2 pr-0 pb-2\">\n                    <div className=\"input-search\">\n                      <Field\n                        name={`queryBuilder[${index}].matchType`}\n                        component=\"select\"\n                        className={`hero__form-input form-control custom-select ${touched.matchType && errors.matchType ? \"is-invalid\" : \"\"}`}\n                        autoComplete=\"off\"\n                        onChange={event => {\n                          if (props.queryPerDay > 0) {\n                            setFieldValue(`queryBuilder[${index}].matchType`, event.target.value);\n                            queryBuilderSearchValue.length = 1\n                            setIsSearchClicked(false)\n                          }\n                          else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                            swalResponse()\n                          }\n                        }}\n                      >\n                        <option value=\"\">Select</option>\n                        {values.queryBuilder && values.queryBuilder.length > 0 && values.queryBuilder[index].hasOwnProperty(\"searchBy\") && values.queryBuilder[index].searchBy == \"PRODUCT\" ? <><option value=\"C\">Contains</option><option value=\"D\">Does Not Contains</option> </> : null}\n                        <option value=\"L\">Like</option>\n                      </Field>\n                    </div>\n                  </div>\n                  {queryBuilderSearchValue && queryBuilderSearchValue.length > 0 ?\n                    <div className=\"col-md-4 pr-0 pb-3\">\n                      <div className=\"input-search\" >\n                        <FormGroup >\n                          <Creatable\n                            placeholder=\"Select an individual\"\n                            name={`queryBuilder[${index}].searchValue`}\n                            options={queryBuilderSuggestions[index]}\n                            isMulti\n                            isOptionDisabled={() => values.queryBuilder[index].searchValue && values.queryBuilder[index].searchValue.length >= 10}\n                            noOptionsMessage={() => \"name not found\"}\n                            components={{ MenuList: SelectMenuButton }}\n                            onInputChange={(newValue) => props.queryPerDay > 0 ? getSuggestionList(newValue, values, index + 1) : null}\n                            onChange={(selectedOption) => {\n                              if (props.queryPerDay > 0) {\n                                let itemList = [];\n                                setIsSearchClicked(false)\n                                selectedOption.forEach((item) => {\n                                  itemList.push(item.value);\n                                });\n                                setFieldValue(`queryBuilder[${index}].searchValue`, itemList);\n                              }\n                              else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                swalResponse()\n                              }\n                            }}\n                            defaultValue={queryBuilderSearchValue[index]}\n                          />\n\n                          {errors.searchValue && touched.searchValue ? (\n                            <span className=\"errorMsg\">{errors.searchValue}</span>\n                          ) : null}\n                        </FormGroup>\n                      </div>\n                    </div> : null\n                  }\n                  {/* {console.log(\"values --- \", values)} */}\n                  <div className=\"col-md-2 pr-0 pb-2\">\n                    {values.searchBy != \"HS_CODE_2\" ?\n                      (<button\n                        type=\"button\" className=\"btn btn-warning\"\n                        onClick={() => arrayHelpers.remove(index)}\n                      >\n                        -\n                      </button>)\n                      :\n                      values.queryBuilder.length > 1 ?\n                        (<button\n                          type=\"button\" className=\"btn btn-warning\"\n                          onClick={() => arrayHelpers.remove(index)}\n                        >\n                          -\n                        </button>)\n                        : null\n                    }\n                    &nbsp;&nbsp;\n                    {values.queryBuilder.length < 3 ?\n                      <button\n                        type=\"button\" className=\"btn btn-warning\"\n                        onClick={() => arrayHelpers.push({ relation: \"\", searchBy: \"\", matchType: \"\", searchValue: \"\" })}\n                      >\n                        +\n                      </button> : null}\n                  </div>\n                </Fragment>\n              ))\n            ) : (\n              <div className=\"col-md-2 pr-0 pb-3\">\n                {workspace_id ? null :\n                  <button type=\"reset\" className=\"btn btn-warning\"\n                    onClick={() => arrayHelpers.push({ relation: \"\", searchBy: \"\", matchType: \"\", searchValue: \"\" })}>ADD</button>\n                }\n              </div>\n            )}\n\n          </>\n        )}\n      />\n    )\n  }\n\n  const swalResponse = () => {\n    Swal.fire({\n      title: 'Search !',\n      text: \"Your Search Limit Exhausted\",\n      icon: 'error',\n      dangerMode: true,\n      confirmButtonColor: '#3085d6',\n    })\n  }\n\n  return (\n    <>\n      <div className=\"container-fluid\" >\n        <div className=\"row\">\n          <div className=\"col-md-12 list-page mt-3\">\n            <div className=\"search-top\">\n              <h5>\n                Select Search Parameters\n              </h5>\n              <Formik\n                enableReinitialize={true}\n                initialValues={initialValues}\n                validationSchema={validateForm}\n                onSubmit={mainSearch}\n                resetForm\n              >\n                {({ values, errors, setFieldValue, setFieldError, touched, isValid, handleSubmit, submitForm, setFieldTouched, resetForm }) => {\n\n                  return (\n                    <Form>\n\n                      <div className=\"row\">\n                        <div className=\"col-md-3 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <Field\n                              name=\"tradeType\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.tradeType && errors.tradeType ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.tradeType}\n                              onChange={event => {\n                                if (props.queryPerDay > 0) {\n                                  setFieldValue(\"tradeType\", event.target.value);\n                                  setFieldValue(\"countryCode\", \"\");\n                                  setFieldValue(\"fromDate\", \"\");\n                                  setFieldValue(\"toDate\", \"\");\n                                  setFieldValue(\"dateRange\", \"\");\n                                  setIsSearchClicked(false)\n                                  setSearchResult([])\n                                  setFilteredColumn([])\n                                  setOrderByColumn(\"\")\n                                  setOrderByMode(\"desc\")\n                                  getTradingCountryList(event.target.value == \"IMPORT\" ? 'I' : 'E')\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                            >\n                              <option value=\"\">Select Trade</option>\n                              <option value=\"IMPORT\">Import</option>\n                              <option value=\"EXPORT\">Export</option>\n                            </Field>\n                            {errors.tradeType && touched.tradeType ? (\n                              <span className=\"errorMsg\">{errors.tradeType}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        {/* <div className=\"col-md-3 pr-0 pb-3\" >\n                          <div className=\"dropdown bootstrap-select hero__form-input  form-control custom-select-multi\" >\n                          <Field\n                              name=\"countryCode\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.countryCode && errors.countryCode ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.countryCode}\n                              isMulti\n                              \n                              onChange={event => {\n                                if(props.queryPerDay > 0 ){       \n                                  setFieldValue(\"countryCode\", event.target.value);\n                                  setFieldValue(\"fromDate\", \"\") ;\n                                  setFieldValue(\"toDate\", \"\") ;\n                                  setFieldValue(\"dateRange\", \"\") ;\n                                  setMaxMinDate(event.target.value, values.tradeType)\n                                  setIsSearchClicked(false)\n                                  setSearchResult([])\n                                  setFilteredColumn([])\n                                  setOrderByColumn(\"\")\n                                  setOrderByMode(\"desc\")\n                                  setCountryCode(event.target.value)\n                                  setExporterImporter(event.target.value, setFieldValue)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }                                \n                              }}\n                            >\n                              <option value = \"\" >Select Country</option>\n                              {Object.keys(tradeCountryList).map((item,index) => (                          \n                                <option key = {index} value={tradeCountryList[item].shortcode}>{tradeCountryList[item].name}</option>\n                              ))}\n                            </Field>\n                            {errors.countryCode && touched.countryCode ? (\n                                  <span className=\"errorMsg\">{errors.countryCode}</span>\n                            ) : null}\n                          <Select\n                              defaultValue={defaultCountry}\n                              isMulti\n                              placeholder = 'Select Country'\n                              name=\"countryCode\"\n                              options={  Object.keys(tradeCountryList).map((item,index) => (      \n                                 { label: tradeCountryList[item].name, value: tradeCountryList[item].shortcode }                                                 \n                              ))}\n                              className={`dropdown bootstrap-select hero__form-input ${touched.countryCode && errors.countryCode ? \"is-invalid\" : \"\"}`}\n                              classNamePrefix=\"select\"\n                              onChange={(selectedOption) => {\n                                let itemList = [];\n                                selectedOption.forEach((item)=>{\n                                  itemList.push(item.value);\n                                });\n                                setFieldValue(\"countryCode\", itemList);\n                              }}\n                            />\n\n                          <DropDownTreeComponent id=\"dropdowntree\"\n                            fields={ { \n                                      dataSource: tradeCountryList,\n                                      value: 'shortcode',\n                                      text: 'name',\n                                      parentValue: \"pid\",\n                                      hasChildren: 'hasChild'           \n                                    }} \n                            showCheckBox={true} \n                            treeSettings={treeSettings} \n                            showSelectAll={true}\n                            selectAllText={\"Check All\"} \n                            unSelectAllText={\"UnCheck All\"}       \n                            value = {countryCode}\n                            change={(selectedOption) => {                            \n                              setFieldValue(\"countryCode\", selectedOption.value);\n                            }}\n                            />\n                          <MultiSelect\n                            options={multiTradeCountryList}\n                            value={selectedTradeCountry}\n                            onChange={(selectedOption) => {\n                              setSelectedTradeCountry(selectedOption);\n                              const selectedValues = selectedOption.map(option => option.value);\n                              console.log(\"selectedValues >>> \", selectedValues)\n                              setFieldValue(\"countryCode\", selectedValues);\n                              setFieldValue(\"fromDate\", \"\");\n                              setFieldValue(\"toDate\", \"\");\n                              setFieldValue(\"dateRange\", \"\");\n                              setMaxMinDate(selectedOption, values.tradeType);\n                            }}\n                            labelledBy=\"Select\"\n                          />\n\n\n\n\n                          {errors.countryCode && touched.countryCode ? (\n                            <span className=\"errorMsg\">{errors.countryCode}</span>\n                          ) : null}\n                          </div>\n                        </div> */}\n\n                        <div className=\"col-md-3 pr-0 pb-3\" >\n\n\n                          <CountrySelector\n                            multiTradeCountryList={multiTradeCountryList}\n                            selectedTradeCountry={selectedTradeCountry}\n                            setFieldValue={setFieldValue}\n                            values={values}\n                            setSelectedTradeCountry={setSelectedTradeCountry}\n                            setMaxMinDate={setMaxMinDate}\n                          />\n\n\n                          {errors.countryCode && touched.countryCode ? (\n                            <span className=\"errorMsg\">{errors.countryCode}</span>\n                          ) : null}\n                          {/* </div> */}\n                        </div>\n                        <div className=\"col-md-2 pr-0 pb-3\">\n                          <div className=\"dropdown bootstrap-select hero__form-input\">\n                            <Field\n                              name=\"dateRange\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.dateRange && errors.dateRange ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.dateRange}\n                              onChange={event => {\n\n                                if (props.queryPerDay > 0) {\n                                  props.loadingStart()\n                                  setIsSearchClicked(false)\n                                  setFieldValue(\"dateRange\", event.target.value);\n                                  let tempmaxMin = setMaxMinDate(selectedTradeCountry, values.tradeType);\n                                  let tempMaxDate = moment(tempmaxMin).diff(moment(props.dataAccessUpto), 'days') > 0 ? props.dataAccessUpto : tempmaxMin\n                                  let newMaxDate = \"\"\n\n                                  if (values.countryCode.includes(\"IND\") || values.countryCode.includes(\"SEZ\")) {\n                                    const newDate = moment().diff(moment(tempMaxDate), 'days') > 0 ? tempMaxDate : new Date();\n                                    const d = new Date(newDate);\n                                    d.setDate(1);\n                                    newMaxDate = moment(d).subtract(1, 'days');\n                                  } else {\n                                    newMaxDate = moment().diff(moment(tempMaxDate), 'days') > 0 ? tempMaxDate : new Date();\n                                  }\n\n\n\n                                  let fromdate = \"\"\n                                  let dateDiff = \"\"\n                                  let tempFromdate = \"\"\n\n                                  if (newMaxDate != \"\") {\n                                    switch (event.target.value) {\n                                      case \"1\":\n\n                                        fromdate = new Date(newMaxDate);\n                                        fromdate.setDate(1)\n\n\n\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days')\n                                        if (dateDiff >= 0) {\n                                          setFieldValue(\"fromDate\", new Date(fromdate))\n                                        }\n                                        else {\n                                          setFieldValue(\"fromDate\", new Date(props.dataAccessInMonth))\n                                        }\n                                        setFieldValue(\"toDate\", new Date(newMaxDate))\n                                        props.loadingStop()\n                                        break;\n                                      case \"2\":\n\n                                        tempFromdate = moment(newMaxDate).subtract(3, 'months').add(5, \"days\").format(\"YYYY-MM-DD\")\n                                        fromdate = new Date(tempFromdate);\n                                        fromdate.setDate(1)\n\n\n\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days')\n                                        if (dateDiff >= 0) {\n                                          setFieldValue(\"fromDate\", new Date(fromdate))\n                                        }\n                                        else {\n                                          setFieldValue(\"fromDate\", new Date(props.dataAccessInMonth))\n                                        }\n                                        setFieldValue(\"toDate\", new Date(newMaxDate))\n                                        props.loadingStop()\n                                        break;\n\n                                      case \"3\":\n\n                                        tempFromdate = moment(newMaxDate).subtract(6, 'months').add(5, \"days\").format(\"YYYY-MM-DD\")\n                                        fromdate = new Date(tempFromdate);\n                                        fromdate.setDate(1)\n\n\n\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days')\n                                        if (dateDiff >= 0) {\n                                          setFieldValue(\"fromDate\", new Date(fromdate))\n                                        }\n                                        else {\n                                          setFieldValue(\"fromDate\", new Date(props.dataAccessInMonth))\n                                        }\n                                        setFieldValue(\"toDate\", new Date(newMaxDate))\n                                        props.loadingStop()\n                                        break;\n                                      case \"4\":\n                                        tempFromdate = moment(newMaxDate).subtract(12, 'months').add(5, \"days\").format(\"YYYY-MM-DD\")\n                                        fromdate = new Date(tempFromdate);\n                                        fromdate.setDate(1)\n                                        dateDiff = moment(fromdate).diff(moment(props.dataAccessInMonth), 'days')\n                                        if (dateDiff >= 0) {\n                                          setFieldValue(\"fromDate\", new Date(fromdate))\n                                        }\n                                        else {\n                                          setFieldValue(\"fromDate\", new Date(props.dataAccessInMonth))\n                                        }\n                                        setFieldValue(\"toDate\", new Date(newMaxDate))\n                                        props.loadingStop()\n                                        break;\n                                      default:\n                                        setFieldValue(\"toDate\", \"\")\n                                        setFieldValue(\"fromDate\", \"\")\n                                        props.loadingStop()\n                                    }\n                                  }\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                            >\n                              <option value=\"\"> Choose Month Range</option>\n                              <option value=\"1\">LAST 1 MONTH</option>\n                              <option value=\"2\">LAST 3 MONTHS</option>\n                              <option value=\"3\">LAST 6 MONTHS</option>\n                              <option value=\"4\">LAST 1 YEAR</option>\n                              <option value=\"6\">CUSTOM</option>\n                            </Field>\n                            {errors.dateRange && touched.dateRange ? (\n                              <span className=\"errorMsg\">{errors.dateRange}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        <div className=\"col-md-2 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <DatePicker\n                              name=\"fromDate\"\n                              dateFormat=\"yyyy MMM dd  \"\n                              placeholderText=\"From\"\n                              peekPreviousMonth\n                              peekPreviousYear\n                              showMonthDropdown\n                              showYearDropdown\n                              minDate={moment(minDate).diff(moment(props.dataAccessInMonth), 'days') > 0 ? new Date(minDate) : new Date(props.dataAccessInMonth)}\n                              // maxDate={new Date(maxDate)}\n                              maxDate={(props.dataAccessUpto == null || props.dataAccessUpto == \"\") ? new Date(maxDate) : moment(props.dataAccessUpto).diff(moment(maxDate), 'days') > 0 ? new Date(maxDate) : new Date(props.dataAccessUpto)}\n                              className=\"form-control\"\n                              dropdownMode=\"select\"\n                              onChange={(value) => {\n                                if (props.queryPerDay > 0) {\n                                  setFieldValue(\"fromDate\", value);\n                                  setFieldTouched(\"fromDate\");\n                                  setFieldValue(\"dateRange\", 6)\n                                  setIsSearchClicked(false)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                              selected={values.fromDate}\n                            />\n                            {errors.fromDate && touched.fromDate ? (\n                              <span className=\"errorMsg\">{errors.fromDate}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        <div className=\"col-md-2 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <DatePicker\n                              name=\"toDate\"\n                              dateFormat=\"yyyy MMM dd  \"\n                              placeholderText=\"To\"\n                              peekPreviousMonth\n                              peekPreviousYear\n                              showMonthDropdown\n                              showYearDropdown\n                              //  minDate= {moment(minDate)} \n                              minDate={moment(minDate).diff(moment(props.dataAccessInMonth), 'days') > 0 ? new Date(minDate) : new Date(props.dataAccessInMonth)}\n                              maxDate={(props.dataAccessUpto == null || props.dataAccessUpto == \"\") ? new Date(maxDate) : moment(props.dataAccessUpto).diff(moment(maxDate), 'days') > 0 ? new Date(maxDate) : new Date(props.dataAccessUpto)}\n                              className=\"form-control\"\n                              dropdownMode=\"select\"\n                              onChange={(value) => {\n                                if (props.queryPerDay > 0) {\n                                  setFieldValue(\"toDate\", value);\n                                  setFieldTouched(\"toDate\");\n                                  setFieldValue(\"dateRange\", 6)\n                                  setIsSearchClicked(false)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                              selected={values.toDate}\n                            />\n                            {errors.toDate && touched.toDate ? (\n                              <span className=\"errorMsg\">{errors.toDate}</span>\n                            ) : null}\n                          </div>\n                        </div>\n\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"col-md-3 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <Field\n                              name=\"searchBy\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.searchBy && errors.searchBy ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.searchBy}\n                              onChange={event => {\n                                if (props.queryPerDay > 0) {\n                                  event.target.value == \"PRODUCT\" ? setFieldValue(\"matchType\", \"C\") : setFieldValue(\"matchType\", \"L\");\n                                  searchValue.length = 1\n                                  setFieldValue(\"searchBy\", event.target.value);\n                                  setIsSearchClicked(false)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                            >\n                              <option value=\"\">Select Type</option>\n                              <option value=\"HS_CODE_2\">HS Code 2 digit</option>\n                              <option value=\"HS_CODE\">HS Code</option>\n                              <option value=\"PRODUCT\">Product</option>\n                              {(values.tradeType == \"EXPORT\" && importerForExport == \"Y\") || values.tradeType == \"IMPORT\" ? <option value=\"IMPORTER\">Importer</option> : null}\n                              {(values.tradeType == \"IMPORT\" && exporterForImport == \"Y\" || values.tradeType == \"EXPORT\") ? <option value=\"EXPORTER\">Exporter</option> : null}\n                            </Field>\n                            {errors.searchBy && touched.searchBy ? (\n                              <span className=\"errorMsg\">{errors.searchBy}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        <div className=\"col-md-3 pr-0 pb-3\">\n                          <div className=\"input-search\">\n                            <Field\n                              name=\"matchType\"\n                              component=\"select\"\n                              className={`hero__form-input form-control custom-select ${touched.matchType && errors.matchType ? \"is-invalid\" : \"\"}`}\n                              autoComplete=\"off\"\n                              value={values.matchType}\n                              onChange={event => {\n                                if (props.queryPerDay > 0) {\n                                  setFieldValue(\"matchType\", event.target.value);\n                                  searchValue.length = 1\n                                  setIsSearchClicked(false)\n                                }\n                                else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                  swalResponse()\n                                }\n                              }}\n                            >\n                              <option value=\"\">Select</option>\n                              {values.searchBy == \"PRODUCT\" ? <><option value=\"C\">Contains</option><option value=\"D\">Does Not Contains</option> </> : null}\n                              <option value=\"L\">Like</option>\n                            </Field>\n                            {errors.matchType && touched.matchType ? (\n                              <span className=\"errorMsg\">{errors.matchType}</span>\n                            ) : null}\n                          </div>\n                        </div>\n                        {searchValue && searchValue.length > 0 ?\n                          <div className=\"col-md-4 pr-0 pb-3\">\n                            <div className=\"input-search\" >\n                              <FormGroup >\n                                <Creatable\n                                  placeholder={values.searchBy == \"HS_CODE\" ? \"Enter min 4 digit\" : \"Enter min 2 chars\"}\n                                  name=\"searchValue\"\n                                  options={suggestions}\n                                  isMulti\n                                  isOptionDisabled={() => values.searchValue && values.searchValue.length >= 10}\n                                  noOptionsMessage={() => \"name not found\"}\n                                  components={{ MenuList: SelectMenuButton }}\n                                  onInputChange={(newValue) => props.queryPerDay > 0 ? getSuggestionList(newValue, values, \"\") : null}\n                                  onChange={(selectedOption) => {\n\n                                    if (props.queryPerDay > 0) {\n                                      let itemList = [];\n                                      let newQuery = []\n                                      let isQueryBuilder = false\n                                      setIsSearchClicked(false)\n                                      selectedOption.forEach((item) => {\n                                        itemList.push(item.value);\n                                        if (values.searchBy == \"HS_CODE_2\") {\n                                          isQueryBuilder = true\n                                        }\n                                      });\n                                      if (isQueryBuilder == true) {\n                                        newQuery[0] = { relation: \"\", searchBy: \"\", matchType: \"\", searchValue: \"\" }\n                                        setFieldValue(\"queryBuilder\", newQuery)\n                                      }\n                                      setFieldValue(\"searchValue\", itemList);\n                                    }\n                                    else if (props.queryPerDay <= 0 && props.queryPerDay != null) {\n                                      swalResponse()\n                                    }\n                                  }}\n                                  defaultValue={searchValue}\n                                />\n\n                                {errors.searchValue && touched.searchValue ? (\n                                  <span className=\"errorMsg\">{errors.searchValue}</span>\n                                ) : null}\n                              </FormGroup>\n                            </div>\n                          </div> : null\n                        }\n\n                      </div>\n\n                      <div className=\"row\">\n                        {queryBuilder(values, errors, touched, setFieldTouched, setFieldValue, Fragment)}\n                      </div>\n\n                      {workspace_id ? null :\n                        <div className=\"row\">\n                          <div className=\"col-md-2 pr-0 pb-3\">\n                            <button type=\"reset\" className=\"btn btn-warning\"\n                              onClick={(event) => {\n                                resetSearch(setFieldValue, values);\n                              }}>Reset</button> &nbsp;\n                            <button type=\"submit\"\n                              disabled={isSearchClicked}\n                              onClick={(event) => {\n                                event.preventDefault();\n                                setSearchId(\"\");\n                                setFieldValue(\"searchFlag\", true);\n                                handleSubmit();\n                              }} className=\"btn btn-primary\">Search</button>\n                          </div>\n                        </div>\n                      }\n                    </Form>\n                  )\n                }\n                }\n              </Formik>\n            </div>\n\n            {searchParams && searchParams.tradeType && searchResult.length > 0 ? (\n              <div className=\"row searchCountBlk\">\n                <div className=\"col-md-12 text-center\">\n\n                  <h3>Search Result of {searchParams.tradeType.toLowerCase()} data from&nbsp;\n                    {moment(searchParams.fromDate).format(\"DD-MMM-YYYY\")} to {moment(searchParams.toDate).format('DD-MMM-YYYY')}</h3>\n\n                </div>\n                {noDataErrorMsg == false ?\n                  <>\n                    <div className=\"col-lg-2 col-md-2 offset-md-1\">\n                      <div className=\"card\">\n                        <div className=\"card-body bg-soft-primary\">\n                          <div className=\"avatar\">\n                            <span className=\"avatar-title bg-soft-primary rounded\">\n                              <i className=\"icon ion-ios-barcode text-primary font-size-24\"></i>\n                            </span>\n                          </div>\n                          <div className=\"list-in\">\n                            <p className=\"text-muted mt-0 mb-0\">HSCODE</p>\n                            <h4 className=\"mt-0 mb-0\">{hsCodeDataList.length}</h4>\n                          </div>\n                        </div>\n                        {hscodeLoading && (\n                          <div className=\"loaderBox\">\n                            <div className=\"loader\"></div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"col-lg-2 col-md-2\">\n                      <div className=\"card\">\n                        <div className=\"card-body bg-soft-success\">\n                          <div className=\"avatar\">\n                            <span className=\"avatar-title bg-soft-success rounded\">\n                              <i className=\"icon ion-md-filing text-primary font-size-24\"></i>\n                            </span>\n                          </div>\n                          <div className=\"list-in\">\n                            <p className=\"text-muted mt-0 mb-0\">Total Shipment</p>\n                            <h4 className=\"mt-0 mb-0\">{totalRecord}</h4>\n                          </div>\n                        </div>\n                        {totalRecordLoading && (\n                          <div className=\"loaderBox\">\n                            <div className=\"loader\"></div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"col-lg-2 col-md-2\">\n                      <div className=\"card\">\n                        <div className=\"card-body bg-soft-primary\">\n                          <div className=\"avatar\">\n                            <span className=\"avatar-title bg-soft-primary rounded\">\n                              <i className=\"icon ion-md-business text-primary font-size-24\"></i>\n                            </span>\n                          </div>\n                          <div className=\"list-in\">\n                            <p className=\"text-muted mt-0 mb-0\"> {tradeType == \"E\" ? \"Country Of Destination\" : \"Country Of Origin\"}</p>\n                            <h4 className=\"mt-0 mb-0\">{countryOriginList.length}</h4>\n                          </div>\n                        </div>\n                        {portDestLoading && (\n                          <div className=\"loaderBox\">\n                            <div className=\"loader\"></div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    {(searchParams.tradeType == \"IMPORT\" && exporterForImport == \"Y\" || searchParams.tradeType == \"EXPORT\") ?\n                      <div className=\"col-lg-2 col-md-2\">\n                        <div className=\"card\">\n                          <div className=\"card-body bg-soft-success\">\n                            <div className=\"avatar\">\n                              <span className=\"avatar-title bg-soft-success rounded\">\n                                <i className=\"icon ion-md-filing text-primary font-size-24\"></i>\n                              </span>\n                            </div>\n                            <div className=\"list-in\">\n                              <p className=\"text-muted mt-0 mb-0\">Exporter</p>\n                              <h4 className=\"mt-0 mb-0\">{exporterDataList && exporterDataList.length}</h4>\n                            </div>\n                          </div>\n                          {exporterLoading && (\n                            <div className=\"loaderBox\">\n                              <div className=\"loader\"></div>\n                            </div>\n                          )}\n                        </div>\n                      </div> : null}\n                    {(searchParams.tradeType == \"EXPORT\" && importerForExport == \"Y\") || searchParams.tradeType == \"IMPORT\" ?\n                      <div className=\"col-lg-2 col-md-2\">\n                        <div className=\"card\">\n                          <div className=\"card-body bg-soft-primary\">\n                            <div className=\"avatar\">\n                              <span className=\"avatar-title bg-soft-primary rounded\">\n                                <i className=\"icon ion-ios-business text-primary font-size-24\"></i>\n                              </span>\n                            </div>\n                            <div className=\"list-in\">\n                              <p className=\"text-muted mt-0 mb-0\">Importer</p>\n                              <h4 className=\"mt-0 mb-0\">{importerDataList && importerDataList.length}</h4>\n                              {/* <h4 className=\"mt-0 mb-0\">{searchParams.tradeType = \"IMPORT\" ? importerDataList.length : exporterDataList.length}</h4> */}\n                            </div>\n                          </div>\n                          {importerLoading && (\n                            <div className=\"loaderBox\">\n                              <div className=\"loader\"></div>\n                            </div>\n                          )}\n                        </div>\n                      </div> : null}\n                  </>\n                  :\n                  <div className=\"col-lg-12 col-md-12 text-center\">\n                    <p>&nbsp;</p>\n                    <p>&nbsp;</p>\n                    <img src={require('../assets/image/Error.png').default}></img>\n                    <h4><p>Sorry we couldn't find any matches.</p></h4>\n                    <h2>Please Try Again</h2>\n                  </div>\n                }\n              </div>\n            ) : null}\n\n            <Draggable>\n              <div class=\"ad-butt\">\n                <button className=\"btn btn-primary ad-butt-button\" onClick={() => setToggle(!toggle)}><i className=\"icon ion-md-search text-light font-size-35\"></i></button>\n              </div>\n            </Draggable>\n\n\n            <div ref={gridRef}></div>\n            {/* {console.log(\"Search Result >>> \", searchResult)}\n            {console.log(\"Filtered Column >>> \", filteredColumn)}\n            {console.log(\"Trade Type >>>> \", tradeType)} */}\n            {filteredColumn.length > 0 ? (\n              tradeType === 'E' ? (\n                <DataTableExport\n                  exportToCSV={exportToCSV}\n                  searchResult={searchResult}\n                  limit={limit}\n                  page={page}\n                  setPage={setPage}\n                  handleChangeLimit={handleChangeLimit}\n                  totalRecord={totalRecord}\n                  searchLoading={searchLoading}\n                  setOrderByColumn={setOrderByColumn}\n                  setOrderByMode={setOrderByMode}\n                  orderByColumn={orderByColumn}\n                  orderByMode={orderByMode}\n                  setWorkspace={setWorkspace}\n                  showModal={showModal}\n                  filteredColumn={filteredColumn}\n                  saveQuery={saveQuery}\n                  search_id={searchId ? searchId : search_id}\n                  state={props.location.state}\n                  exportSelectedToCSV={exportSelectedToCSV}\n                  importerDataList={importerDataList}\n                  countryCode={countryCode}\n                  newColumnsKeys={props.location.state && props.location.state.columnKeys ? props.location.state.columnKeys : []}\n                  importerForExport={importerForExport}\n                  exporterForImport={exporterForImport}\n                  filterCountryList={filterCountryList}\n                />\n              ) : (\n                <DataTableImport\n                  exportToCSV={exportToCSV}\n                  searchResult={searchResult}\n                  limit={limit}\n                  page={page}\n                  setPage={setPage}\n                  handleChangeLimit={handleChangeLimit}\n                  totalRecord={totalRecord}\n                  searchLoading={searchLoading}\n                  setOrderByColumn={setOrderByColumn}\n                  setOrderByMode={setOrderByMode}\n                  orderByColumn={orderByColumn}\n                  orderByMode={orderByMode}\n                  setWorkspace={setWorkspace}\n                  showModal={showModal}\n                  filteredColumn={filteredColumn}\n                  saveQuery={saveQuery}\n                  search_id={searchId ? searchId : search_id}\n                  state={props.location.state}\n                  exportSelectedToCSV={exportSelectedToCSV}\n                  importerDataList={importerDataList}\n                  countryCode={countryCode}\n                  newColumnsKeys={props.location.state && props.location.state.columnKeys ? props.location.state.columnKeys : []}\n                  importerForExport={importerForExport}\n                  exporterForImport={exporterForImport}\n                  filterCountryList={filterCountryList}\n                />\n              )) : noDataErrorMsg ? <div><h2>No records found</h2></div> : null}\n          </div>\n        </div>\n\n        {toggle && <AdvanceSearch toggleFromChild={setToggle}\n          importerDataList={importerDataList}\n          exporterDataList={exporterDataList}\n          portOriginDataList={portOriginDataList}\n          portDestinationDataList={portDestinationDataList}\n          countryOriginList={countryOriginList}\n          countryDestinationList={countryDestinationList}\n          hsCodeDataList={hsCodeDataList}\n          shipmentModeDataList={shipmentModeDataList}\n          shipmentModeList={shipmentModeList}\n          type={searchParams.tradeType}\n          countryCode={searchParams.countryCode}\n          updateFilter={updateFilter}\n          portOriginList={portOriginList}\n          portDestinationList={portDestinationList}\n          hsCodeList={hsCodeList}\n          importerList={importerList}\n          exporterList={exporterList}\n          cityOriginList={cityOriginList}\n          cityDestinationList={cityDestinationList}\n          hsCode4digitDataList={hsCode4digitDataList}\n          hsCode4DigitList={hsCode4DigitList}\n          fetchSearchQuery={fetchSearchQuery}\n          resetFilter={resetFilter}\n          stdUnitList={stdUnitList}\n          stdUnitDataList={stdUnitDataList}\n          searchId={searchId}\n          importerForExport={importerForExport}\n          exporterForImport={exporterForImport}\n          consumptionType={consumptionType}\n          consumptionTypeDataList={consumptionTypeDataList}\n          incotermList={incotermList}\n          incotermDataList={incotermListData}\n          notifyPartyList={notifyPartyList}\n          notifyPartyDataList={notifyPartyListData}\n        />\n        }\n      </div>\n      <div id=\"reportXLS\" hidden={true}>\n        {filteredArray && filteredArray.length > 0 ? <DloadTemplateXLS filteredArray={filteredArray} tradeType={tradeType} countryCode={countryCode} /> : null}\n      </div>\n\n      <Modal\n        show={showModal}\n        onHide={toggleModal}\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Save search</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <label>Workspace:</label>\n              <select className=\"form-control\" ref={workspaceRef}\n                onChange={(e) => { handleWorkspaceChange(e) }}>\n                <option >--select--</option>\n                <option value=\"newWorkspace\">Create New Workspace</option>\n                {workspaceList.map((ws, index) => {\n                  return (\n                    <option key={index} value={ws.id}>{ws.name}</option>\n                  )\n                })}\n              </select>\n              {wsError && (<p className='error'>{wsError}</p>)}\n            </div>\n            {showNewWorkspaceInput ?\n              <div className=\"col-md-12\">\n                <label>New workspace name:</label>\n                <input type=\"text\" name=\"title\" ref={sWorkspaceRef} className=\"form-control\" />\n                {sNewWsError && (<p className='error'>{sNewWsError}</p>)}\n              </div> : null\n            }\n            <div className=\"col-md-12\">\n              <label>Title:</label>\n              <input type=\"text\" name=\"title\" ref={sTitleRef} className=\"form-control\" />\n              {sTitleError && (<p className='error'>{sTitleError}</p>)}\n            </div>\n            <div className=\"col-md-12\">\n              <label>Description:</label>\n              <input type=\"text\" name=\"title\" ref={sDescRef} className=\"form-control\" />\n              {sDescError && (<p className='error'>{sDescError}</p>)}\n            </div>\n\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={toggleModal}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={() => {\n            getNewWorkspaceId()\n          }}>Submit</Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\n\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loader.loading,\n    download_count: state.data.download_count,\n    subscriptionId: state.data.subscriptionId,\n    dataAccess_count: state.data.dataAccess_count,\n    totalWorkspace: state.data.totalWorkspace,\n    subUserCount: state.data.subUserCount,\n    queryPerDay: state.data.queryPerDay,\n    downloadArray: state.data.downloadArray,\n    countryList: state.data.countryList,\n    dataAccessInMonth: state.data.dataAccessInMonth,\n    download_count_subUser: state.data.download_count_subUser,\n    dataAccessUpto: state.data.dataAccessUpto,\n    maxDownload: state.data.maxDownload,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadingStart: () => dispatch(loaderStart()),\n    loadingStop: () => dispatch(loaderStop()),\n    updateSubscriptionCount: (data) => dispatch(updateSubscriptionCount(data)),\n    updateDownloadArrayCount: (data) => dispatch(updateDownloadArrayCount(data)),\n    setDloadCountSubuser: (data) => dispatch(setDloadCountSubuser(data)),\n    setSearchQuery: (data) => dispatch(setSearchQuery(data))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(List));\n"],"sourceRoot":""}